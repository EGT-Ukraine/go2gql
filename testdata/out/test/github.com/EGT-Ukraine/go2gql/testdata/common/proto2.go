// This file was generated by github.com/EGT-Ukraine/go2gql. DO NOT EDIT IT
package common

import (
	context "context"

	scalars "github.com/EGT-Ukraine/go2gql/api/scalars"
	common "github.com/EGT-Ukraine/go2gql/testdata/common"
	errors "github.com/pkg/errors"
	graphql "github.com/saturn4er/graphql"
)

// Enums
// Input object
var Proto2MessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "Proto2MessageInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	Proto2MessageInput.Fields()["scalar"] = &graphql.InputObjectField{PrivateName: "scalar", Type: scalars.GraphQLInt32Scalar}
}

// Input objects resolvers
func ResolveProto2MessageInput(ctx context.Context, i interface{}) (_ *common.Proto2Message, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(common.Proto2Message)
	if args["scalar"] != nil {
		result.Scalar = func(arg interface{}) *int32 {
			val := arg.(int32)
			return &val
		}(args["scalar"])
	}

	return result, nil
}

// Output objects
var Proto2Message = graphql.NewObject(graphql.ObjectConfig{
	Name:   "Proto2Message",
	Fields: graphql.Fields{},
})

func init() {
	Proto2Message.AddFieldConfig("scalar", &graphql.Field{
		Name: "scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *common.Proto2Message:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.Scalar, nil
			case common.Proto2Message:
				return src.Scalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

// Maps input objects
// Maps input objects resolvers
// Maps output objects
