// This file was generated by github.com/EGT-Ukraine/go2gql. DO NOT EDIT IT
package test

import (
	context "context"
	fmt "fmt"
	debug "runtime/debug"

	interceptors "github.com/EGT-Ukraine/go2gql/api/interceptors"
	scalars "github.com/EGT-Ukraine/go2gql/api/scalars"
	tracer "github.com/EGT-Ukraine/go2gql/api/tracer"
	testdata "github.com/EGT-Ukraine/go2gql/testdata"
	common_1 "github.com/EGT-Ukraine/go2gql/testdata/common"
	common "github.com/EGT-Ukraine/go2gql/testdata/out/test/github.com/EGT-Ukraine/go2gql/testdata/common"
	opentracing_go "github.com/opentracing/opentracing-go"
	log "github.com/opentracing/opentracing-go/log"
	errors "github.com/pkg/errors"
	graphql "github.com/saturn4er/graphql"
)

// Enums
var ExmplRootEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplRootEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"RootEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"RootEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
		"RootEnumVal2": &graphql.EnumValueConfig{
			Value:       2,
			Description: "It's a RootEnumVal2",
		},
	},
})
var ExmplRootMessageNestedEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplRootMessageNestedEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"NestedEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"NestedEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
	},
})
var ExmplRootMessageNestedMessageNestedNestedEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplRootMessageNestedMessageNestedNestedEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"NestedNestedEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"NestedNestedEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
		"NestedNestedEnumVal2": &graphql.EnumValueConfig{
			Value: 2,
		},
		"NestedNestedEnumVal3": &graphql.EnumValueConfig{
			Value: 3,
		},
	},
})

// Input object
var ExmplRootMessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplRootMessageInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplRootMessageInput.Fields()["r_msg"] = &graphql.InputObjectField{PrivateName: "r_msg", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage_NestedMessageInput))}
	ExmplRootMessageInput.Fields()["r_scalar"] = &graphql.InputObjectField{PrivateName: "r_scalar", Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))}
	ExmplRootMessageInput.Fields()["r_enum"] = &graphql.InputObjectField{PrivateName: "r_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplRootEnum))}
	ExmplRootMessageInput.Fields()["r_empty_msg"] = &graphql.InputObjectField{PrivateName: "r_empty_msg", Type: graphql.NewList(graphql.NewNonNull(scalars.NoDataScalar))}
	ExmplRootMessageInput.Fields()["n_r_enum"] = &graphql.InputObjectField{PrivateName: "n_r_enum", Type: common.CommonEnum}
	ExmplRootMessageInput.Fields()["n_r_scalar"] = &graphql.InputObjectField{PrivateName: "n_r_scalar", Type: scalars.GraphQLInt32Scalar}
	ExmplRootMessageInput.Fields()["n_r_msg"] = &graphql.InputObjectField{PrivateName: "n_r_msg", Type: common.CommonMessageInput}
	ExmplRootMessageInput.Fields()["scalar_from_context"] = &graphql.InputObjectField{PrivateName: "scalar_from_context", Type: scalars.GraphQLInt32Scalar}
	ExmplRootMessageInput.Fields()["n_r_empty_msg"] = &graphql.InputObjectField{PrivateName: "n_r_empty_msg", Type: scalars.NoDataScalar}
	ExmplRootMessageInput.Fields()["map_enum"] = &graphql.InputObjectField{PrivateName: "map_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__MapEnum))}
	ExmplRootMessageInput.Fields()["map_scalar"] = &graphql.InputObjectField{PrivateName: "map_scalar", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__MapScalar))}
	ExmplRootMessageInput.Fields()["map_msg"] = &graphql.InputObjectField{PrivateName: "map_msg", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__MapMsg))}
	ExmplRootMessageInput.Fields()["ctx_map"] = &graphql.InputObjectField{PrivateName: "ctx_map", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__CtxMap))}
	ExmplRootMessageInput.Fields()["ctx_map_enum"] = &graphql.InputObjectField{PrivateName: "ctx_map_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__CtxMapEnum))}
	ExmplRootMessageInput.Fields()["e_f_o_e"] = &graphql.InputObjectField{PrivateName: "e_f_o_e", Type: common.CommonEnum}
	ExmplRootMessageInput.Fields()["e_f_o_s"] = &graphql.InputObjectField{PrivateName: "e_f_o_s", Type: scalars.GraphQLInt32Scalar}
	ExmplRootMessageInput.Fields()["e_f_o_m"] = &graphql.InputObjectField{PrivateName: "e_f_o_m", Type: common.CommonMessageInput}
	ExmplRootMessageInput.Fields()["e_f_o_em"] = &graphql.InputObjectField{PrivateName: "e_f_o_em", Type: scalars.NoDataScalar}
	ExmplRootMessageInput.Fields()["s_f_o_s"] = &graphql.InputObjectField{PrivateName: "s_f_o_s", Type: scalars.GraphQLInt32Scalar}
	ExmplRootMessageInput.Fields()["s_f_o_e"] = &graphql.InputObjectField{PrivateName: "s_f_o_e", Type: ExmplRootEnum}
	ExmplRootMessageInput.Fields()["s_f_o_mes"] = &graphql.InputObjectField{PrivateName: "s_f_o_mes", Type: ExmplRootMessage2Input}
	ExmplRootMessageInput.Fields()["s_f_o_m"] = &graphql.InputObjectField{PrivateName: "s_f_o_m", Type: scalars.NoDataScalar}
	ExmplRootMessageInput.Fields()["m_f_o_m"] = &graphql.InputObjectField{PrivateName: "m_f_o_m", Type: ExmplRootMessage2Input}
	ExmplRootMessageInput.Fields()["m_f_o_s"] = &graphql.InputObjectField{PrivateName: "m_f_o_s", Type: scalars.GraphQLInt32Scalar}
	ExmplRootMessageInput.Fields()["m_f_o_e"] = &graphql.InputObjectField{PrivateName: "m_f_o_e", Type: ExmplRootEnum}
	ExmplRootMessageInput.Fields()["m_f_o_em"] = &graphql.InputObjectField{PrivateName: "m_f_o_em", Type: scalars.NoDataScalar}
	ExmplRootMessageInput.Fields()["em_f_o_em"] = &graphql.InputObjectField{PrivateName: "em_f_o_em", Type: scalars.NoDataScalar}
	ExmplRootMessageInput.Fields()["em_f_o_s"] = &graphql.InputObjectField{PrivateName: "em_f_o_s", Type: scalars.GraphQLInt32Scalar}
	ExmplRootMessageInput.Fields()["em_f_o_en"] = &graphql.InputObjectField{PrivateName: "em_f_o_en", Type: ExmplRootEnum}
	ExmplRootMessageInput.Fields()["em_f_o_m"] = &graphql.InputObjectField{PrivateName: "em_f_o_m", Type: ExmplRootMessage2Input}
}

var ExmplRootMessage_NestedMessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplRootMessageNestedMessageInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplRootMessage_NestedMessageInput.Fields()["sub_r_enum"] = &graphql.InputObjectField{PrivateName: "sub_r_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageNestedEnum))}
	ExmplRootMessage_NestedMessageInput.Fields()["sub_sub_r_enum"] = &graphql.InputObjectField{PrivateName: "sub_sub_r_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageNestedMessageNestedNestedEnum))}
}

var ExmplMessageWithEmptyInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplMessageWithEmptyInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplMessageWithEmptyInput.Fields()["empt"] = &graphql.InputObjectField{PrivateName: "empt", Type: scalars.NoDataScalar}
}

var ExmplRootMessage2Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplRootMessage2Input",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplRootMessage2Input.Fields()["some_field"] = &graphql.InputObjectField{PrivateName: "some_field", Type: scalars.GraphQLInt32Scalar}
}

// Input objects resolvers
func ResolveExmplRootMessageInput(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage)
	if args["r_msg"] != nil {
		in := args["r_msg"].([]interface{})
		result.RMsg = make([]*testdata.RootMessage_NestedMessage, len(in))
		for i, val := range in {

			v, err := ResolveExmplRootMessageNestedMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), val)
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve input object field")
			}
			result.RMsg[i] = v
		}
	}
	if args["r_scalar"] != nil {
		in := args["r_scalar"].([]interface{})
		result.RScalar = make([]int32, len(in))
		for i, val := range in {
			result.RScalar[i] = val.(int32)
		}
	}
	if args["r_enum"] != nil {
		in := args["r_enum"].([]interface{})
		result.REnum = make([]testdata.RootEnum, len(in))
		for i, val := range in {
			result.REnum[i] = testdata.RootEnum(val.(int))
		}
	}
	if args["r_empty_msg"] != nil {
		in := args["r_empty_msg"].([]interface{})
		result.REmptyMsg = make([]*testdata.Empty, len(in))
		for i, val := range in {

			v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), val)
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve input object field")
			}
			result.REmptyMsg[i] = v
		}
	}
	if args["n_r_enum"] != nil {
		result.NREnum = common_1.CommonEnum(args["n_r_enum"].(int))
	}
	if args["n_r_scalar"] != nil {
		result.NRScalar = args["n_r_scalar"].(int32)
	}
	if args["n_r_msg"] != nil {
		v, err := common.ResolveCommonMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), args["n_r_msg"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.NRMsg = v
	}
	result.ScalarFromContext = ctx.Value("ctx_key").(int32)
	if args["n_r_empty_msg"] != nil {
		v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), args["n_r_empty_msg"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.NREmptyMsg = v
	}
	if args["map_enum"] != nil {
		v, err := ResolveExmplRootMessageInput__MapEnum(tr, opentracing_go.ContextWithSpan(ctx, span), args["map_enum"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.MapEnum = v
	}
	if args["map_scalar"] != nil {
		v, err := ResolveExmplRootMessageInput__MapScalar(tr, opentracing_go.ContextWithSpan(ctx, span), args["map_scalar"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.MapScalar = v
	}
	if args["map_msg"] != nil {
		v, err := ResolveExmplRootMessageInput__MapMsg(tr, opentracing_go.ContextWithSpan(ctx, span), args["map_msg"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.MapMsg = v
	}
	result.CtxMap = ctx.Value("ctx_map").(map[string]*testdata.RootMessage_NestedMessage)
	result.CtxMapEnum = ctx.Value("ctx_map_enum").(map[string]testdata.RootMessage_NestedEnum)
	if e_f_o_e_, ok := args["e_f_o_e"]; ok && e_f_o_e_ != nil {
		v := common_1.CommonEnum(e_f_o_e_.(int))
		result.EnumFirstOneoff = &testdata.RootMessage_EFOE{v}
	} else if e_f_o_s_, ok := args["e_f_o_s"]; ok && e_f_o_s_ != nil {
		v := e_f_o_s_.(int32)
		result.EnumFirstOneoff = &testdata.RootMessage_EFOS{v}
	} else if e_f_o_m_, ok := args["e_f_o_m"]; ok && e_f_o_m_ != nil {
		v, err := common.ResolveCommonMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), e_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field e_f_o_m")
		}
		result.EnumFirstOneoff = &testdata.RootMessage_EFOM{v}
	} else if e_f_o_em_, ok := args["e_f_o_em"]; ok && e_f_o_em_ != nil {
		v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), e_f_o_em_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field e_f_o_em")
		}
		result.EnumFirstOneoff = &testdata.RootMessage_EFOEm{v}
	}
	if s_f_o_s_, ok := args["s_f_o_s"]; ok && s_f_o_s_ != nil {
		v := s_f_o_s_.(int32)
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOS{v}
	} else if s_f_o_e_, ok := args["s_f_o_e"]; ok && s_f_o_e_ != nil {
		v := testdata.RootEnum(s_f_o_e_.(int))
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOE{v}
	} else if s_f_o_mes_, ok := args["s_f_o_mes"]; ok && s_f_o_mes_ != nil {
		v, err := ResolveExmplRootMessage2Input(tr, opentracing_go.ContextWithSpan(ctx, span), s_f_o_mes_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field s_f_o_mes")
		}
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOMes{v}
	} else if s_f_o_m_, ok := args["s_f_o_m"]; ok && s_f_o_m_ != nil {
		v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), s_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field s_f_o_m")
		}
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOM{v}
	}
	if m_f_o_m_, ok := args["m_f_o_m"]; ok && m_f_o_m_ != nil {
		v, err := ResolveExmplRootMessage2Input(tr, opentracing_go.ContextWithSpan(ctx, span), m_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field m_f_o_m")
		}
		result.MessageFirstOneoff = &testdata.RootMessage_MFOM{v}
	} else if m_f_o_s_, ok := args["m_f_o_s"]; ok && m_f_o_s_ != nil {
		v := m_f_o_s_.(int32)
		result.MessageFirstOneoff = &testdata.RootMessage_MFOS{v}
	} else if m_f_o_e_, ok := args["m_f_o_e"]; ok && m_f_o_e_ != nil {
		v := testdata.RootEnum(m_f_o_e_.(int))
		result.MessageFirstOneoff = &testdata.RootMessage_MFOE{v}
	} else if m_f_o_em_, ok := args["m_f_o_em"]; ok && m_f_o_em_ != nil {
		v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), m_f_o_em_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field m_f_o_em")
		}
		result.MessageFirstOneoff = &testdata.RootMessage_MFOEm{v}
	}
	if em_f_o_em_, ok := args["em_f_o_em"]; ok && em_f_o_em_ != nil {
		v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), em_f_o_em_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field em_f_o_em")
		}
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOEm{v}
	} else if em_f_o_s_, ok := args["em_f_o_s"]; ok && em_f_o_s_ != nil {
		v := em_f_o_s_.(int32)
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOS{v}
	} else if em_f_o_en_, ok := args["em_f_o_en"]; ok && em_f_o_en_ != nil {
		v := testdata.RootEnum(em_f_o_en_.(int))
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOEn{v}
	} else if em_f_o_m_, ok := args["em_f_o_m"]; ok && em_f_o_m_ != nil {
		v, err := ResolveExmplRootMessage2Input(tr, opentracing_go.ContextWithSpan(ctx, span), em_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field em_f_o_m")
		}
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOM{v}
	}

	return result, nil
}
func ResolveExmplRootMessageNestedMessageInput(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageNestedMessageInput")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage_NestedMessage)
	if args["sub_r_enum"] != nil {
		in := args["sub_r_enum"].([]interface{})
		result.SubREnum = make([]testdata.RootMessage_NestedEnum, len(in))
		for i, val := range in {
			result.SubREnum[i] = testdata.RootMessage_NestedEnum(val.(int))
		}
	}
	if args["sub_sub_r_enum"] != nil {
		in := args["sub_sub_r_enum"].([]interface{})
		result.SubSubREnum = make([]testdata.RootMessage_NestedMessage_NestedNestedEnum, len(in))
		for i, val := range in {
			result.SubSubREnum[i] = testdata.RootMessage_NestedMessage_NestedNestedEnum(val.(int))
		}
	}

	return result, nil
}
func ResolveExmplEmptyInput(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.Empty, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplEmptyInput")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.Empty)

	return result, nil
}
func ResolveExmplMessageWithEmptyInput(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.MessageWithEmpty, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplMessageWithEmptyInput")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.MessageWithEmpty)
	if args["empt"] != nil {
		v, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), args["empt"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.Empt = v
	}

	return result, nil
}
func ResolveExmplRootMessage2Input(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage2, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessage2Input")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage2)
	if args["some_field"] != nil {
		result.SomeField = args["some_field"].(int32)
	}

	return result, nil
}

// Output objects
var ExmplRootMessage = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage.AddFieldConfig("r_msg", &graphql.Field{
		Name: "r_msg",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage_NestedMessage)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.RMsg, nil
			case testdata.RootMessage:
				return src.RMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("r_scalar", &graphql.Field{
		Name: "r_scalar",
		Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.RScalar, nil
			case testdata.RootMessage:
				return src.RScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("r_enum", &graphql.Field{
		Name: "r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return func(arg []testdata.RootEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(s.GetREnum()), nil
			case testdata.RootMessage:
				return func(arg []testdata.RootEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(src.GetREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("r_empty_msg", &graphql.Field{
		Name: "r_empty_msg",
		Type: graphql.NewList(graphql.NewNonNull(scalars.NoDataScalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.REmptyMsg, nil
			case testdata.RootMessage:
				return src.REmptyMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_enum", &graphql.Field{
		Name: "n_r_enum",
		Type: common.CommonEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return int(s.GetNREnum()), nil
			case testdata.RootMessage:
				return int(src.GetNREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_scalar", &graphql.Field{
		Name: "n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NRScalar, nil
			case testdata.RootMessage:
				return src.NRScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_msg", &graphql.Field{
		Name: "n_r_msg",
		Type: common.CommonMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NRMsg, nil
			case testdata.RootMessage:
				return src.NRMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("scalar_from_context", &graphql.Field{
		Name: "scalar_from_context",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.ScalarFromContext, nil
			case testdata.RootMessage:
				return src.ScalarFromContext, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_empty_msg", &graphql.Field{
		Name: "n_r_empty_msg",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NREmptyMsg, nil
			case testdata.RootMessage:
				return src.NREmptyMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("e_f_o_e", &graphql.Field{
		Name: "e_f_o_e",
		Type: common.CommonEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEFOE(), nil
			case testdata.RootMessage:
				return src.GetEFOE(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("e_f_o_s", &graphql.Field{
		Name: "e_f_o_s",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEFOS(), nil
			case testdata.RootMessage:
				return src.GetEFOS(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("e_f_o_m", &graphql.Field{
		Name: "e_f_o_m",
		Type: common.CommonMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEFOM(), nil
			case testdata.RootMessage:
				return src.GetEFOM(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("e_f_o_em", &graphql.Field{
		Name: "e_f_o_em",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEFOEm(), nil
			case testdata.RootMessage:
				return src.GetEFOEm(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("s_f_o_s", &graphql.Field{
		Name: "s_f_o_s",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSFOS(), nil
			case testdata.RootMessage:
				return src.GetSFOS(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("s_f_o_e", &graphql.Field{
		Name: "s_f_o_e",
		Type: ExmplRootEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSFOE(), nil
			case testdata.RootMessage:
				return src.GetSFOE(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("s_f_o_mes", &graphql.Field{
		Name: "s_f_o_mes",
		Type: ExmplRootMessage2,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSFOMes(), nil
			case testdata.RootMessage:
				return src.GetSFOMes(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("s_f_o_m", &graphql.Field{
		Name: "s_f_o_m",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSFOM(), nil
			case testdata.RootMessage:
				return src.GetSFOM(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("m_f_o_m", &graphql.Field{
		Name: "m_f_o_m",
		Type: ExmplRootMessage2,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMFOM(), nil
			case testdata.RootMessage:
				return src.GetMFOM(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("m_f_o_s", &graphql.Field{
		Name: "m_f_o_s",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMFOS(), nil
			case testdata.RootMessage:
				return src.GetMFOS(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("m_f_o_e", &graphql.Field{
		Name: "m_f_o_e",
		Type: ExmplRootEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMFOE(), nil
			case testdata.RootMessage:
				return src.GetMFOE(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("m_f_o_em", &graphql.Field{
		Name: "m_f_o_em",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMFOEm(), nil
			case testdata.RootMessage:
				return src.GetMFOEm(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("em_f_o_em", &graphql.Field{
		Name: "em_f_o_em",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEmFOEm(), nil
			case testdata.RootMessage:
				return src.GetEmFOEm(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("em_f_o_s", &graphql.Field{
		Name: "em_f_o_s",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEmFOS(), nil
			case testdata.RootMessage:
				return src.GetEmFOS(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("em_f_o_en", &graphql.Field{
		Name: "em_f_o_en",
		Type: ExmplRootEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEmFOEn(), nil
			case testdata.RootMessage:
				return src.GetEmFOEn(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("em_f_o_m", &graphql.Field{
		Name: "em_f_o_m",
		Type: ExmplRootMessage2,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetEmFOM(), nil
			case testdata.RootMessage:
				return src.GetEmFOM(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("map_enum", &graphql.Field{
		Name: "map_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage__map_enum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case testdata.RootMessage:
				var res []map[string]interface{}
				for key, value := range src.MapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("map_scalar", &graphql.Field{
		Name: "map_scalar",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage__map_scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapScalar {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case testdata.RootMessage:
				var res []map[string]interface{}
				for key, value := range src.MapScalar {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("map_msg", &graphql.Field{
		Name: "map_msg",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage__map_msg)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapMsg {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case testdata.RootMessage:
				var res []map[string]interface{}
				for key, value := range src.MapMsg {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("ctx_map_enum", &graphql.Field{
		Name: "ctx_map_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage__ctx_map_enum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.CtxMapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case testdata.RootMessage:
				var res []map[string]interface{}
				for key, value := range src.CtxMapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplRootMessage_NestedMessage = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessageNestedMessage",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage_NestedMessage.AddFieldConfig("sub_r_enum", &graphql.Field{
		Name: "sub_r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageNestedEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage_NestedMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return func(arg []testdata.RootMessage_NestedEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(s.GetSubREnum()), nil
			case testdata.RootMessage_NestedMessage:
				return func(arg []testdata.RootMessage_NestedEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(src.GetSubREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage_NestedMessage.AddFieldConfig("sub_sub_r_enum", &graphql.Field{
		Name: "sub_sub_r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageNestedMessageNestedNestedEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage_NestedMessage:
				if src == nil {
					return nil, nil
				}
				s := *src
				return func(arg []testdata.RootMessage_NestedMessage_NestedNestedEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(s.GetSubSubREnum()), nil
			case testdata.RootMessage_NestedMessage:
				return func(arg []testdata.RootMessage_NestedMessage_NestedNestedEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(src.GetSubSubREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplMessageWithEmpty = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplMessageWithEmpty",
	Fields: graphql.Fields{},
})

func init() {
	ExmplMessageWithEmpty.AddFieldConfig("empt", &graphql.Field{
		Name: "empt",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.MessageWithEmpty:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.Empt, nil
			case testdata.MessageWithEmpty:
				return src.Empt, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplRootMessage2 = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage2",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage2.AddFieldConfig("some_field", &graphql.Field{
		Name: "some_field",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage2:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.SomeField, nil
			case testdata.RootMessage2:
				return src.SomeField, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

// Maps input objects
var ExmplRootMessageInput__MapEnum = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__MapEnum",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplRootMessageNestedEnum},
		}
	}),
})
var ExmplRootMessageInput__MapScalar = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__MapScalar",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})
var ExmplRootMessageInput__MapMsg = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__MapMsg",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: graphql.String},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplRootMessage_NestedMessageInput},
		}
	}),
})
var ExmplRootMessageInput__CtxMap = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__CtxMap",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: graphql.String},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplRootMessage_NestedMessageInput},
		}
	}),
})
var ExmplRootMessageInput__CtxMapEnum = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__CtxMapEnum",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: graphql.String},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplRootMessageNestedEnum},
		}
	}),
})

// Maps input objects resolvers
func ResolveExmplRootMessageInput__MapEnum(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[int32]testdata.RootMessage_NestedEnum, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__MapEnum")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]testdata.RootMessage_NestedEnum)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := testdata.RootMessage_NestedEnum(v.(int))
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__MapScalar(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__MapScalar")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]int32)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := v.(int32)
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__MapMsg(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[string]*testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__MapMsg")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[string]*testdata.RootMessage_NestedMessage)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(string)
		vv, err := ResolveExmplRootMessageNestedMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), v)
		if err != nil {
			return nil, errors.Wrapf(err, "failed to resolve #%d map element value", i)
		}
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__CtxMap(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[string]*testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__CtxMap")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[string]*testdata.RootMessage_NestedMessage)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(string)
		vv, err := ResolveExmplRootMessageNestedMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), v)
		if err != nil {
			return nil, errors.Wrapf(err, "failed to resolve #%d map element value", i)
		}
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__CtxMapEnum(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[string]testdata.RootMessage_NestedEnum, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__CtxMapEnum")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[string]testdata.RootMessage_NestedEnum)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(string)
		vv := testdata.RootMessage_NestedEnum(v.(int))
		result[kk] = vv
	}
	return result, nil
}

// Maps output objects
var ExmplRootMessage__map_enum = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_enum",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_enum.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_enum.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplRootMessageNestedEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__map_scalar = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_scalar",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_scalar.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_scalar.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__map_msg = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_msg",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_msg.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: graphql.String,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_msg.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplRootMessage_NestedMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__ctx_map = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__ctx_map",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__ctx_map.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: graphql.String,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__ctx_map.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplRootMessage_NestedMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__ctx_map_enum = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__ctx_map_enum",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__ctx_map_enum.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: graphql.String,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__ctx_map_enum.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplRootMessageNestedEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

// Services
func GetServiceExampleServiceMethods(c testdata.ServiceExampleClient, ih *interceptors.InterceptorHandler, tr tracer.Tracer) graphql.Fields {
	return graphql.Fields{
		"getQueryMethod": &graphql.Field{
			Name: "getQueryMethod",
			Type: ExmplRootMessage,
			Args: graphql.FieldConfigArgument{
				"r_msg":               &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessage_NestedMessageInput))},
				"r_scalar":            &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))},
				"r_enum":              &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootEnum))},
				"r_empty_msg":         &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.NoDataScalar))},
				"n_r_enum":            &graphql.ArgumentConfig{Type: common.CommonEnum},
				"n_r_scalar":          &graphql.ArgumentConfig{Type: scalars.GraphQLInt32Scalar},
				"n_r_msg":             &graphql.ArgumentConfig{Type: common.CommonMessageInput},
				"scalar_from_context": &graphql.ArgumentConfig{Type: scalars.GraphQLInt32Scalar},
				"n_r_empty_msg":       &graphql.ArgumentConfig{Type: scalars.NoDataScalar},
				"map_enum":            &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__MapEnum))},
				"map_scalar":          &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__MapScalar))},
				"map_msg":             &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__MapMsg))},
				"ctx_map":             &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__CtxMap))},
				"ctx_map_enum":        &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__CtxMapEnum))},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				span := tr.CreateChildSpanFromContext(p.Context, "ServiceExample.getQueryMethod Resolver")
				defer span.Finish()
				p.Context = opentracing_go.ContextWithSpan(ctx, span)
				defer func() {
					if rerr != nil {
						span.SetTag("error", true).LogFields(log.Error(rerr))
					}
				}()
				if ih == nil {
					req, err := ResolveExmplRootMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetQueryMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getQueryMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplRootMessageInput(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.RootMessage)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.RootMessage", req))
					}
					res, err := c.GetQueryMethod(ctx, r)
					if err != nil {
						return nil, err
					}
					if len(res.GetCtxMap()) > 0 {
						ictx.PayloadError = res.GetCtxMap()
					}
					return res, err
				})
			},
		},
	}
}
func GetServiceExampleMutationsServiceMethods(c testdata.ServiceExampleClient, ih *interceptors.InterceptorHandler, tr tracer.Tracer) graphql.Fields {
	return graphql.Fields{
		"mutationMethod": &graphql.Field{
			Name: "mutationMethod",
			Type: ExmplRootMessage_NestedMessage,
			Args: graphql.FieldConfigArgument{
				"some_field": &graphql.ArgumentConfig{Type: scalars.GraphQLInt32Scalar},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				span := tr.CreateChildSpanFromContext(p.Context, "ServiceExampleMutations.mutationMethod Resolver")
				defer span.Finish()
				p.Context = opentracing_go.ContextWithSpan(ctx, span)
				defer func() {
					if rerr != nil {
						span.SetTag("error", true).LogFields(log.Error(rerr))
					}
				}()
				if ih == nil {
					req, err := ResolveExmplRootMessage2Input(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.MutationMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExampleMutations",
					Method:  "mutationMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplRootMessage2Input(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.RootMessage2)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.RootMessage2", req))
					}
					return c.MutationMethod(ctx, r)
				})
			},
		},
		"EmptyMsgs": &graphql.Field{
			Name: "EmptyMsgs",
			Type: scalars.NoDataScalar,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				span := tr.CreateChildSpanFromContext(p.Context, "ServiceExampleMutations.EmptyMsgs Resolver")
				defer span.Finish()
				p.Context = opentracing_go.ContextWithSpan(ctx, span)
				defer func() {
					if rerr != nil {
						span.SetTag("error", true).LogFields(log.Error(rerr))
					}
				}()
				if ih == nil {
					req, err := ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.EmptyMsgs(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExampleMutations",
					Method:  "EmptyMsgs",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.Empty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.Empty", req))
					}
					return c.EmptyMsgs(ctx, r)
				})
			},
		},
		"MsgsWithEpmty": &graphql.Field{
			Name: "MsgsWithEpmty",
			Type: ExmplMessageWithEmpty,
			Args: graphql.FieldConfigArgument{
				"empt": &graphql.ArgumentConfig{Type: scalars.NoDataScalar},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				span := tr.CreateChildSpanFromContext(p.Context, "ServiceExampleMutations.MsgsWithEpmty Resolver")
				defer span.Finish()
				p.Context = opentracing_go.ContextWithSpan(ctx, span)
				defer func() {
					if rerr != nil {
						span.SetTag("error", true).LogFields(log.Error(rerr))
					}
				}()
				if ih == nil {
					req, err := ResolveExmplMessageWithEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.MsgsWithEpmty(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExampleMutations",
					Method:  "MsgsWithEpmty",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplMessageWithEmptyInput(tr, opentracing_go.ContextWithSpan(ctx, span), p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.MessageWithEmpty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.MessageWithEmpty", req))
					}
					return c.MsgsWithEpmty(ctx, r)
				})
			},
		},
	}
}
