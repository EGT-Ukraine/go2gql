// This file was generated by github.com/EGT-Ukraine/go2gql. DO NOT EDIT IT
package test_schema

import (
	interceptors "github.com/EGT-Ukraine/go2gql/api/interceptors"
	tracer "github.com/EGT-Ukraine/go2gql/api/tracer"
	testdata "github.com/EGT-Ukraine/go2gql/testdata"
	test "github.com/EGT-Ukraine/go2gql/testdata/out/test"
	errors "github.com/pkg/errors"
	graphql "github.com/saturn4er/graphql"
)

type SomeSchemaSchemaClients struct {
	ServiceExampleClient testdata.ServiceExampleClient
}

func GetSomeSchemaSchema(cls SomeSchemaSchemaClients, ih *interceptors.InterceptorHandler, tr tracer.Tracer) (graphql.Schema, error) {
	if cls.ServiceExampleClient == nil {
		return graphql.Schema{}, errors.Errorf("Service client ServiceExample can't be nil nil")
	}
	var ServiceExampleQueryFields = test.GetServiceExampleServiceQueryMethods(cls.ServiceExampleClient, ih, tr)
	var _ = ServiceExampleQueryFields
	var ServiceExampleMutationFields = test.GetServiceExampleServiceMutationMethods(cls.ServiceExampleClient, ih, tr)
	var _ = ServiceExampleMutationFields
	var Query = graphql.NewObject(graphql.ObjectConfig{
		Name: "Query",
		Fields: graphql.Fields{
			"getQueryMethod": ServiceExampleQueryFields["getQueryMethod"],
		},
	})
	var ServiceExampleMutations = graphql.NewObject(graphql.ObjectConfig{
		Name: "ServiceExampleMutations",
		Fields: graphql.Fields{
			"mutationMethod": ServiceExampleMutationFields["mutationMethod"],
			"EmptyMsgs":      ServiceExampleMutationFields["EmptyMsgs"],
			"MsgsWithEpmty":  ServiceExampleMutationFields["MsgsWithEpmty"],
		},
	})
	var NestedExampleMutation = graphql.NewObject(graphql.ObjectConfig{
		Name: "NestedExampleMutation",
		Fields: graphql.Fields{
			"ExampleService": &graphql.Field{
				Name: "ExampleService",
				Type: ServiceExampleMutations,
				Resolve: func(p graphql.ResolveParams) (interface{}, error) {
					return struct{}{}, nil
				},
			},
		},
	})
	var Mutation = graphql.NewObject(graphql.ObjectConfig{
		Name: "Mutation",
		Fields: graphql.Fields{
			"nested_example_mutation": &graphql.Field{
				Name: "nested_example_mutation",
				Type: NestedExampleMutation,
				Resolve: func(p graphql.ResolveParams) (interface{}, error) {
					return struct{}{}, nil
				},
			},
		},
	})
	return graphql.NewSchema(graphql.SchemaConfig{
		Query:    Query,
		Mutation: Mutation,
	})
}
