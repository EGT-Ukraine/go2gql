// This file was generated by github.com/EGT-Ukraine/go2gql. DO NOT EDIT IT
package schema

import (
	interceptors "github.com/EGT-Ukraine/go2gql/api/interceptors"
	example "github.com/EGT-Ukraine/go2gql/example/out/example"
	proto "github.com/EGT-Ukraine/go2gql/example/proto"
	graphql "github.com/graphql-go/graphql"
	errors "github.com/pkg/errors"
)

type ExampleSchemaSchemaClients struct {
	ServiceExampleClient proto.ServiceExampleClient
}

func (c ExampleSchemaSchemaClients) GetServiceExampleClient() proto.ServiceExampleClient {
	return c.ServiceExampleClient
}
func GetExampleSchemaSchema(cls ExampleSchemaSchemaClients, ih *interceptors.InterceptorHandler) (graphql.Schema, error) {
	if cls.ServiceExampleClient == nil {
		return graphql.Schema{}, errors.Errorf("Service client ServiceExample can't be nil nil")
	}
	var ServiceExampleQueryFields = example.GetServiceExampleServiceQueryMethods(cls.ServiceExampleClient, ih)
	var _ = ServiceExampleQueryFields
	var ServiceExampleMutationFields = example.GetServiceExampleServiceMutationMethods(cls.ServiceExampleClient, ih)
	var _ = ServiceExampleMutationFields
	var Example = graphql.NewObject(graphql.ObjectConfig{
		Name:        "Example",
		Description: "example result type",
		Fields: graphql.Fields{
			"getQueryMethod": ServiceExampleQueryFields["getQueryMethod"],
			"queryMethod":    ServiceExampleQueryFields["queryMethod"],
			"getEmptiesMsg":  ServiceExampleQueryFields["getEmptiesMsg"],
		},
	})
	var Query = graphql.NewObject(graphql.ObjectConfig{
		Name: "Query",
		Fields: graphql.Fields{
			"example": &graphql.Field{
				Name:        "example",
				Type:        Example,
				Description: "Service, which do smth",
				Resolve: func(p graphql.ResolveParams) (interface{}, error) {
					return struct{}{}, nil
				},
			},
		},
	})
	var ExampleMutation = graphql.NewObject(graphql.ObjectConfig{
		Name:        "ExampleMutation",
		Description: "example result type",
		Fields: graphql.Fields{
			"mutationMethod":     ServiceExampleMutationFields["mutationMethod"],
			"getMutatuionMethod": ServiceExampleMutationFields["getMutatuionMethod"],
			"ListSomeEntities":   ServiceExampleMutationFields["ListSomeEntities"],
		},
	})
	var Mutation = graphql.NewObject(graphql.ObjectConfig{
		Name: "Mutation",
		Fields: graphql.Fields{
			"example": &graphql.Field{
				Name:        "example",
				Type:        ExampleMutation,
				Description: "Service, which do smth",
				Resolve: func(p graphql.ResolveParams) (interface{}, error) {
					return struct{}{}, nil
				},
			},
		},
	})
	return graphql.NewSchema(graphql.SchemaConfig{
		Query:    Query,
		Mutation: Mutation,
	})
}
