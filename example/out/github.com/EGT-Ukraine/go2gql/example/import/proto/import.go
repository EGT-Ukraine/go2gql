// This file was generated by github.com/EGT-Ukraine/go2gql. DO NOT EDIT IT
package proto

import (
	context "context"
	fmt "fmt"

	interceptors "github.com/EGT-Ukraine/go2gql/api/interceptors"
	scalars "github.com/EGT-Ukraine/go2gql/api/scalars"
	proto "github.com/EGT-Ukraine/go2gql/example/import/proto"
	graphql "github.com/graphql-go/graphql"
	errors "github.com/pkg/errors"
)

// Enums
// Input object
var NameInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "NameInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	NameInput.Fields()["name"] = &graphql.InputObjectField{PrivateName: "name", Type: graphql.String}
}

// Input objects resolvers
func ResolveNameInput(ctx context.Context, i interface{}) (_ *proto.Name, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.Name)
	if args["name"] != nil {
		result.Name = args["name"].(string)
	}

	return result, nil
}
func ResolveEmptyInput(ctx context.Context, i interface{}) (_ *proto.Empty, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.Empty)

	return result, nil
}

// Output objects
var Name = graphql.NewObject(graphql.ObjectConfig{
	Name:   "Name",
	Fields: graphql.Fields{},
})

func init() {
	Name.AddFieldConfig("name", &graphql.Field{
		Name: "name",
		Type: graphql.String,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.Name:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.Name, nil
			case proto.Name:
				return src.Name, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

// Maps input objects
// Maps input objects resolvers
// Maps output objects
func GetServiceImportServiceQueryMethods(c proto.ServiceImportClient, ih *interceptors.InterceptorHandler) graphql.Fields {
	return graphql.Fields{
		"getQueryImportMethod": &graphql.Field{
			Name: "getQueryImportMethod",
			Type: scalars.NoDataScalar,
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{Type: graphql.String},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := ResolveNameInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetQueryImportMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceImport",
					Method:  "getQueryImportMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveNameInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*proto.Name)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *proto.Name", req))
					}
					ctx = ictx.Params.Context
					return c.GetQueryImportMethod(ctx, r)
				})
			},
		},
	}
}
func GetServiceImportServiceMutationMethods(c proto.ServiceImportClient, ih *interceptors.InterceptorHandler) graphql.Fields {
	return graphql.Fields{
		"mutationImportMethod": &graphql.Field{
			Name: "mutationImportMethod",
			Type: scalars.NoDataScalar,
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{Type: graphql.String},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := ResolveNameInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.MutationImportMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceImport",
					Method:  "mutationImportMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveNameInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*proto.Name)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *proto.Name", req))
					}
					ctx = ictx.Params.Context
					return c.MutationImportMethod(ctx, r)
				})
			},
		},
	}
}
