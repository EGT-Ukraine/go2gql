// This file was generated by github.com/EGT-Ukraine/go2gql. DO NOT EDIT IT
package example

import (
	context "context"
	fmt "fmt"

	interceptors "github.com/EGT-Ukraine/go2gql/api/interceptors"
	scalars "github.com/EGT-Ukraine/go2gql/api/scalars"
	well_known "github.com/EGT-Ukraine/go2gql/example/out/well_known"
	proto "github.com/EGT-Ukraine/go2gql/example/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	errors "github.com/pkg/errors"
	graphql "github.com/saturn4er/graphql"
)

// Enums
var ExmplSomeEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplSomeEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"Val1": &graphql.EnumValueConfig{
			Value: 0,
		},
		"Val2": &graphql.EnumValueConfig{
			Value: 1,
		},
	},
})
var ExmplAsomeEnum3 = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplAsomeEnum3",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"Val5": &graphql.EnumValueConfig{
			Value: 0,
		},
		"Val6": &graphql.EnumValueConfig{
			Value: 1,
		},
	},
})

// Input object
var ExmplAInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplAInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplAInput.Fields()["r_msg"] = &graphql.InputObjectField{PrivateName: "r_msg", Type: graphql.NewList(graphql.NewNonNull(well_known.TimestampInput))}
	ExmplAInput.Fields()["r_scalar"] = &graphql.InputObjectField{PrivateName: "r_scalar", Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))}
	ExmplAInput.Fields()["r_enum"] = &graphql.InputObjectField{PrivateName: "r_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum))}
	ExmplAInput.Fields()["n_r_enum"] = &graphql.InputObjectField{PrivateName: "n_r_enum", Type: ExmplAsomeEnum3}
	ExmplAInput.Fields()["n_r_scalar"] = &graphql.InputObjectField{PrivateName: "n_r_scalar", Type: scalars.GraphQLInt32Scalar}
	ExmplAInput.Fields()["n_r_msg"] = &graphql.InputObjectField{PrivateName: "n_r_msg", Type: well_known.TimestampInput}
	ExmplAInput.Fields()["scalar_from_context"] = &graphql.InputObjectField{PrivateName: "scalar_from_context", Type: scalars.GraphQLInt32Scalar}
	ExmplAInput.Fields()["enum_from_context"] = &graphql.InputObjectField{PrivateName: "enum_from_context", Type: ExmplSomeEnum}
	ExmplAInput.Fields()["message_from_context"] = &graphql.InputObjectField{PrivateName: "message_from_context", Type: well_known.TimestampInput}
	ExmplAInput.Fields()["test"] = &graphql.InputObjectField{PrivateName: "test", Type: scalars.GraphQLBytesScalar}
	ExmplAInput.Fields()["map_enum"] = &graphql.InputObjectField{PrivateName: "map_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplAInput__MapEnum))}
	ExmplAInput.Fields()["map_scalar"] = &graphql.InputObjectField{PrivateName: "map_scalar", Type: graphql.NewList(graphql.NewNonNull(ExmplAInput__MapScalar))}
	ExmplAInput.Fields()["map_msg"] = &graphql.InputObjectField{PrivateName: "map_msg", Type: graphql.NewList(graphql.NewNonNull(ExmplAInput__MapMsg))}
}

var ExmplAOneOffsInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplAOneOffsInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplAOneOffsInput.Fields()["e_n_r_enum"] = &graphql.InputObjectField{PrivateName: "e_n_r_enum", Type: ExmplSomeEnum}
	ExmplAOneOffsInput.Fields()["e_n_r_scalar"] = &graphql.InputObjectField{PrivateName: "e_n_r_scalar", Type: scalars.GraphQLInt32Scalar}
	ExmplAOneOffsInput.Fields()["e_n_r_msg"] = &graphql.InputObjectField{PrivateName: "e_n_r_msg", Type: well_known.TimestampInput}
	ExmplAOneOffsInput.Fields()["s_n_r_scalar"] = &graphql.InputObjectField{PrivateName: "s_n_r_scalar", Type: scalars.GraphQLInt32Scalar}
	ExmplAOneOffsInput.Fields()["s_n_r_enum"] = &graphql.InputObjectField{PrivateName: "s_n_r_enum", Type: ExmplSomeEnum}
	ExmplAOneOffsInput.Fields()["s_n_r_msg"] = &graphql.InputObjectField{PrivateName: "s_n_r_msg", Type: well_known.TimestampInput}
	ExmplAOneOffsInput.Fields()["m_n_r_msg"] = &graphql.InputObjectField{PrivateName: "m_n_r_msg", Type: well_known.TimestampInput}
	ExmplAOneOffsInput.Fields()["m_n_r_scalar"] = &graphql.InputObjectField{PrivateName: "m_n_r_scalar", Type: scalars.GraphQLInt32Scalar}
	ExmplAOneOffsInput.Fields()["m_n_r_enum"] = &graphql.InputObjectField{PrivateName: "m_n_r_enum", Type: ExmplSomeEnum}
}

var ExmplMsgWithEmptyInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplMsgWithEmptyInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplMsgWithEmptyInput.Fields()["empty_field"] = &graphql.InputObjectField{PrivateName: "empty_field", Type: scalars.NoDataScalar}
}

var ExmplBInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name:   "ExmplBInput",
	Fields: graphql.InputObjectConfigFieldMap{},
})

func init() {
	ExmplBInput.Fields()["r_msg"] = &graphql.InputObjectField{PrivateName: "r_msg", Type: graphql.NewList(graphql.NewNonNull(well_known.TimestampInput))}
	ExmplBInput.Fields()["r_scalar"] = &graphql.InputObjectField{PrivateName: "r_scalar", Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))}
	ExmplBInput.Fields()["r_enum"] = &graphql.InputObjectField{PrivateName: "r_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum))}
	ExmplBInput.Fields()["n_r_enum"] = &graphql.InputObjectField{PrivateName: "n_r_enum", Type: ExmplSomeEnum}
	ExmplBInput.Fields()["n_r_scalar"] = &graphql.InputObjectField{PrivateName: "n_r_scalar", Type: scalars.GraphQLInt32Scalar}
	ExmplBInput.Fields()["n_r_msg"] = &graphql.InputObjectField{PrivateName: "n_r_msg", Type: well_known.TimestampInput}
	ExmplBInput.Fields()["map_enum"] = &graphql.InputObjectField{PrivateName: "map_enum", Type: graphql.NewList(graphql.NewNonNull(ExmplBInput__MapEnum))}
	ExmplBInput.Fields()["map_scalar"] = &graphql.InputObjectField{PrivateName: "map_scalar", Type: graphql.NewList(graphql.NewNonNull(ExmplBInput__MapScalar))}
	ExmplBInput.Fields()["map_msg"] = &graphql.InputObjectField{PrivateName: "map_msg", Type: graphql.NewList(graphql.NewNonNull(ExmplBInput__MapMsg))}
}

// Input objects resolvers
func ResolveExmplAInput(ctx context.Context, i interface{}) (_ *proto.A, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.A)
	if args["r_msg"] != nil {
		in := args["r_msg"].([]interface{})
		result.RMsg = make([]*timestamp.Timestamp, len(in))
		for i, val := range in {

			{
				v, err := well_known.ResolveTimestampInput(ctx, val)
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
				}
				result.RMsg[i] = v
			}
		}
	}
	if args["r_scalar"] != nil {
		in := args["r_scalar"].([]interface{})
		result.RScalar = make([]int32, len(in))
		for i, val := range in {
			result.RScalar[i] = val.(int32)
		}
	}
	if args["r_enum"] != nil {
		in := args["r_enum"].([]interface{})
		result.REnum = make([]proto.SomeEnum, len(in))
		for i, val := range in {
			result.REnum[i] = proto.SomeEnum(val.(int))
		}
	}
	if args["n_r_enum"] != nil {
		result.NREnum = proto.ASomeEnum3(args["n_r_enum"].(int))
	}
	if args["n_r_scalar"] != nil {
		result.NRScalar = args["n_r_scalar"].(int32)
	}
	if args["n_r_msg"] != nil {
		{
			v, err := well_known.ResolveTimestampInput(ctx, args["n_r_msg"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
			}
			result.NRMsg = v
		}
	}
	if args["scalar_from_context"] != nil {
		result.ScalarFromContext = args["scalar_from_context"].(int32)
	}
	if args["enum_from_context"] != nil {
		result.EnumFromContext = proto.SomeEnum(args["enum_from_context"].(int))
	}
	if args["message_from_context"] != nil {
		{
			v, err := well_known.ResolveTimestampInput(ctx, args["message_from_context"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
			}
			result.MessageFromContext = v
		}
	}
	{
		v, err := func() (val *proto.AOneOffs, err error) {
			contextValue := ctx.Value("a_msg_with_oneoffs")

			if contextValue == nil {
				err = errors.New("Can't find key 'a_msg_with_oneoffs' in context")
				return
			}

			val, ok := contextValue.(*proto.AOneOffs)

			if !ok {
				err = errors.New("Incompatible 'a_msg_with_oneoffs' key type in context. Expected *proto.AOneOffs")
				return
			}

			return
		}()
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
		}
		result.MessageWithOneoffs = v
	}
	if args["test"] != nil {
		result.Test = args["test"].([]byte)
	}
	if args["map_enum"] != nil {
		{
			v, err := ResolveExmplAInput__MapEnum(ctx, args["map_enum"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
			}
			result.MapEnum = v
		}
	}
	if args["map_scalar"] != nil {
		{
			v, err := ResolveExmplAInput__MapScalar(ctx, args["map_scalar"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
			}
			result.MapScalar = v
		}
	}
	if args["map_msg"] != nil {
		{
			v, err := ResolveExmplAInput__MapMsg(ctx, args["map_msg"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplAInput` input object field")
			}
			result.MapMsg = v
		}
	}

	return result, nil
}
func ResolveExmplAOneOffsInput(ctx context.Context, i interface{}) (_ *proto.AOneOffs, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.AOneOffs)
	if e_n_r_enum_, ok := args["e_n_r_enum"]; ok && e_n_r_enum_ != nil {
		v := proto.SomeEnum(e_n_r_enum_.(int))
		result.FirstEnum = &proto.AOneOffs_ENREnum{v}
	} else if e_n_r_scalar_, ok := args["e_n_r_scalar"]; ok && e_n_r_scalar_ != nil {
		v := e_n_r_scalar_.(int32)
		result.FirstEnum = &proto.AOneOffs_ENRScalar{v}
	} else if e_n_r_msg_, ok := args["e_n_r_msg"]; ok && e_n_r_msg_ != nil {
		v, err := well_known.ResolveTimestampInput(ctx, e_n_r_msg_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field e_n_r_msg")
		}
		result.FirstEnum = &proto.AOneOffs_ENRMsg{v}
	}
	if s_n_r_scalar_, ok := args["s_n_r_scalar"]; ok && s_n_r_scalar_ != nil {
		v := s_n_r_scalar_.(int32)
		result.FirstScalar = &proto.AOneOffs_SNRScalar{v}
	} else if s_n_r_enum_, ok := args["s_n_r_enum"]; ok && s_n_r_enum_ != nil {
		v := proto.SomeEnum(s_n_r_enum_.(int))
		result.FirstScalar = &proto.AOneOffs_SNREnum{v}
	} else if s_n_r_msg_, ok := args["s_n_r_msg"]; ok && s_n_r_msg_ != nil {
		v, err := well_known.ResolveTimestampInput(ctx, s_n_r_msg_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field s_n_r_msg")
		}
		result.FirstScalar = &proto.AOneOffs_SNRMsg{v}
	}
	if m_n_r_msg_, ok := args["m_n_r_msg"]; ok && m_n_r_msg_ != nil {
		v, err := well_known.ResolveTimestampInput(ctx, m_n_r_msg_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field m_n_r_msg")
		}
		result.FirstMessage = &proto.AOneOffs_MNRMsg{v}
	} else if m_n_r_scalar_, ok := args["m_n_r_scalar"]; ok && m_n_r_scalar_ != nil {
		v := m_n_r_scalar_.(int32)
		result.FirstMessage = &proto.AOneOffs_MNRScalar{v}
	} else if m_n_r_enum_, ok := args["m_n_r_enum"]; ok && m_n_r_enum_ != nil {
		v := proto.SomeEnum(m_n_r_enum_.(int))
		result.FirstMessage = &proto.AOneOffs_MNREnum{v}
	}

	return result, nil
}
func ResolveExmplMsgWithEmptyInput(ctx context.Context, i interface{}) (_ *proto.MsgWithEmpty, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.MsgWithEmpty)
	if args["empty_field"] != nil {
		{
			v, err := ResolveExmplEmptyInput(ctx, args["empty_field"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplMsgWithEmptyInput` input object field")
			}
			result.EmptyField = v
		}
	}

	return result, nil
}
func ResolveExmplEmptyInput(ctx context.Context, i interface{}) (_ *proto.Empty, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.Empty)

	return result, nil
}
func ResolveExmplBInput(ctx context.Context, i interface{}) (_ *proto.B, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.B)
	if args["r_msg"] != nil {
		in := args["r_msg"].([]interface{})
		result.RMsg = make([]*timestamp.Timestamp, len(in))
		for i, val := range in {

			{
				v, err := well_known.ResolveTimestampInput(ctx, val)
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve `ResolveExmplBInput` input object field")
				}
				result.RMsg[i] = v
			}
		}
	}
	if args["r_scalar"] != nil {
		in := args["r_scalar"].([]interface{})
		result.RScalar = make([]int32, len(in))
		for i, val := range in {
			result.RScalar[i] = val.(int32)
		}
	}
	if args["r_enum"] != nil {
		in := args["r_enum"].([]interface{})
		result.REnum = make([]proto.SomeEnum, len(in))
		for i, val := range in {
			result.REnum[i] = proto.SomeEnum(val.(int))
		}
	}
	if args["n_r_enum"] != nil {
		result.NREnum = proto.SomeEnum(args["n_r_enum"].(int))
	}
	if args["n_r_scalar"] != nil {
		result.NRScalar = args["n_r_scalar"].(int32)
	}
	if args["n_r_msg"] != nil {
		{
			v, err := well_known.ResolveTimestampInput(ctx, args["n_r_msg"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplBInput` input object field")
			}
			result.NRMsg = v
		}
	}
	if args["map_enum"] != nil {
		{
			v, err := ResolveExmplBInput__MapEnum(ctx, args["map_enum"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplBInput` input object field")
			}
			result.MapEnum = v
		}
	}
	if args["map_scalar"] != nil {
		{
			v, err := ResolveExmplBInput__MapScalar(ctx, args["map_scalar"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplBInput` input object field")
			}
			result.MapScalar = v
		}
	}
	if args["map_msg"] != nil {
		{
			v, err := ResolveExmplBInput__MapMsg(ctx, args["map_msg"])
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve `ResolveExmplBInput` input object field")
			}
			result.MapMsg = v
		}
	}

	return result, nil
}

// Output objects
var ExmplA = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplA",
	Fields: graphql.Fields{},
})

func init() {
	ExmplA.AddFieldConfig("r_msg", &graphql.Field{
		Name: "r_msg",
		Type: graphql.NewList(graphql.NewNonNull(well_known.Timestamp)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.RMsg, nil
			case proto.A:
				return src.RMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("r_scalar", &graphql.Field{
		Name: "r_scalar",
		Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.RScalar, nil
			case proto.A:
				return src.RScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("r_enum", &graphql.Field{
		Name: "r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return func(arg []proto.SomeEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(s.GetREnum()), nil
			case proto.A:
				return func(arg []proto.SomeEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(src.GetREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("n_r_enum", &graphql.Field{
		Name: "n_r_enum",
		Type: ExmplAsomeEnum3,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return int(s.GetNREnum()), nil
			case proto.A:
				return int(src.GetNREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("n_r_scalar", &graphql.Field{
		Name: "n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NRScalar, nil
			case proto.A:
				return src.NRScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("n_r_msg", &graphql.Field{
		Name: "n_r_msg",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NRMsg, nil
			case proto.A:
				return src.NRMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("scalar_from_context", &graphql.Field{
		Name: "scalar_from_context",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.ScalarFromContext, nil
			case proto.A:
				return src.ScalarFromContext, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("enum_from_context", &graphql.Field{
		Name: "enum_from_context",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return int(s.GetEnumFromContext()), nil
			case proto.A:
				return int(src.GetEnumFromContext()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("message_from_context", &graphql.Field{
		Name: "message_from_context",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.MessageFromContext, nil
			case proto.A:
				return src.MessageFromContext, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("message_with_oneoffs", &graphql.Field{
		Name: "message_with_oneoffs",
		Type: ExmplAOneOffs,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.MessageWithOneoffs, nil
			case proto.A:
				return src.MessageWithOneoffs, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("test", &graphql.Field{
		Name: "test",
		Type: scalars.GraphQLBytesScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.Test, nil
			case proto.A:
				return src.Test, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("map_enum", &graphql.Field{
		Name: "map_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplA__map_enum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case proto.A:
				var res []map[string]interface{}
				for key, value := range src.MapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("map_scalar", &graphql.Field{
		Name: "map_scalar",
		Type: graphql.NewList(graphql.NewNonNull(ExmplA__map_scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapScalar {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case proto.A:
				var res []map[string]interface{}
				for key, value := range src.MapScalar {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplA.AddFieldConfig("map_msg", &graphql.Field{
		Name: "map_msg",
		Type: graphql.NewList(graphql.NewNonNull(ExmplA__map_msg)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.A:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapMsg {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case proto.A:
				var res []map[string]interface{}
				for key, value := range src.MapMsg {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplAOneOffs = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplAOneOffs",
	Fields: graphql.Fields{},
})

func init() {
	ExmplAOneOffs.AddFieldConfig("e_n_r_enum", &graphql.Field{
		Name: "e_n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetENREnum(), nil
			case proto.AOneOffs:
				return src.GetENREnum(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("e_n_r_scalar", &graphql.Field{
		Name: "e_n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetENRScalar(), nil
			case proto.AOneOffs:
				return src.GetENRScalar(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("e_n_r_msg", &graphql.Field{
		Name: "e_n_r_msg",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetENRMsg(), nil
			case proto.AOneOffs:
				return src.GetENRMsg(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("s_n_r_scalar", &graphql.Field{
		Name: "s_n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSNRScalar(), nil
			case proto.AOneOffs:
				return src.GetSNRScalar(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("s_n_r_enum", &graphql.Field{
		Name: "s_n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSNREnum(), nil
			case proto.AOneOffs:
				return src.GetSNREnum(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("s_n_r_msg", &graphql.Field{
		Name: "s_n_r_msg",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetSNRMsg(), nil
			case proto.AOneOffs:
				return src.GetSNRMsg(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("m_n_r_msg", &graphql.Field{
		Name: "m_n_r_msg",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMNRMsg(), nil
			case proto.AOneOffs:
				return src.GetMNRMsg(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("m_n_r_scalar", &graphql.Field{
		Name: "m_n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMNRScalar(), nil
			case proto.AOneOffs:
				return src.GetMNRScalar(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplAOneOffs.AddFieldConfig("m_n_r_enum", &graphql.Field{
		Name: "m_n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.AOneOffs:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.GetMNREnum(), nil
			case proto.AOneOffs:
				return src.GetMNREnum(), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplMsgWithEmpty = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplMsgWithEmpty",
	Fields: graphql.Fields{},
})

func init() {
	ExmplMsgWithEmpty.AddFieldConfig("empty_field", &graphql.Field{
		Name: "empty_field",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.MsgWithEmpty:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.EmptyField, nil
			case proto.MsgWithEmpty:
				return src.EmptyField, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplB = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplB",
	Fields: graphql.Fields{},
})

func init() {
	ExmplB.AddFieldConfig("r_msg", &graphql.Field{
		Name: "r_msg",
		Type: graphql.NewList(graphql.NewNonNull(well_known.Timestamp)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.RMsg, nil
			case proto.B:
				return src.RMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("r_scalar", &graphql.Field{
		Name: "r_scalar",
		Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.RScalar, nil
			case proto.B:
				return src.RScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("r_enum", &graphql.Field{
		Name: "r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				return func(arg []proto.SomeEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(s.GetREnum()), nil
			case proto.B:
				return func(arg []proto.SomeEnum) []int {
					res := make([]int, len(arg))
					for i, val := range arg {
						res[i] = int(val)
					}
					return res
				}(src.GetREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("n_r_enum", &graphql.Field{
		Name: "n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				return int(s.GetNREnum()), nil
			case proto.B:
				return int(src.GetNREnum()), nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("n_r_scalar", &graphql.Field{
		Name: "n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NRScalar, nil
			case proto.B:
				return src.NRScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("n_r_msg", &graphql.Field{
		Name: "n_r_msg",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				return s.NRMsg, nil
			case proto.B:
				return src.NRMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("map_enum", &graphql.Field{
		Name: "map_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplB__map_enum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case proto.B:
				var res []map[string]interface{}
				for key, value := range src.MapEnum {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("map_scalar", &graphql.Field{
		Name: "map_scalar",
		Type: graphql.NewList(graphql.NewNonNull(ExmplB__map_scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapScalar {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case proto.B:
				var res []map[string]interface{}
				for key, value := range src.MapScalar {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplB.AddFieldConfig("map_msg", &graphql.Field{
		Name: "map_msg",
		Type: graphql.NewList(graphql.NewNonNull(ExmplB__map_msg)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *proto.B:
				if src == nil {
					return nil, nil
				}
				s := *src
				var res []map[string]interface{}
				for key, value := range s.MapMsg {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			case proto.B:
				var res []map[string]interface{}
				for key, value := range src.MapMsg {
					res = append(res, map[string]interface{}{
						"key":   key,
						"value": value,
					})
				}
				return res, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

// Maps input objects
var ExmplAInput__MapEnum = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAInput__MapEnum",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplSomeEnum},
		}
	}),
})
var ExmplAInput__MapScalar = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAInput__MapScalar",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})
var ExmplAInput__MapMsg = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAInput__MapMsg",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: well_known.TimestampInput},
		}
	}),
})
var ExmplBInput__MapEnum = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBInput__MapEnum",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplSomeEnum},
		}
	}),
})
var ExmplBInput__MapScalar = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBInput__MapScalar",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})
var ExmplBInput__MapMsg = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBInput__MapMsg",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: well_known.TimestampInput},
		}
	}),
})

// Maps input objects resolvers
func ResolveExmplAInput__MapEnum(ctx context.Context, i interface{}) (_ map[int32]proto.SomeEnum, rerr error) {
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]proto.SomeEnum)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := proto.SomeEnum(v.(int))
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplAInput__MapScalar(ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]int32)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := v.(int32)
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplAInput__MapMsg(ctx context.Context, i interface{}) (_ map[int32]*timestamp.Timestamp, rerr error) {
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]*timestamp.Timestamp)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv, err := well_known.ResolveTimestampInput(ctx, v)
		if err != nil {
			return nil, errors.Wrapf(err, "failed to resolve #%d map element value", i)
		}
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplBInput__MapEnum(ctx context.Context, i interface{}) (_ map[int32]proto.SomeEnum, rerr error) {
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]proto.SomeEnum)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := proto.SomeEnum(v.(int))
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplBInput__MapScalar(ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]int32)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := v.(int32)
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplBInput__MapMsg(ctx context.Context, i interface{}) (_ map[int32]*timestamp.Timestamp, rerr error) {
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]*timestamp.Timestamp)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv, err := well_known.ResolveTimestampInput(ctx, v)
		if err != nil {
			return nil, errors.Wrapf(err, "failed to resolve #%d map element value", i)
		}
		result[kk] = vv
	}
	return result, nil
}

// Maps output objects
var ExmplA__map_enum = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplA__map_enum",
	Fields: graphql.Fields{},
})

func init() {
	ExmplA__map_enum.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplA__map_enum.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplA__map_scalar = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplA__map_scalar",
	Fields: graphql.Fields{},
})

func init() {
	ExmplA__map_scalar.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplA__map_scalar.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplA__map_msg = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplA__map_msg",
	Fields: graphql.Fields{},
})

func init() {
	ExmplA__map_msg.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplA__map_msg.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplB__map_enum = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplB__map_enum",
	Fields: graphql.Fields{},
})

func init() {
	ExmplB__map_enum.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplB__map_enum.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplB__map_scalar = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplB__map_scalar",
	Fields: graphql.Fields{},
})

func init() {
	ExmplB__map_scalar.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplB__map_scalar.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplB__map_msg = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplB__map_msg",
	Fields: graphql.Fields{},
})

func init() {
	ExmplB__map_msg.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplB__map_msg.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: well_known.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}
func GetServiceExampleServiceQueryMethods(c proto.ServiceExampleClient, ih *interceptors.InterceptorHandler) graphql.Fields {
	return graphql.Fields{
		"getQueryMethod": &graphql.Field{
			Name: "getQueryMethod",
			Type: ExmplB,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := ResolveExmplAOneOffsInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetQueryMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getQueryMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplAOneOffsInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*proto.AOneOffs)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *proto.AOneOffs", req))
					}
					ctx = ictx.Params.Context
					return c.GetQueryMethod(ctx, r)
				})
			},
		},
		"queryMethod": &graphql.Field{
			Name: "queryMethod",
			Type: well_known.Timestamp,
			Args: graphql.FieldConfigArgument{
				"seconds": &graphql.ArgumentConfig{Type: scalars.GraphQLInt64Scalar},
				"nanos":   &graphql.ArgumentConfig{Type: scalars.GraphQLInt32Scalar},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := well_known.ResolveTimestampInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.QueryMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "queryMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return well_known.ResolveTimestampInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*timestamp.Timestamp)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *timestamp.Timestamp", req))
					}
					ctx = ictx.Params.Context
					return c.QueryMethod(ctx, r)
				})
			},
		},
		"getEmptiesMsg": &graphql.Field{
			Name: "getEmptiesMsg",
			Type: scalars.NoDataScalar,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := ResolveExmplEmptyInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetEmptiesMsg(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getEmptiesMsg",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplEmptyInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*proto.Empty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *proto.Empty", req))
					}
					ctx = ictx.Params.Context
					return c.GetEmptiesMsg(ctx, r)
				})
			},
		},
	}
}
func GetServiceExampleServiceMutationMethods(c proto.ServiceExampleClient, ih *interceptors.InterceptorHandler) graphql.Fields {
	return graphql.Fields{
		"mutationMethod": &graphql.Field{
			Name: "mutationMethod",
			Type: ExmplA,
			Args: graphql.FieldConfigArgument{
				"r_msg":      &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(well_known.TimestampInput))},
				"r_scalar":   &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))},
				"r_enum":     &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum))},
				"n_r_enum":   &graphql.ArgumentConfig{Type: ExmplSomeEnum},
				"n_r_scalar": &graphql.ArgumentConfig{Type: scalars.GraphQLInt32Scalar},
				"n_r_msg":    &graphql.ArgumentConfig{Type: well_known.TimestampInput},
				"map_enum":   &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplBInput__MapEnum))},
				"map_scalar": &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplBInput__MapScalar))},
				"map_msg":    &graphql.ArgumentConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplBInput__MapMsg))},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := ResolveExmplBInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.MutationMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "mutationMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplBInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*proto.B)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *proto.B", req))
					}
					ctx = ictx.Params.Context
					return c.MutationMethod(ctx, r)
				})
			},
		},
		"getMutatuionMethod": &graphql.Field{
			Name: "getMutatuionMethod",
			Type: ExmplMsgWithEmpty,
			Args: graphql.FieldConfigArgument{
				"empty_field": &graphql.ArgumentConfig{Type: scalars.NoDataScalar},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				ctx := p.Context
				_ = ctx
				if ih == nil {
					req, err := ResolveExmplMsgWithEmptyInput(ctx, p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetMutatuionMethod(ctx, req)
				}
				ictx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getMutatuionMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ictx, func(ictx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveExmplMsgWithEmptyInput(ctx, p.Args)
				})
				if err != nil {
					return nil, errors.Wrap(err, "failed to resolve args")
				}
				return ih.Call(ictx, req, func(ictx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*proto.MsgWithEmpty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *proto.MsgWithEmpty", req))
					}
					ctx = ictx.Params.Context
					return c.GetMutatuionMethod(ctx, r)
				})
			},
		},
	}
}
