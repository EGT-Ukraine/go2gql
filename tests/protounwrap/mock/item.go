// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EGT-Ukraine/go2gql/tests/protounwrap/generated/clients/apis (interfaces: ItemsServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	apis "github.com/EGT-Ukraine/go2gql/tests/protounwrap/generated/clients/apis"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockItemsServiceClient is a mock of ItemsServiceClient interface
type MockItemsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockItemsServiceClientMockRecorder
}

// MockItemsServiceClientMockRecorder is the mock recorder for MockItemsServiceClient
type MockItemsServiceClientMockRecorder struct {
	mock *MockItemsServiceClient
}

// NewMockItemsServiceClient creates a new mock instance
func NewMockItemsServiceClient(ctrl *gomock.Controller) *MockItemsServiceClient {
	mock := &MockItemsServiceClient{ctrl: ctrl}
	mock.recorder = &MockItemsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItemsServiceClient) EXPECT() *MockItemsServiceClientMockRecorder {
	return m.recorder
}

// Activated mocks base method
func (m *MockItemsServiceClient) Activated(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*apis.ActivatedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Activated", varargs...)
	ret0, _ := ret[0].(*apis.ActivatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activated indicates an expected call of Activated
func (mr *MockItemsServiceClientMockRecorder) Activated(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activated", reflect.TypeOf((*MockItemsServiceClient)(nil).Activated), varargs...)
}

// List mocks base method
func (m *MockItemsServiceClient) List(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*apis.ItemListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*apis.ItemListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockItemsServiceClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockItemsServiceClient)(nil).List), varargs...)
}

// TestRequestUnwrap mocks base method
func (m *MockItemsServiceClient) TestRequestUnwrap(arg0 context.Context, arg1 *apis.TestRequestUnwrapRequest, arg2 ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestRequestUnwrap", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRequestUnwrap indicates an expected call of TestRequestUnwrap
func (mr *MockItemsServiceClientMockRecorder) TestRequestUnwrap(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRequestUnwrap", reflect.TypeOf((*MockItemsServiceClient)(nil).TestRequestUnwrap), varargs...)
}

// TestRequestUnwrapInnerMessage mocks base method
func (m *MockItemsServiceClient) TestRequestUnwrapInnerMessage(arg0 context.Context, arg1 *apis.TestRequestUnwrapInnerMessageRequest, arg2 ...grpc.CallOption) (*apis.TestRequestUnwrapInnerMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestRequestUnwrapInnerMessage", varargs...)
	ret0, _ := ret[0].(*apis.TestRequestUnwrapInnerMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRequestUnwrapInnerMessage indicates an expected call of TestRequestUnwrapInnerMessage
func (mr *MockItemsServiceClientMockRecorder) TestRequestUnwrapInnerMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRequestUnwrapInnerMessage", reflect.TypeOf((*MockItemsServiceClient)(nil).TestRequestUnwrapInnerMessage), varargs...)
}

// TestRequestUnwrapRepeatedMessage mocks base method
func (m *MockItemsServiceClient) TestRequestUnwrapRepeatedMessage(arg0 context.Context, arg1 *apis.TestRequestUnwrapRepeatedMessageRequest, arg2 ...grpc.CallOption) (*apis.TestRequestUnwrapRepeatedMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestRequestUnwrapRepeatedMessage", varargs...)
	ret0, _ := ret[0].(*apis.TestRequestUnwrapRepeatedMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRequestUnwrapRepeatedMessage indicates an expected call of TestRequestUnwrapRepeatedMessage
func (mr *MockItemsServiceClientMockRecorder) TestRequestUnwrapRepeatedMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRequestUnwrapRepeatedMessage", reflect.TypeOf((*MockItemsServiceClient)(nil).TestRequestUnwrapRepeatedMessage), varargs...)
}
