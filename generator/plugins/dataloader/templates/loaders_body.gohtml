{{- /*gotype: github.com/EGT-Ukraine/go2gql/generator/plugins/dataloader.LoadersBodyContext*/ -}}

type LoaderClients interface {
	{{range $service := $.Services -}}
		Get{{$service.Name}}Client() {{goType $service.CallInterface}}
	{{end -}}
}

type DataLoaders struct {
	{{range $loader := $.Loaders -}}
		{{$loader.Name}}Loader {{$loader.LoaderTypeName}}
	{{end -}}
}

type dataLoadersContextKeyType struct{}

var dataLoadersContextKey = dataLoadersContextKeyType{}

func GetContextWithLoaders(ctx context.Context, apiClients LoaderClients) context.Context {
	dataLoaders := &DataLoaders{
	{{range $loader := $.Loaders -}}
		{{$loader.Name}}Loader: create{{$loader.Name}}(ctx, apiClients.Get{{$loader.Service.Name}}Client()),
	{{end -}}
	}

	return context.WithValue(ctx, dataLoadersContextKey, dataLoaders)
}

{{range $loader := $.Loaders -}}
func create{{$loader.Name}}(ctx context.Context, client {{goType $loader.Service.CallInterface}}) {{$loader.LoaderTypeName}} {
	return {{$loader.LoaderTypeName}}{
		fetch: func(keys {{goType $loader.RequestGoType}}) ([]{{goType $loader.ResponseGoType}}, []error) {
			{{$loader.FetchCode}}
		},
		wait: {{duration $loader.WaitDuration}},
	}
}
{{end -}}

func GetDataLoadersFromContext(ctx context.Context) *DataLoaders {
	val := ctx.Value(dataLoadersContextKey)

	if val == nil {
		return nil
	}

	return val.(*DataLoaders)
}
