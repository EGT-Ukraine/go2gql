{{- /*gotype: github.com/EGT-Ukraine/go2gql/generator/plugins/graphql.RenderFieldsContext*/ -}}
{{ range $field := $.OutputObject.DataLoaderFields -}}
	{{$.OutputObject.VariableName}}.AddFieldConfig("{{$field.Name}}", &{{gqlPkg}}.Field{
		Name:		"{{$field.Name}}",
		Description: "",
		Type:		{{graphqlOutputLoaderTypeName $.ObjectContext $field}},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			parent := p.Source.(*{{goType $.OutputObject.GoType}})

			loaders := {{loadersPkg}}.GetDataLoadersFromContext(p.Context)

			if loaders == nil {
				return nil, errors.New("Data loaders not found in context. Call loaders.GetContextWithLoaders")
			}

			{{if $field.KeyFieldSlice}}
			thunk := loaders.{{$field.DataLoaderName}}Loader.LoadAllThunk(parent.{{$field.NormalizedParentKeyFieldName}})

			return func() (interface{}, error) {
				var loaderErrors error

				result, errs := thunk()

				for _, err := range errs {
					if err != nil {
						loaderErrors = {{multierrorPkg}}.Append(loaderErrors, err)
					}
				}

				return result, loaderErrors
			}, nil
			{{else}}
			thunk := loaders.{{$field.DataLoaderName}}Loader.LoadThunk(parent.{{$field.NormalizedParentKeyFieldName}})

			return func() (interface{}, error) {
				return thunk()
			}, nil
			{{end}}
		},
	})
{{ end -}}