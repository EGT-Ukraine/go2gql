// Code generated by go-bindata.
// sources:
// generator/plugins/dataloader/templates/loaders_body.gohtml
// generator/plugins/dataloader/templates/loaders_head.gohtml
// generator/plugins/dataloader/templates/output_object_fields.gohtml
// DO NOT EDIT!

package dataloader

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoaders_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6f\x1a\x3f\x10\x3d\xdb\x9f\x62\x0e\xd1\x4f\x2c\x22\xbb\xd2\xef\x88\xc4\xa5\xa4\x41\x55\x9b\xaa\x6a\xd3\xe6\x10\xe5\xe0\x7a\x87\x8d\x85\xb1\x89\x77\x96\x82\x2c\x7f\xf7\xca\xfb\x27\x2c\x64\x23\x38\xf4\x84\x34\xf3\x76\xe6\xcd\x7b\xcf\x78\x7f\x0d\xd9\xb8\xb0\xb4\xdf\xe0\x14\x0a\x45\xcf\xd5\xef\x54\xda\x75\xf6\x71\x71\x7f\xfd\x73\xe5\x84\x32\x98\x15\xf6\xff\xe2\x45\x67\x05\x1a\x74\x82\xac\xcb\x36\xba\x2a\x94\x29\xb3\x5c\x90\xd0\x56\xe4\xe8\xd2\x2f\xf5\x4f\xf9\xc1\xe6\xfb\xb9\x35\x84\x3b\x1a\x67\x70\x1d\x02\xe7\x71\x34\x34\xed\xb9\x56\x68\xa8\x04\x65\x08\xdd\x52\x48\x04\xcf\x99\xf7\x4e\x98\x02\xe1\xaa\x99\x04\xd3\x19\x5c\x75\xe3\xea\x09\x8c\x2d\x90\xbc\x6f\xfb\xe9\x0f\x74\x5b\x25\x31\xfd\x2a\xd6\x18\x42\x33\x72\x94\x80\xf7\x85\xbd\x8f\xab\x4e\x71\x73\xa1\xf5\xa7\x6e\x61\x1c\xe7\x3d\x9a\xbc\x9e\xdc\xb1\xbb\x11\x24\xba\x8d\x25\xb9\x4a\xd2\x85\xc4\x0e\xac\xe6\xd6\x2c\x55\xd1\x92\x6a\x40\x70\xe8\x36\x85\x48\xaf\x0f\x18\xa2\x92\x1f\xa8\xb4\x3a\x7e\xc6\x7d\x7d\x57\x43\xcc\x07\xce\xb7\xc2\x0d\xe3\x60\xf6\xfe\xf7\xf1\xc3\x65\x65\x24\x2c\x90\xda\xce\x83\xa2\xe7\x16\x3b\x92\xb4\x03\xd9\x94\xd3\xb6\x3d\x01\xb1\x51\x9d\x65\x47\x06\x26\xa7\xd0\x28\x57\x6f\x73\x94\xea\xbf\x9e\xa8\xff\x40\xcc\x29\x48\x87\x82\xf0\x1d\x50\xe4\xdf\xe7\x9b\x5e\x10\x99\x64\xd2\x37\x80\x05\xce\x99\x43\xaa\x9c\x79\xbd\x2e\x0a\xf4\x4b\xe8\x0a\x9b\xf1\x83\xda\x1e\x95\x93\xe8\xe3\xd9\x53\x6b\x1b\xce\x9e\xf3\xd6\x0e\x59\x13\xbf\x38\xe9\xc9\xd9\x00\x46\xdb\xda\x93\xcf\x41\x3d\x67\x6c\x89\x24\x9f\xa7\x10\xe9\x8f\x56\xb8\x2f\xdf\x32\xf9\x8e\x2f\x15\x96\xb4\xa8\xab\x91\xc1\xe8\xf1\x69\x00\x54\x6e\xac\x29\xb1\x43\x4d\xe0\xf1\x09\x9d\xb3\x2e\x89\x7c\xfa\x39\xb8\x8d\x0b\xe7\x36\xaf\x9f\x2d\x0b\x13\xce\xd8\x1f\xa1\x68\x0a\xde\xe7\x95\x13\xa4\xac\x81\x13\xfd\x1e\x84\xa2\x9b\xb6\x77\x57\x86\x00\x63\xf0\x9e\xd4\x1a\xbf\xad\x8a\x10\xd2\x3b\xa5\xb5\x2a\x51\x5a\x93\x4f\xa2\xe5\x81\x1f\x12\xf0\xfa\x3c\x7a\xc9\xbd\x75\x76\xdd\xea\x3f\xe4\x49\x02\xe3\xfe\x7f\x87\xe7\x6c\x2b\x74\x34\x5c\xd2\x2e\x6d\x92\x33\x18\x9a\x84\x73\xa6\x96\x10\xc1\xb3\x19\x18\xa5\xeb\xcb\x5b\x2b\x8c\xd2\x47\x69\xdc\x0a\x9d\x8e\xfa\x7b\x62\xca\xfe\x06\x00\x00\xff\xff\xdb\x59\x69\xe3\xb9\x05\x00\x00")

func templatesLoaders_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoaders_bodyGohtml,
		"templates/loaders_body.gohtml",
	)
}

func templatesLoaders_bodyGohtml() (*asset, error) {
	bytes, err := templatesLoaders_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loaders_body.gohtml", size: 1465, mode: os.FileMode(436), modTime: time.Unix(1548156719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoaders_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xc1\x4a\x04\x31\x0c\x86\xef\x79\x8a\x30\xec\x41\x17\x66\x0a\x1e\x17\x3c\x88\x88\x0a\x1e\x3c\xe8\x03\xc4\x69\xc8\x96\xed\xb6\xb5\xcd\x82\x12\xfa\xee\x42\x77\xc0\x53\xc2\xff\x7d\xff\x6f\x36\xa3\xdb\x4b\xd6\xdf\xc2\x07\x94\xa0\xc7\xcb\xd7\xb2\xe6\xb3\x7b\x7a\xfe\x98\x3f\x4f\x95\x42\x62\x27\xf9\x4e\xbe\xa3\x13\x4e\x5c\x49\x73\x75\x25\x5e\x24\xa4\xe6\x3c\x29\xc5\x4c\x9e\xeb\xf2\x36\x4e\x7b\x61\xf2\x8f\x39\x29\xff\xe8\xde\xe1\xdc\x3b\x40\xa1\xf5\x44\xc2\x78\x15\x1b\x40\x38\x97\x5c\x15\x6f\x60\x5a\xaf\xe6\x04\x60\x56\x29\x09\xe3\x6e\x83\x87\x7b\xdc\x2d\xaf\xe3\x6f\x63\x06\x11\xd1\x6c\xc3\xcb\x43\x0c\xd4\x7a\xc7\xe9\x3f\x7a\x27\x3d\xf6\x3e\x81\x19\x27\x3f\x2a\xb7\xf0\x17\x00\x00\xff\xff\x95\x1a\xd0\x59\xde\x00\x00\x00")

func templatesLoaders_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoaders_headGohtml,
		"templates/loaders_head.gohtml",
	)
}

func templatesLoaders_headGohtml() (*asset, error) {
	bytes, err := templatesLoaders_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loaders_head.gohtml", size: 222, mode: os.FileMode(436), modTime: time.Unix(1548156719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutput_object_fieldsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xdb\x38\x10\x3d\xcb\xbf\x62\xd6\x08\x16\x52\xe0\x50\xc0\x1e\x0d\xf8\xb0\xc8\x87\x0f\xbb\x48\x82\x24\x6d\x0f\x41\x0e\x8c\x34\x92\x59\xd3\xa4\x42\x51\x69\x5d\x82\xff\xbd\xe0\x87\xa4\x58\x75\x8b\x06\xe5\xc5\x12\x87\xf3\xe6\xbd\x37\x43\xcb\x98\x33\xc8\x4f\x6b\xa9\xf7\x0d\x2e\xa1\x66\x7a\xd3\x3d\x93\x42\xee\xf2\xcb\xf5\xc3\xd9\x87\xad\xa2\x4c\x60\x5e\xcb\x7f\xea\x17\x9e\xd7\x28\x50\x51\x2d\x55\xde\xf0\xae\x66\xa2\xcd\x6b\x45\x9b\xcd\x0b\x27\x77\x28\x4a\x54\x57\x0c\x79\xd9\x9e\x4b\xa1\xf1\xab\x3e\xcd\xe1\xcc\xda\x99\x31\xa0\xa8\xa8\x11\x4e\x2a\x17\x85\xe5\x0a\x4e\xc8\x4d\xa7\x9b\x4e\xdf\x3c\x7f\xc6\x42\x93\x0b\xaa\xe9\xff\x92\x0e\xf9\x3e\x0d\x00\xc0\x98\xc9\xc9\x8f\x54\x31\xfa\xcc\xf1\x9a\xee\xd0\x5a\xf2\x6f\x59\xfa\x8c\x73\x29\x2a\x56\xa7\x73\x63\x42\x0d\x12\xe2\xf3\x05\xfc\x6d\x4c\xfd\xc2\x6f\xb7\xb5\xb5\xc4\x1f\x35\x1e\xd8\x2d\x77\x66\xd9\xbf\xfc\x98\x3a\x9c\xbb\xc0\xb6\x50\xac\xd1\x4c\x8a\x25\xcc\xdf\x04\x1e\xbc\x61\x71\x19\x13\x9d\x08\x7c\x83\x1c\x77\xc2\xe1\x39\xc1\x5e\x40\x74\x26\x5a\x61\xed\x08\x76\x87\xad\xe4\xaf\xb8\x84\xaa\x13\x45\xda\xc0\xe8\xab\xdf\xbf\xa5\x8a\xee\xda\x0c\x52\x26\x34\xaa\x8a\x16\x68\xec\x02\x50\x29\xa9\x32\x18\x35\xb9\xd5\x50\x85\x42\x3b\x9b\x1b\x72\x2f\x3b\x55\x20\x49\x4f\x8d\xa9\xa5\x63\x33\xb5\x7e\xed\x77\xad\xcd\x66\x07\x18\xdc\xd3\x6f\x1d\x88\x31\xf1\x25\x98\xb8\x46\x3d\xb6\xab\xbd\x52\x72\x17\x35\xa5\x0d\x89\x4f\x13\x2c\x56\x0d\x70\xab\x15\x08\xc6\x27\x7c\xdd\x52\xa8\x3b\x25\x5c\x30\x8a\x6a\xc9\x35\x7e\x49\xe7\xae\xd4\x90\x2d\xa4\x86\x4a\x76\xa2\x04\x26\xa0\x08\xb5\x08\x9c\x53\xce\xfb\x23\x8e\x5d\x24\xf1\x89\xe9\x4d\x24\x39\xcf\x0e\xea\xd9\x43\x7a\xc6\xb0\x2a\xf6\x83\xfc\x87\x7b\x3f\x24\xf7\x9c\x15\x18\x67\x70\xa4\xd8\x76\x5c\x7b\x4b\x76\x74\x8b\xe9\xe3\x93\xef\x54\x06\x69\x6a\x8c\xf4\x9e\xae\x07\x8b\x8f\x36\x3b\xeb\x1b\xb6\x00\x8e\x22\x0d\x7d\x22\xe3\xe0\x49\xb5\xa3\x9c\x7d\xc3\xf2\xd6\x47\x7a\x32\x61\x20\xb3\x6c\x36\x4b\x92\xa4\x92\x0a\xd8\x02\xb6\xb8\x77\x44\xc2\xbd\x7a\x1f\x10\x18\x87\x93\x44\x39\x8f\xec\x09\x56\x83\x7d\x03\xc4\xd8\xe2\x90\x14\x9e\x89\xfb\x79\xd8\x74\x62\x9b\x6e\x71\x9f\x39\x1c\xeb\x59\xc5\xf6\xf5\x86\x1c\x9f\x51\x57\xf5\x95\x2a\xe0\xb4\xd5\x97\x4a\x85\x80\x4f\x4f\x4a\xd7\xe6\xd1\xd8\xdf\xf4\xf3\x0f\x6c\xec\x7d\xd4\x4e\xcc\xe8\x64\xdf\xe3\x40\xd6\xb3\xc5\x91\xe9\x74\x68\xdd\x72\xcc\x1f\xd9\x93\x97\x09\xab\x80\x97\xc6\x1a\x09\xab\xfc\xf6\x5f\xfd\xd4\xfb\xcd\xa4\xd7\xbf\x72\xc1\xb0\x67\x67\xc9\xe0\x65\x6f\xa6\x43\x5e\xf4\x66\x79\xab\x17\x0e\x66\x32\xbb\xc8\xdb\xe9\xa0\x0e\x9a\xde\xdf\xd5\x77\x7a\x39\x9b\x1d\xb9\xc3\xbf\x1e\x82\x9f\x5c\xfc\xde\xb7\x83\x7b\x7a\x54\xaf\x28\xdf\xc8\x8d\xff\x9f\x36\x73\x1f\x19\x14\xa5\xfb\x70\x7c\x0f\x00\x00\xff\xff\xef\x38\x0f\x98\xcf\x06\x00\x00")

func templatesOutput_object_fieldsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutput_object_fieldsGohtml,
		"templates/output_object_fields.gohtml",
	)
}

func templatesOutput_object_fieldsGohtml() (*asset, error) {
	bytes, err := templatesOutput_object_fieldsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output_object_fields.gohtml", size: 1743, mode: os.FileMode(436), modTime: time.Unix(1548252141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/loaders_body.gohtml": templatesLoaders_bodyGohtml,
	"templates/loaders_head.gohtml": templatesLoaders_headGohtml,
	"templates/output_object_fields.gohtml": templatesOutput_object_fieldsGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"loaders_body.gohtml": &bintree{templatesLoaders_bodyGohtml, map[string]*bintree{}},
		"loaders_head.gohtml": &bintree{templatesLoaders_headGohtml, map[string]*bintree{}},
		"output_object_fields.gohtml": &bintree{templatesOutput_object_fieldsGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

