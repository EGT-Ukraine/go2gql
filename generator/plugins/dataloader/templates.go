// Code generated by go-bindata.
// sources:
// generator/plugins/dataloader/templates/loaders_body.gohtml
// generator/plugins/dataloader/templates/loaders_head.gohtml
// generator/plugins/dataloader/templates/output_object_fields.gohtml
// DO NOT EDIT!

package dataloader

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoaders_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\x1a\x31\x10\x3d\xdb\xbf\x62\x0e\x51\xc5\x22\xb2\x2b\xf5\x88\xc4\x89\x34\xa8\x6a\x53\x55\x6d\xda\x1c\xa2\x1c\x5c\xef\xb0\xb1\x30\x36\xf1\xce\x52\x90\xe5\xff\x5e\x79\x3f\xc2\x42\x36\x82\x43\x4f\x48\x33\x6f\x67\xde\xbc\xf7\x8c\xf7\xd7\x90\x8d\x0b\x4b\xfb\x0d\x4e\xa1\x50\xf4\x5c\xfd\x49\xa5\x5d\x67\x9f\x16\xf7\xd7\xbf\x56\x4e\x28\x83\x59\x61\x3f\x16\x2f\x3a\x2b\xd0\xa0\x13\x64\x5d\xb6\xd1\x55\xa1\x4c\x99\xe5\x82\x84\xb6\x22\x47\x97\x7e\xad\x7f\xca\xb9\x35\x84\x3b\x1a\x67\x70\x1d\x02\xe7\x71\x2c\x34\xad\xb9\x56\x68\xa8\x04\x65\x08\xdd\x52\x48\x04\xcf\x99\xf7\x4e\x98\x02\xe1\xaa\x99\x02\xd3\x19\x5c\x75\xa3\xea\x09\x8c\x2d\x90\xbc\x6f\xfb\xe9\x4f\x74\x5b\x25\x31\xfd\x26\xd6\x18\x42\x33\x72\x94\x80\xf7\x85\xbd\x8f\xab\x4e\x71\x73\xa1\xf5\xe7\x6e\x61\x1c\xe7\x3d\x9a\xbc\x9e\xdc\xb1\xbb\x11\x24\xba\x8d\x25\xb9\x4a\xd2\x85\xc4\x0e\xac\xe6\xd6\x2c\x55\xd1\x92\x6a\x40\x70\xe8\x36\x85\x48\xaf\x0f\x18\xa2\x92\x1f\xa8\xb4\x3a\x7e\xc1\x7d\x7d\x57\x43\xcc\x07\xce\xb7\xc2\x0d\xe3\x60\xf6\xfe\xf7\xf1\xc3\x65\x65\x24\x2c\x90\xda\xce\x83\xa2\xe7\x16\x3b\x92\xb4\x03\xd9\x94\xd3\xb6\x3d\x01\xb1\x51\x9d\x65\x47\x06\x26\xa7\xd0\x28\x57\x6f\x73\x94\xea\x43\x4f\xd4\xff\x20\xe6\x14\xa4\x43\x41\xf8\x0e\x28\xf2\xef\xf3\x4d\x2f\x88\x4c\x32\xe9\x1b\xc0\x02\xe7\xcc\x21\x55\xce\xbc\x5e\x17\x05\xfa\x2d\x74\x85\xcd\xf8\x41\x6d\x8f\xca\x49\xf4\xf1\xec\xa9\xb5\x0d\x67\xcf\x79\x6b\x87\xac\x89\x5f\x9c\xf4\xe4\x6c\x00\xa3\x6d\xed\xc9\xe7\xa0\x9e\x33\xb6\x44\x92\xcf\x53\x88\xf4\x47\x2b\xdc\x97\x6f\x99\xfc\xc0\x97\x0a\x4b\x5a\xd4\xd5\xc8\x60\xf4\xf8\x34\x00\x2a\x37\xd6\x94\xd8\xa1\x26\xf0\xf8\x84\xce\x59\x97\x44\x3e\xfd\x1c\xdc\xc6\x85\x73\x9b\xd7\xcf\x96\x85\x09\x67\xec\xaf\x50\x34\x05\xef\xf3\xca\x09\x52\xd6\xc0\x89\x7e\x0f\x42\xd1\x4d\xdb\xbb\x2b\x43\x80\x31\x78\x4f\x6a\x8d\xdf\x57\x45\x08\xe9\x9d\xd2\x5a\x95\x28\xad\xc9\x27\xd1\xf2\xc0\x0f\x09\x78\x7d\x1e\xbd\xe4\xde\x3a\xbb\x6e\xf5\x1f\xf2\x24\x81\x71\xff\xbf\xc3\x73\xb6\x15\x3a\x1a\x2e\x69\x97\x36\xc9\x19\x0c\x4d\xc2\x39\x53\x4b\x88\xe0\xd9\x0c\x8c\xd2\xf5\xe5\xad\x15\x46\xe9\xa3\x34\x6e\x85\x4e\x47\xfd\x3d\x31\x65\xff\x02\x00\x00\xff\xff\xf8\xbc\x26\x67\xb5\x05\x00\x00")

func templatesLoaders_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoaders_bodyGohtml,
		"templates/loaders_body.gohtml",
	)
}

func templatesLoaders_bodyGohtml() (*asset, error) {
	bytes, err := templatesLoaders_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loaders_body.gohtml", size: 1461, mode: os.FileMode(436), modTime: time.Unix(1547023714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoaders_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xc1\x4a\x03\x31\x10\x86\xef\xf3\x14\xc3\xd2\x83\x16\x36\x01\x8f\x05\x0f\x22\x22\x82\x07\x0f\xfa\x00\xe3\xee\x30\x0d\x4d\x93\x98\x4c\x41\x19\xf2\xee\x42\xba\xd0\xd3\x0c\xff\xf7\xfd\xbf\xd9\x8c\x7e\x2f\x59\xff\x0a\x1f\x50\x82\x1e\x2f\xdf\x6e\xc9\x67\xff\xf2\xfa\x39\x7f\x9d\x2a\x85\xc4\x5e\xf2\x83\xfc\x44\x2f\x9c\xb8\x92\xe6\xea\x4b\xbc\x48\x48\xcd\xaf\xa4\x14\x33\xad\x5c\xdd\xfb\x38\xed\x39\x27\xe5\x5f\xdd\x7b\x9c\x7b\x07\x28\xb4\x9c\x48\x18\xaf\x52\x03\x08\xe7\x92\xab\xe2\x1d\x4c\xcb\xd5\x9c\x00\xcc\x2a\x25\x61\xdc\x6d\xf0\xf0\x88\x3b\xf7\x36\xfe\x36\x66\x10\x11\xcd\x36\xec\x9e\x62\xa0\xd6\x3b\x4e\xb7\xe8\x83\xf4\xd8\xfb\x04\x66\x9c\xd6\x51\xb9\x87\xff\x00\x00\x00\xff\xff\x9c\x9d\x2c\x6b\xda\x00\x00\x00")

func templatesLoaders_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoaders_headGohtml,
		"templates/loaders_head.gohtml",
	)
}

func templatesLoaders_headGohtml() (*asset, error) {
	bytes, err := templatesLoaders_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loaders_head.gohtml", size: 218, mode: os.FileMode(436), modTime: time.Unix(1547023714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutput_object_fieldsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8e\xda\x30\x10\xbd\xef\x57\x8c\xd0\xaa\x0a\x08\x1c\xa9\x47\x24\x0e\x15\xdb\xe5\xd0\x8a\x45\x5b\xda\x9e\x4d\x32\x31\x2e\xc6\x0e\x8e\xd3\x76\x6b\xf9\xdf\xab\x71\x4c\x02\xe9\xa5\xbe\xc4\xce\xcc\x7b\xf3\xde\x73\xe2\xfd\x02\xf2\x99\x30\xee\xad\xc6\x25\x08\xe9\x8e\xed\x81\x15\xe6\x9c\x7f\xdc\xec\x17\x5f\x4f\x96\x4b\x8d\xb9\x30\xef\xc5\x45\xe5\x02\x35\x5a\xee\x8c\xcd\x6b\xd5\x0a\xa9\x9b\x5c\x58\x5e\x1f\x2f\x8a\xbd\xa2\x2e\xd1\x3e\x4b\x54\x65\xb3\x36\xda\xe1\x6f\x37\xcb\x61\x11\xc2\x83\xf7\x60\xb9\x16\x08\x8f\x15\x55\x61\xb9\x82\x47\xf6\xd2\xba\xba\x75\x2f\x87\x1f\x58\x38\xf6\xc4\x1d\xff\x6c\x78\x8f\x8f\x30\x00\x00\xef\x47\x9d\xdf\xb8\x95\xfc\xa0\x70\xcb\xcf\x18\x02\xfb\x50\x96\x11\xb1\x36\xba\x92\x22\x9b\x78\xdf\xcd\x60\x5d\x7d\x32\x87\x77\xde\x8b\x8b\xda\x9d\x44\x08\x2c\xb6\xfa\x48\x4c\x8b\x7a\x96\xd7\xc3\xbf\xd0\xbe\xef\x09\x9b\xc2\xca\xda\x49\xa3\x97\x30\xb9\x29\xec\x63\x60\x69\x79\x9f\x92\xe8\xf4\x76\x76\xa8\x83\xf8\xc8\x70\x34\x90\x92\x49\x51\xdc\x18\xef\xa6\x0e\xdc\xaf\xd8\x18\xf5\x13\x97\x50\xb5\xba\xc8\x6a\x18\x62\x8e\xef\x77\xdc\xf2\x73\x33\x85\x4c\x6a\x87\xb6\xe2\x05\xfa\x30\x07\xb4\xd6\xd8\x29\x0c\x16\x69\xd5\xdc\xa2\x76\x94\x7a\xcd\xbe\x98\xd6\x16\xc8\xb2\x99\xf7\xc2\x90\xb8\xf1\x4d\x6c\xe2\xdb\x10\xa6\x0f\x77\x1c\x2a\x6a\x6c\x88\xc4\xfb\x74\xe8\x32\xdd\xa0\x1b\x4c\x34\xcf\xd6\x9c\x93\xc5\xac\x66\x69\x37\xe2\x92\x55\x4f\xb7\x5a\x81\x96\x6a\xa4\x97\x96\x45\xd7\x5a\x4d\xc5\x64\xaa\x61\x5b\xfc\x95\x4d\x68\x54\x8f\xd6\xc6\x41\x65\x5a\x5d\x82\xd4\x50\x74\xb3\x18\xac\xb9\x52\xd7\x16\x52\x97\x44\x7c\x97\xee\x98\x44\x4e\xa6\x77\xf3\xc2\xbd\x3c\x77\x6c\xf5\x89\x8c\x5e\x39\xfa\x0f\x63\x7c\x59\xdd\x9e\xd1\x63\x4f\xa0\xac\x4b\x7a\x00\x6c\x8d\x3d\x73\x25\xff\x60\xb9\x8b\x95\x4f\xf8\x16\x3f\xc1\x0e\x3e\x8a\x25\x59\x8e\xd7\xfd\x5f\xf7\x7a\x03\x8a\x9a\xb3\x91\xad\x39\xc5\xf7\x30\x1c\xe3\x36\x4c\xe9\x77\x44\x5d\xd2\x2f\xf6\x37\x00\x00\xff\xff\x89\xe3\x1a\xa0\xf9\x03\x00\x00")

func templatesOutput_object_fieldsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutput_object_fieldsGohtml,
		"templates/output_object_fields.gohtml",
	)
}

func templatesOutput_object_fieldsGohtml() (*asset, error) {
	bytes, err := templatesOutput_object_fieldsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output_object_fields.gohtml", size: 1017, mode: os.FileMode(436), modTime: time.Unix(1546955341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/loaders_body.gohtml":         templatesLoaders_bodyGohtml,
	"templates/loaders_head.gohtml":         templatesLoaders_headGohtml,
	"templates/output_object_fields.gohtml": templatesOutput_object_fieldsGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"loaders_body.gohtml":         &bintree{templatesLoaders_bodyGohtml, map[string]*bintree{}},
		"loaders_head.gohtml":         &bintree{templatesLoaders_headGohtml, map[string]*bintree{}},
		"output_object_fields.gohtml": &bintree{templatesOutput_object_fieldsGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
