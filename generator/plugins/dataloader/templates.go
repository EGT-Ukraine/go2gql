// Code generated by go-bindata.
// sources:
// generator/plugins/dataloader/templates/loaders_body.gohtml
// generator/plugins/dataloader/templates/loaders_head.gohtml
// generator/plugins/dataloader/templates/output_object_fields.gohtml
// DO NOT EDIT!

package dataloader

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoaders_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x8e\xda\x30\x10\x3d\xdb\x5f\x31\x87\x55\x45\x10\x24\x52\x8f\x48\x5c\xca\x76\x51\xd5\xaa\x87\xee\xb6\x7b\x58\xed\xc1\x4d\x86\x60\xad\xb1\x59\x67\x42\x41\x56\xfe\xbd\x72\xec\x40\x60\x43\x7b\xd8\x13\x62\xe6\x65\xde\x9b\x37\xcf\xce\x4d\x21\x1b\x97\x86\x0e\x5b\x9c\x41\x29\x69\x5d\xff\x4e\x73\xb3\xc9\x3e\x2f\x1f\xa6\x3f\x5f\xac\x90\x1a\xb3\xd2\x7c\x2c\x5f\x55\x56\xa2\x46\x2b\xc8\xd8\x6c\xab\xea\x52\xea\x2a\x2b\x04\x09\x65\x44\x81\x36\xfd\xd6\xfe\x54\x9f\x4c\x71\x58\x18\x4d\xb8\xa7\x71\x06\xd3\xa6\xe1\xdc\x8f\x86\xd0\x5e\x28\x89\x9a\x2a\x90\x9a\xd0\xae\x44\x8e\xe0\x38\x73\xce\x0a\x5d\x22\xdc\x54\x68\x77\x32\x47\x98\xcd\xe1\x26\xbd\x0f\x7f\xaa\x76\x06\x63\x4b\x24\xe7\x3a\x44\xfa\x5d\x6c\xb0\x69\xc2\xb4\x51\x02\xce\x95\xe6\xc1\xb3\x1c\x01\x0b\xa1\xd4\x97\x8e\xc4\x0f\x70\x0e\x75\xd1\xce\xea\x14\xdd\x0a\x12\x51\x34\x54\x64\xeb\x9c\xce\xc4\x84\xb5\x82\x96\x0e\x16\xa4\x38\x17\x9b\x51\x46\xe8\xc2\xa9\x1c\x0a\x5e\x50\x00\x0c\xb1\x17\x27\xf6\x68\xd7\x57\x3c\xb4\x3b\x04\x2d\xae\xe1\x7c\x27\xec\x30\x0e\xe6\xd7\xbf\xf7\x1f\xae\x6a\x9d\xc3\x12\x29\x76\x1e\x25\xad\x23\x76\x94\xd3\x1e\xf2\x50\x4e\x63\x7b\x02\x62\x2b\xbb\xcb\x9c\xdd\x29\xb9\x84\x7a\x87\x7a\xcc\xde\x9d\x0f\x3d\x1f\xdf\xe3\xdf\x0c\x72\x8b\x82\xf0\xb2\xeb\x15\xf7\x15\xa6\x21\x09\x11\x73\x3f\x18\x88\x64\xd2\xb7\x9c\x35\x9c\x33\x8b\x54\x5b\x7d\xdc\xc7\x5b\xf2\x4b\xa8\x1a\xc3\xf8\x41\x37\xcf\xca\x89\xbf\xdc\x7f\x97\x6b\x8d\xbf\xbe\xc7\x5b\xe7\xf3\x56\x71\x2f\xc0\x17\x7b\x5d\xe4\x38\xf9\x47\xca\xfc\x6d\xe2\x96\xd7\x41\x8e\x33\xb6\x42\xca\xd7\x33\xf0\x5a\x47\x2f\x78\xa8\xde\xb2\xff\xc0\xd7\x1a\x2b\x5a\xb6\x55\xcf\x3a\x7a\x7a\x1e\x00\x55\x5b\xa3\x2b\xec\x50\x13\x78\x7a\x46\x6b\x8d\x4d\xbc\x92\xfe\x99\xef\x3c\xe1\xc2\x14\xed\x53\x60\xcd\x84\x33\xf6\x47\x48\x9a\x81\x73\x45\x6d\x05\x49\xa3\x8f\x53\x1f\x85\xa4\xdb\x58\x6c\x3c\xd4\x3f\x99\xd3\x2d\x8f\xd1\xee\xa5\xee\xce\x9a\x4d\x34\x74\xc8\xe4\x04\xc6\xfd\xa7\xee\x38\xdb\x09\xe5\x4f\x97\xd3\x3e\x0d\x19\x18\x3c\x7f\xc2\x39\x93\x2b\xf0\xe0\xf9\x1c\xb4\x54\xed\x5a\xd1\x61\x2d\xd5\x59\xae\x76\x42\xa5\xa3\x3e\x8f\xcf\xcb\xdf\x00\x00\x00\xff\xff\xdf\x92\xbc\xf6\x5c\x05\x00\x00")

func templatesLoaders_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoaders_bodyGohtml,
		"templates/loaders_body.gohtml",
	)
}

func templatesLoaders_bodyGohtml() (*asset, error) {
	bytes, err := templatesLoaders_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loaders_body.gohtml", size: 1372, mode: os.FileMode(420), modTime: time.Unix(1558529830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoaders_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xc1\x4a\x04\x31\x0c\x86\xef\x79\x8a\x30\xec\x41\x17\x66\x0a\x1e\x17\x3c\x88\x88\x0a\x1e\x3c\xe8\x03\xc4\x69\xc8\x96\xed\xb6\xb5\xcd\x82\x12\xfa\xee\x42\x77\xc0\x53\xc2\xff\x7d\xff\x6f\x36\xa3\xdb\x4b\xd6\xdf\xc2\x07\x94\xa0\xc7\xcb\xd7\xb2\xe6\xb3\x7b\x7a\xfe\x98\x3f\x4f\x95\x42\x62\x27\xf9\x4e\xbe\xa3\x13\x4e\x5c\x49\x73\x75\x25\x5e\x24\xa4\xe6\x3c\x29\xc5\x4c\x9e\xeb\xf2\x36\x4e\x7b\x61\xf2\x8f\x39\x29\xff\xe8\xde\xe1\xdc\x3b\x40\xa1\xf5\x44\xc2\x78\x15\x1b\x40\x38\x97\x5c\x15\x6f\x60\x5a\xaf\xe6\x04\x60\x56\x29\x09\xe3\x6e\x83\x87\x7b\xdc\x2d\xaf\xe3\x6f\x63\x06\x11\xd1\x6c\xc3\xcb\x43\x0c\xd4\x7a\xc7\xe9\x3f\x7a\x27\x3d\xf6\x3e\x81\x19\x27\x3f\x2a\xb7\xf0\x17\x00\x00\xff\xff\x95\x1a\xd0\x59\xde\x00\x00\x00")

func templatesLoaders_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoaders_headGohtml,
		"templates/loaders_head.gohtml",
	)
}

func templatesLoaders_headGohtml() (*asset, error) {
	bytes, err := templatesLoaders_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/loaders_head.gohtml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1547632212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutput_object_fieldsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xcb\x6e\xdb\x30\x10\x3c\xd3\x5f\xc1\x1a\x41\x21\x05\x09\x05\xf4\x68\x20\x87\x20\xaf\x43\x8b\xc4\x48\xdc\xf6\x58\xd0\xd2\x8a\x66\x4d\x91\x32\x45\xa5\x4d\x09\xfe\x7b\xb1\x24\x65\x1b\x2e\xd0\x4b\x81\x9e\x2c\x73\x77\x76\x66\x67\x24\x7a\x7f\x49\xab\x73\x61\xdc\x5b\x0f\x0b\x2a\xa4\xdb\x8c\x6b\x56\x9b\xae\xba\x7b\x58\x5d\x7e\xde\x5a\x2e\x35\x54\xc2\x7c\x10\x3b\x55\x09\xd0\x60\xb9\x33\xb6\xea\xd5\x28\xa4\x1e\x2a\x61\x79\xbf\xd9\x29\xf6\x0c\xba\x01\x7b\x2f\x41\x35\xc3\x8d\xd1\x0e\x7e\xba\xf3\x8a\x5e\x86\x30\xf3\x9e\x5a\xae\x05\xd0\xb3\x16\xab\x74\x71\x45\xcf\xd8\xd3\xe8\xfa\xd1\x3d\xad\xbf\x43\xed\xd8\x2d\x77\xfc\x93\xe1\x7b\x7c\x84\x11\xef\x4f\xda\xbe\x70\x2b\xf9\x5a\xc1\x23\xef\x20\x04\x76\xdd\x34\xb1\xfd\xc6\xe8\x56\x8a\x62\xee\x7d\x22\x60\xa9\x3e\xbf\xa0\xef\xbd\x17\x3b\xb5\xdc\x8a\x10\x58\x6c\xf5\x33\x42\xb0\xba\x20\xe4\xcf\xf6\x19\x21\xb7\x30\xd4\x56\xf6\x4e\x1a\xbd\xa0\xf3\x78\xb4\x42\x57\x08\xf1\x3e\x2f\x9a\x14\x25\xb5\x58\x43\x34\xee\x13\x25\xe6\xc5\xf3\xa6\x21\xe0\x80\x67\x18\x8c\x7a\x85\x05\x6d\x47\x5d\x17\x3d\x3d\x18\x16\xcf\x97\xdc\xf2\x6e\x28\x69\x21\xb5\x03\xdb\xf2\x1a\x7c\xb8\xa0\x60\xad\xb1\x25\x45\xbd\xa4\xe7\x16\xb4\x43\xdb\x7a\xf6\x62\x46\x5b\x03\x2b\xce\xbd\x17\x06\xe9\x4f\xad\x7c\x88\xa7\x21\x94\x33\x84\xaa\x28\x73\x40\xac\xf7\xf9\x4f\xb2\xe3\x01\xdc\xc1\xf5\xe1\xde\x9a\x2e\x6b\x2f\x7a\x96\x9f\xd2\x08\xd9\xd2\x69\xca\xd5\x15\xd5\x52\x25\x51\xc4\x82\x1b\xad\xc6\x83\xac\x76\x60\x8f\xf0\xa3\x98\xe3\xd4\x3d\x42\x1b\x47\x5b\x33\xea\x86\x4a\x4d\xeb\x34\x96\xd1\x1b\xae\xd4\xd4\x82\x42\x32\xdf\x57\xe9\x36\x59\xcf\xbc\x44\x8e\x10\x05\x78\x2f\xdb\x6c\x28\xfb\x08\x6f\x31\xc7\x17\x25\x6b\xc0\x77\x84\x10\xb7\x19\xf5\x16\x17\x9c\x06\xee\x73\x3d\xec\x97\x12\x4e\xcf\x0c\x7f\xae\x95\x5a\x21\xae\x48\xde\x1e\x30\x8f\xc6\x76\x5c\xc9\x5f\xd0\x2c\x63\x65\x22\x4c\x13\x92\x23\x79\xf3\x18\xe7\xdf\x72\x23\xaf\xdc\x66\x55\x77\xd1\xa0\x54\x9d\x65\xfb\x86\x51\xb9\x08\x88\xf1\xc4\x35\x8a\x44\x40\x5a\x63\xe9\xb7\x58\xc3\x52\xfa\x78\x62\x63\x9a\x8b\x99\x60\xed\xdd\x71\x1e\x53\xd8\x99\x0a\x03\xef\x46\xe5\x64\xe4\x4c\x99\x5f\xf7\x3d\xe8\xa6\x38\xee\x8b\x24\x65\x1a\x10\xed\xcc\xa6\x4f\x4b\x4e\x32\x8f\x31\x31\x9a\x0b\xa4\x4e\xf1\x80\x1a\xfe\x25\x8b\xff\x10\x44\x6e\x9c\x3c\x3e\xd5\xaf\x9b\x28\x1f\xbf\xd6\x50\xe2\x75\x05\xba\xc1\x2b\xe8\x77\x00\x00\x00\xff\xff\x45\xf6\x7b\xaf\x19\x05\x00\x00")

func templatesOutput_object_fieldsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutput_object_fieldsGohtml,
		"templates/output_object_fields.gohtml",
	)
}

func templatesOutput_object_fieldsGohtml() (*asset, error) {
	bytes, err := templatesOutput_object_fieldsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output_object_fields.gohtml", size: 1305, mode: os.FileMode(420), modTime: time.Unix(1548935420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/loaders_body.gohtml": templatesLoaders_bodyGohtml,
	"templates/loaders_head.gohtml": templatesLoaders_headGohtml,
	"templates/output_object_fields.gohtml": templatesOutput_object_fieldsGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"loaders_body.gohtml": &bintree{templatesLoaders_bodyGohtml, map[string]*bintree{}},
		"loaders_head.gohtml": &bintree{templatesLoaders_headGohtml, map[string]*bintree{}},
		"output_object_fields.gohtml": &bintree{templatesOutput_object_fieldsGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

