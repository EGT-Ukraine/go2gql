// Code generated by go-bindata.
// sources:
// generator/plugins/graphql/templates/schemas_body.gohtml
// generator/plugins/graphql/templates/schemas_head.gohtml
// generator/plugins/graphql/templates/types_body.gohtml
// generator/plugins/graphql/templates/types_head.gohtml
// generator/plugins/graphql/templates/types_service.gohtml
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSchemas_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcb\x6e\xdb\x3a\x10\x5d\xcb\x5f\x31\x10\x8c\x7b\xed\x42\xd1\x07\x18\xf0\xca\x48\xd3\x2e\x9a\x47\x93\x5d\x51\x14\x8a\x3c\x72\xd8\xd2\x54\x4a\xd1\x09\x82\x01\xff\xbd\x20\x87\x94\x68\xcb\x76\xb3\xa9\x56\xf2\xbc\xce\x99\x39\xa3\xb1\x79\x7b\x46\x20\x9a\x96\xf7\xf5\x13\x6e\xab\xeb\x6a\x8b\xd6\xf2\xfb\x4a\x0a\x54\xa6\x83\xce\xe8\x5d\x6d\x80\x26\x19\x11\xe8\x4a\x6d\x10\xa6\x1d\xea\x17\x51\x23\x2c\x96\x30\x2d\xef\xf9\x47\x07\x17\xd6\x4e\xb2\x8c\x28\xba\x4b\x2e\xc7\x85\x80\x68\xd3\x3e\x38\xb8\xde\xcd\x8e\x2b\x6f\x75\xa9\x44\x80\x6a\xed\xcb\xd8\x49\xb3\x53\x35\x5c\xa1\x39\x4e\x6e\x56\xcb\xee\x3c\xef\x02\xc4\x13\x7c\x20\x12\xca\xa0\xae\xf1\xd9\xb4\xba\xbb\xfd\xb5\xb1\xb6\xfc\x3c\x58\x3e\x55\x6a\x2d\x51\x13\x5d\x80\x68\x60\x5a\x3e\xe8\xaa\x46\x7d\xa9\xaa\x47\x89\x9e\x48\x01\x46\x03\x91\xf1\x76\x4e\xe7\x18\x97\x12\xc8\xce\x61\x46\xb4\xf9\x2d\xd9\xcd\x24\x0a\x40\xad\x5b\x3d\x7f\xff\xd8\x44\x03\xb5\xec\xca\x53\xd3\x5b\x2e\x41\x09\xe9\xca\x65\x99\x46\xb3\xd3\x0a\x46\xa0\x64\x0b\x20\xf2\xc0\xa1\xd5\x4b\xf7\xde\xcc\xf2\x80\x05\x75\x94\xe2\x00\x04\xea\x4a\xfd\x6f\xe0\x11\x3d\x88\x12\x32\x9f\x4f\xb2\x6c\x5f\x92\x77\xf6\xf1\x52\xe9\x71\xfd\xbb\x1d\xea\xb7\x8f\x02\xe5\xba\x83\x25\x10\x05\xef\xaa\x55\xbc\x5d\xad\x86\xdc\xc7\xe4\x43\xf1\xa9\xb5\xb3\x33\x13\x71\xfa\x9e\xd7\x2d\x95\x28\x10\xfb\xe1\xd1\x4f\x93\x9b\x40\x78\x8e\x76\xf1\x65\x67\x2a\x23\x5a\xf5\x97\x46\x62\xd8\x3f\xeb\x25\x25\x79\xb4\xa3\x7d\xa2\xa7\x54\x6c\x1f\x7f\x62\x6d\x58\xc4\x1b\xff\x7e\xa0\x21\x07\xc4\x15\x59\xa6\x0b\x77\x8d\xaf\x9c\x92\xae\x3e\x5b\x56\xad\x6a\xc4\xc6\x2f\xaa\xcb\x5c\x40\x7e\x58\x2a\x2f\x9c\x93\xc8\xf5\xab\x7a\x22\xe5\xdd\xae\x35\xb8\x5e\xb5\xdb\xad\xdb\xd1\x3c\x0f\x64\xb2\x2c\x98\x16\x09\xa7\xbd\x58\x6b\x63\xc1\xbe\xcb\x2c\xe3\xde\x17\x29\x69\x36\x79\x66\x01\x5d\xa2\xea\xe1\x83\xaa\x11\x34\x19\x54\x23\xd7\x7e\x4a\x27\x02\x43\x2d\x17\x16\x3f\x06\xef\x84\x33\x8f\x9b\x89\x8b\x0f\x03\xf1\xad\x25\xf9\xc1\x3e\xf4\xeb\x4e\x24\xdb\x18\xfd\xdb\x41\x81\xef\xc5\xc0\x05\x65\x87\x09\xbb\x6c\x84\xf5\xdf\xe1\x4c\x28\x86\x26\x8a\x25\x19\x45\xef\x76\x34\x7a\xae\x37\xa9\xa6\x43\xcc\x57\xec\x5a\xf9\x82\x0b\x70\x17\x7c\xf6\x9c\x0a\x10\x5c\xb7\x95\xae\xb6\xdd\x1c\x66\xfe\x36\x37\x55\x8d\xee\x72\x0d\x07\x33\x3e\xe1\xce\xf1\x97\x45\xd6\x05\x29\x21\x7b\xff\x80\x69\xd3\xee\x87\x15\x18\xfd\x1e\x0d\x27\x57\x2d\xcf\xf3\xdc\x54\xc2\x4c\xfa\xd0\x08\x16\x87\x31\x5c\x61\xa3\x85\xda\x04\x77\xe0\xb4\xcf\xc0\x1b\xdd\x35\x4a\xcd\xe3\x73\x7e\x8d\xaf\xe1\x6f\x6e\x74\xe3\x87\xaf\xcb\x9f\x2d\x2f\x46\xe9\x5f\x59\x0e\x56\x22\x6c\x64\x19\x0f\x01\xfb\x22\x8b\x68\xe5\xe4\xfd\x98\x3e\xbf\xa7\x67\xe7\x13\xfb\x27\x00\x00\xff\xff\xd4\xd1\x4a\x44\x27\x08\x00\x00")

func templatesSchemas_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_bodyGohtml,
		"templates/schemas_body.gohtml",
	)
}

func templatesSchemas_bodyGohtml() (*asset, error) {
	bytes, err := templatesSchemas_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_body.gohtml", size: 2087, mode: os.FileMode(436), modTime: time.Unix(1540998061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemas_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesSchemas_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_headGohtml,
		"templates/schemas_head.gohtml",
	)
}

func templatesSchemas_headGohtml() (*asset, error) {
	bytes, err := templatesSchemas_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_head.gohtml", size: 191, mode: os.FileMode(436), modTime: time.Unix(1539090323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xe3\xb8\x11\x7f\x96\xfe\x8a\xa9\xba\x5d\x48\x07\x55\xe9\xb3\x0f\x7e\x58\xa4\x9b\xc3\xe1\xba\x1f\xed\x06\x77\x0f\xb9\x20\xc7\x95\x29\x87\x95\x4c\xe9\x28\x59\x49\x20\xe8\x7f\x2f\x38\x24\x25\xea\xcb\x76\xb6\x4e\xbb\x2d\xd6\x0f\x41\x4c\x0d\x67\x86\xbf\xf9\x10\x67\xc6\x17\x17\xf0\x96\xef\x77\xa5\xdb\x34\x82\xf0\x2d\x85\x57\x94\xef\x77\xb0\x5a\x43\x74\xc5\x32\x1a\xe1\x43\xf8\x73\xdb\xba\x4e\x4d\x04\x34\x0d\x3e\x8f\x7e\x26\x82\x91\xcf\x19\x7d\x4f\x76\xb4\x6d\x61\x0d\x4d\xb3\xfd\x3d\xfb\x98\x6e\xdb\x36\x7a\x4f\x1f\xe4\x2e\xdf\x5a\x92\xdf\x2f\x73\x9e\xb0\x6d\xe3\x3a\x8e\xdc\xb4\x02\xfd\xf1\x0c\xcb\x1f\x04\x29\xee\xff\xfe\x37\xc5\xd1\x0b\x5d\xc7\x69\x1a\x60\x89\x52\x28\xba\xcc\x77\x3b\xca\x2b\xa5\x89\xe3\xfc\x95\x96\xb1\x60\x45\xc5\x72\xbe\xea\x94\xd2\x34\x6d\xab\x37\x53\xbe\xd1\xf4\x3f\x93\x6c\x4f\xcb\x15\x8c\x54\xc2\x65\xa5\xd7\x3b\x52\x34\x2e\x58\x9f\x0e\x8f\x5a\x12\x49\x40\xcc\xc9\x25\x2b\xa3\x87\x23\xd5\x47\x8a\x48\x2b\xbe\x82\xd7\xcb\x52\x1a\xdc\xa3\xd4\x41\xbd\xd5\x56\xfc\xae\xd4\x76\xcc\xb1\xb9\x11\xdd\x1d\xfd\x37\xcf\xfb\xad\x93\x3b\x85\x60\x40\x6c\x33\xeb\x61\x70\x1c\xb5\xdc\x34\xfd\x9a\x5c\x69\x03\xb7\x5f\x72\xdd\x8b\x0b\xf8\x91\x17\xfb\x0a\xf2\xcf\xff\xa4\x71\xe5\x36\x0d\x68\x2c\xd4\x42\xef\x1d\x48\xf6\x01\x17\x87\x4e\xa2\x08\x8f\xb9\x89\xb5\xdd\xf6\x16\x6b\xd9\xc0\x66\xac\xa2\x5c\xc7\xeb\x25\x8c\xbd\xc6\x10\x5e\x31\x9a\x6d\x86\x16\x9f\xb0\x45\x1a\x69\xf8\x56\xed\x6b\x03\xd7\x49\xf6\x3c\x06\xc6\x59\xe5\x07\x0d\x7a\x91\x3e\x79\x22\x69\xd1\x0b\xb4\x60\x25\xc0\x00\xbb\x74\x64\x4d\xe6\x07\x37\x52\x67\x64\x62\x1c\xe5\x16\xd6\x03\x57\xb1\xd4\xc3\x4d\xcd\x47\xc1\x6a\x52\xd1\xfe\xc8\x83\xed\x21\x5c\x3f\x15\xe8\x44\x31\xc9\x32\xad\x60\x24\xd7\xe0\x55\x8b\x4a\x59\x56\x6e\x5d\xcb\x0f\xc6\xf6\x2d\x41\xd0\x32\xcf\x6a\x2a\x4a\xcb\xd4\x66\x6d\xd6\xd8\xff\x30\x1b\x90\x21\x62\xd6\x34\xdd\x96\xe8\x6a\xcf\x63\xe9\x97\x4a\x55\x5f\xc7\x71\x74\x2d\x48\x4c\xc5\x5b\x2e\xe1\xd9\x40\xdb\x42\x25\x7d\xa5\xc2\x55\x85\x81\xa2\x08\x01\x55\x6f\xdb\xb8\x7a\x94\xe7\xab\x1e\xd5\xd3\xcb\x9c\x57\xf4\xb1\x0a\x81\x01\xe3\x15\x15\x09\x89\x69\xd3\x06\xe0\xdf\x49\x33\xe7\xea\xec\x9d\x12\x1f\xf6\x55\xb1\xaf\x7e\xc0\xe5\xb6\x0d\x41\x50\x21\x80\x0a\x91\x0b\x69\xd9\x79\x9d\x94\x35\xcb\x82\x70\x79\xec\x4a\x44\x97\x82\x92\x8a\x5e\xde\xb3\x6c\xf3\xa9\x20\xfc\x4a\xe4\x3b\xad\x85\x1f\x57\x8f\x21\x9a\x65\xe1\xd8\x5e\xe0\x3a\xce\x86\x26\x54\x80\x64\x18\x5d\x31\xce\xca\x7b\xbf\x5f\x95\xb0\x29\x2f\x73\x58\x02\x85\x54\x6f\xb5\x06\x41\xe3\xbc\xa6\xc2\x0f\xbe\x57\x4b\x7f\x58\x03\x67\x19\xa8\xcc\x81\x8c\x3e\xd1\xea\x9a\x6c\x7d\x0f\xcf\xe2\x85\xe0\x55\x62\x4f\xbd\x60\xb8\x7e\xb7\xa3\x65\x49\xb6\xd4\x0b\x91\xcd\xf8\x69\x59\x91\x38\xf5\x42\x28\x2b\xc1\xf8\xd6\x6f\x9a\x0d\xfd\xbc\xdf\x2a\x98\x3f\xc9\x67\x7e\x10\x48\x4d\x9d\x56\xab\x27\xce\xa3\x8b\x64\x13\xbd\x95\x8b\x7e\xcf\xbf\x95\xa0\x58\xde\xca\x12\x60\xb0\xee\x65\x09\x5a\xed\x05\x97\x5f\x43\xf9\x47\xba\xb3\x43\xc4\xb6\x94\x70\xb1\xc8\xdf\x91\xe2\x46\x9d\xe3\xd6\x76\x0b\xd7\xb9\x83\x35\x48\x3a\x95\x95\x04\x2d\xf7\x59\x05\x6b\xe0\xf4\xc1\x37\xfe\x72\x95\x8b\xf7\xf4\x61\xd1\x6b\x50\x2f\x98\xa4\x80\xde\xe2\x76\x12\xd0\x2e\xa5\x02\xf1\xc7\x52\xfa\xca\x1b\xa9\xa5\x4e\x11\x2c\x41\x65\xac\x44\xa0\x73\x17\xc6\x15\x72\xea\x32\x83\x05\xf4\x30\x81\x2b\x19\xac\x7c\x23\x04\x79\x32\xb2\x94\xb6\x5d\x8e\x67\xe8\xbc\xa7\xca\x8a\xfc\x9b\x11\x6c\x8e\x44\x5c\x62\x15\x75\xbb\x15\x2a\xd6\x3e\x58\xc3\x8e\xa4\xd4\xef\xe3\xce\x56\x45\x86\x5b\x46\xb9\xcf\xb8\x32\xb2\x93\xe4\x02\x58\x08\x35\xc9\xd0\xc5\x11\x4f\xc6\xb5\x23\x0d\x81\x33\xa9\xe5\x17\x56\xdd\xa3\xa3\x40\xf7\xc6\xab\x43\xd0\x41\x32\x4c\x7a\xf8\xfa\x34\xfb\xc0\xab\x49\xe6\xc9\x1c\xa8\x77\xb1\x04\x26\xbe\xeb\x0c\x9d\xaa\x69\xd0\x4f\x4b\xe5\xff\xbf\x08\x52\xf8\x54\x88\x10\xbc\x84\x30\x99\x16\xaa\xdc\xa4\x48\x60\x56\xe2\x04\x14\xef\x05\x9a\xa5\x11\x78\x14\xbc\x1b\x26\x73\x7f\xdd\xbf\xa0\xb3\x92\x5a\x2f\xf6\x13\xf7\x3f\x03\x83\xf1\x25\xc0\x9d\x91\x7b\xc4\x08\x9d\x7a\xa7\x19\xc1\x8f\x73\x1e\x93\x0a\x3c\x74\xc3\x5f\x3d\x0f\x0e\xf9\x21\x78\xbf\x7a\xb7\x5e\xd0\x2b\x3c\x6f\xb3\xb3\x9b\x4c\x4b\x3b\xc5\xdb\x6b\x77\xd6\x58\xa7\x6c\x7d\x39\x9c\x26\xb9\xa1\xff\x76\x24\x19\xb5\xa3\xcc\x32\xfc\xdf\xdc\xf6\x38\xcd\x93\x61\xc2\xfb\xc0\xe9\x87\x64\x94\xf5\x34\x35\xe3\x1b\xfa\x18\x0e\x6e\x4a\x72\xff\xe4\xa2\x24\x6d\xfb\xbb\x26\x87\xbf\x58\xd9\xf1\x58\xae\xba\x0b\x21\x4f\x9f\x93\xda\xbe\x97\xf4\xaf\x5f\x1f\x67\xdc\x3b\x1a\x8c\x3e\x27\x44\xc5\x78\x8b\xfc\x3c\x2f\x48\x0e\x9b\xfc\x4e\x1b\x7c\x4e\xce\x38\x4e\xe6\x68\xe4\xe7\x0b\x23\x27\x97\xd6\x1e\x44\xce\x51\x2c\xbd\x60\x56\x89\xa9\xfa\x76\x28\xcd\x42\xf8\xb2\xe8\xf5\xd7\x8d\x83\x26\x7f\x53\x96\x6c\xcb\x19\xdf\x4a\x9c\x0a\xba\x6c\xf1\x3e\x11\x28\xaf\x3f\x9e\x08\x26\xac\xbd\xda\x5b\x50\xf5\x30\x52\xa7\x88\xae\x67\xb9\xf6\xb9\xa3\x6d\x1a\x23\x43\x09\xfb\x16\x8f\xdf\xe2\x71\x08\xe1\xb7\x78\x3c\x11\xa9\x73\xc5\xa3\x29\xd7\x75\x25\xaf\x5e\xcd\xea\x1f\xd7\xdc\x85\x94\x2c\x55\x16\x0d\x8a\xfc\x8b\x0b\x50\x72\x4d\x91\x3f\xdb\xc5\x79\xa5\x2a\x7b\x45\xf9\xe5\x7d\x9c\x69\x0b\x67\xd8\xbd\x31\x2d\xbf\x03\x7d\x1b\xc7\x99\xe9\xd8\xa8\xa5\x46\xb7\xa8\xa6\xbd\x99\x69\x65\xf6\xbc\xe6\xcc\x9b\xcd\x06\x29\x95\x9e\xfe\x4c\x8f\xe5\xf5\x58\x1b\x75\x17\x5d\xea\xc9\xe0\xc3\x43\x7d\x19\x45\xa1\x63\x66\xa5\x5a\x00\x85\x7d\x64\xfd\xe8\x23\x11\x64\x57\x06\xe0\x5b\xa5\x59\xa8\xbb\x17\x56\x5e\x71\xf0\x4f\xf9\xc0\xaa\xf8\x1e\x4a\x11\x4b\x0c\x8a\xe8\x53\xbe\x17\x31\x8d\xfc\xea\xa9\xa0\x81\xb9\x3c\xc7\xa4\xa4\xf0\x5d\x5f\xaf\x19\x3b\xe8\x82\x6d\x65\xea\x22\x96\x20\xa3\xf5\xa8\x5c\x9a\x16\xe1\xc3\xa2\xc7\xc1\x6a\xfc\xbb\x52\xc4\x66\x01\x6f\x7a\x06\x1f\x4a\x37\x97\xa4\xac\xac\x2a\xa7\xe3\xd8\x81\x28\x09\xae\x73\xec\x17\x4d\xb2\x0c\x78\x25\x06\x63\x30\x10\xde\xbf\xb4\xa6\x4c\x17\x59\x8c\x38\x0c\x2a\x23\x0d\xd3\x71\x94\xce\x7d\x38\x11\x9f\xe1\x78\x9a\xc9\x98\x87\x7d\xbe\xae\x6c\x59\x7a\xff\xbc\xa7\x0f\xbe\x57\xa2\x03\x41\x9e\xc0\x9e\xa7\x3c\x7f\xe0\x20\x5d\x49\x57\x4d\xca\x87\xb1\x51\x30\xae\x38\x96\xc2\xf1\x1d\x29\xbe\x45\xe4\x7f\x2e\x22\xe7\x5e\x4a\xe6\x33\x09\x53\xdd\x1a\x83\x9b\xdb\xf9\x3e\x9a\xa1\x4b\x72\x01\x29\x7d\xc2\x26\x8e\x9a\x87\x28\x6b\x1f\x88\xb4\x81\xae\x25\xac\x41\xbe\x57\xf9\xc6\x17\xb4\x0c\x61\x5e\x5a\xbf\xc3\xf1\x52\xfa\xe4\xad\x00\x50\xaa\xb5\x8c\xf2\xbd\x95\xd2\xa3\x7f\xd0\x06\x93\x94\xd4\xbf\x23\x6d\x80\x4e\x8c\xf0\x97\xc1\x45\x87\xe8\x57\x89\xcc\xcb\xe5\x86\xf1\xcd\xe4\x1d\x29\xca\x41\x5b\x66\xfe\x76\xa2\x2e\x27\xef\x48\xf1\xff\x31\x66\xba\xbe\xdf\xf3\xd4\x57\x5d\xff\x93\x36\x8c\x0a\x88\x2e\xf7\x9f\x30\xd1\x72\x2d\x3f\x39\x34\x64\xd2\x07\x1f\x26\x48\x7d\xe6\x9f\xe8\x93\xa2\xec\x86\x4a\xea\xdc\x8e\x51\xa8\x73\xb8\x2f\x95\x80\x51\x31\x2b\xc3\x7c\xfa\x64\xd6\x06\xdd\x90\xee\x98\x33\x9d\x38\xcf\x1a\x3a\xd6\x70\xa4\xe5\x7c\x05\x33\x2d\x99\x07\x66\xe6\x5a\x3f\xd1\x27\x93\xac\x6e\x67\x1e\x23\xa6\x4b\x53\xaf\x83\x63\xaf\x73\xce\xbd\x16\x06\x5f\xd3\xc9\xd7\xc9\xa3\xaf\xff\xc2\xec\x4b\x67\xc4\xd9\xe9\xd7\x99\xc6\x5f\x4a\x04\x0e\xc0\x06\x57\xb5\xf1\x08\x6c\xe6\x65\x8f\x64\x5c\xcf\xc0\x26\x33\x1c\x3d\xed\x5a\xe9\x39\xcd\x19\x7c\x49\x72\xd5\x73\x1c\x36\x3b\xc8\xb9\x83\x35\x30\x17\x5f\x9d\xf8\x54\x52\x1d\x98\xce\x39\x4e\x1a\xaa\xae\x42\x4d\xb2\x1b\xcc\x55\xb7\xa1\xfa\x5f\xe5\x95\x5b\x64\x1a\x82\xe4\x9b\x86\x75\xd7\x3d\x1e\xa8\xbf\x3c\xa9\x48\xd3\x49\xd3\x67\x6e\x23\x78\x69\x3f\x29\x99\x9d\x3b\x1c\x6e\xd6\x24\x8b\xdd\x9a\x3f\xfe\x69\x23\x63\x18\x68\x46\xf1\xf7\x1b\xf2\x84\x21\xb0\xc0\x9e\xc1\x0c\x2e\xf8\x69\xfa\x1c\x65\x07\x37\xfb\x11\x30\x83\xce\xcc\x14\x9a\x7a\xda\x0f\x9b\xdf\xda\xf5\x40\x5e\x1c\x1c\x65\xf2\x83\xf0\xd4\xf5\xf3\x14\x1e\x00\xa4\xe2\xe1\x26\x4d\x6f\xd7\x75\xad\xa3\x67\xa6\x87\x32\xfd\xa5\x04\xbe\x5e\xf2\xe3\xad\x94\xee\x9d\xf2\x15\x34\x53\x4c\x2d\xb2\xdc\x52\xe9\x7f\xf8\x33\xed\xaa\x9c\x58\x9a\x29\x77\x9e\x2f\xc7\xb4\x86\x48\xe2\x4e\x0a\xb0\xa5\xfb\x05\x92\xfe\xdb\x95\x18\x26\xe7\x71\xe1\x75\x20\x0b\xcd\xd7\x57\x73\xc5\x55\xeb\x5a\x4f\x4a\x11\x77\x49\x4b\x13\xe0\x01\xf4\xe5\xf7\x44\x10\x8d\xdb\x1f\x84\x51\x13\x2d\x02\x39\x73\x8d\xfa\xdf\x83\x52\xe7\xfc\x29\x98\xad\xf5\xdb\xb4\x7f\x05\x00\x00\xff\xff\xf8\x1d\xb3\x01\xae\x28\x00\x00")

func templatesTypes_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_bodyGohtml,
		"templates/types_body.gohtml",
	)
}

func templatesTypes_bodyGohtml() (*asset, error) {
	bytes, err := templatesTypes_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_body.gohtml", size: 10414, mode: os.FileMode(436), modTime: time.Unix(1541001297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesTypes_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_headGohtml,
		"templates/types_head.gohtml",
	)
}

func templatesTypes_headGohtml() (*asset, error) {
	bytes, err := templatesTypes_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_head.gohtml", size: 191, mode: os.FileMode(436), modTime: time.Unix(1539090323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_serviceGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\xb8\x0a\x59\x21\x0d\xaa\x7e\x80\x81\x3c\x64\x46\xd2\x05\xe8\xb2\x2c\x09\xd0\xc7\x82\x91\x4e\x12\x11\x99\x94\x4f\x74\x9a\x80\xe0\x7f\x1f\x48\x51\xae\x6c\x4b\xb2\xbc\x76\x45\xf9\x16\x91\x3c\x7e\xf7\xdd\xdd\x77\xe7\xe4\x1b\x91\xc2\x47\x54\x5a\x27\x0f\x48\x2f\x3c\xc5\xe4\x96\xad\xd0\x18\xff\x97\xd6\xc9\x35\xc7\x2a\x7b\x7c\xab\xd1\x98\xbf\x50\x95\x32\x6b\xc2\x14\xb4\x2e\xa4\xfd\x06\xdb\x6b\x4b\x56\x55\x37\x42\x21\xe5\x2c\x45\x63\x62\xe0\x25\xfc\xae\x35\xb7\x9f\x52\xac\x95\xa4\xe6\xee\xb9\x30\x26\xb9\xf9\xf6\xe5\x4f\x26\xb2\x0a\x09\xb4\x06\x9e\xc3\x79\xf2\x48\x2c\x45\xba\x12\xec\xa9\xc2\x0c\x8c\x81\x58\xd9\x4d\xe5\x3e\xb7\xb7\xdb\x23\xa0\x35\x8a\xcc\x98\xc8\x02\x59\x57\xed\x96\x03\xda\x80\x3e\x03\x00\x6f\xb2\x43\xe7\x81\xc3\x07\x63\xdc\xae\x5d\x84\x6a\x43\xe2\xd0\x80\xde\x9e\x68\xed\x10\x13\x05\xc2\xf9\xca\x99\x80\xc5\xc5\xa4\xd1\x6e\x05\x5a\xfb\x1b\x9e\xcf\x60\x01\xef\xf7\x9f\xd2\x07\xd7\xec\xb2\xe7\x17\x03\x06\xe2\xc1\xd3\x36\x08\x0b\xd0\x3a\x65\x55\xd5\x81\x4c\x3e\x12\xab\xcb\x7f\x3e\xfd\xbd\x51\xf5\x46\xb9\x30\x9d\x27\x7f\xc8\xec\x6d\x29\x85\xc2\x57\x65\xcc\xb0\x2d\x1f\x06\x6f\xe4\x92\x8a\xcd\x0a\x85\x1a\x76\xb0\x5b\x97\x54\x34\x8b\x03\x12\x97\x52\xe4\xbc\xe8\x2c\x0c\xfb\xd9\x7b\xd5\x53\xcc\xa8\xb0\xfc\x9e\x06\xa0\xcf\x38\xa3\x62\x98\xee\xce\x54\x8b\x4b\xef\x92\x66\x6f\x0d\x91\x34\xc2\x52\x0f\x37\x8a\x6c\x12\xdb\x38\xcf\x53\x37\xef\xb1\x91\xd5\x0b\x2e\xc0\x16\x67\x58\xf7\xc9\xf5\x5b\x77\x8c\xd8\xaa\x89\x20\xfc\x02\xbc\x2b\x39\x6d\x62\x20\x24\x02\x24\x92\x14\xc1\x38\xe9\xa9\x7a\xb5\x34\xd7\x89\xf7\x74\xf4\xe0\x17\xb8\xb0\x87\x47\xf7\x87\xcb\xf6\x58\xb0\x9a\x9a\x09\xfb\xbe\xa2\x64\x49\xc8\x14\x2e\x4b\x5e\x65\x0f\x35\x13\xd7\x24\x57\x1e\x53\xb8\x45\x17\xbb\xc8\xee\xa9\x53\xb2\x5f\x1d\x1d\x69\x14\x44\x93\x8f\x67\x98\x23\x39\x08\xc9\x35\x17\xbc\x29\xc3\xe9\xf3\x5b\x18\x70\x01\x5a\xcb\x1a\x85\x15\x23\x2e\x8a\x36\x1e\x7e\xf3\x33\x57\xa5\x75\x20\x4c\xd5\x6b\xec\xac\xcf\x41\xe1\xc2\x1b\x4d\x17\x87\x5d\x3c\x6f\x03\xfb\xee\x02\x04\xaf\x26\x02\xdb\x5f\xce\xc5\x07\x54\x8f\xac\x08\x03\x97\x12\x41\x0c\x8a\x36\x18\x25\x9f\x64\xd1\x2a\x5d\xa8\x75\x25\xbd\x27\x57\xf6\x48\x68\xdf\x89\xa6\xb1\xdb\x35\x1d\x60\x33\xc1\xa9\xd3\xed\xc9\x14\xe1\xb9\xed\x1c\x17\x73\x7c\xdd\xd5\xab\x7b\x5c\x6f\xb0\x51\x5d\x22\xcc\x12\x0d\xc2\x75\x6c\x0b\xc6\xe6\xe3\x9e\x86\xee\x9b\x0b\x6a\xab\x22\x4d\xb0\xaf\x12\x5a\x7f\xb0\x28\x84\x54\x63\x57\x6d\x76\x5c\x91\x03\x14\xb7\xd5\x19\x0a\x5e\x45\xbe\x85\xcd\x09\xff\xc9\xd1\xf7\xbd\x4d\xf0\xca\xbd\xf8\x9d\x01\x85\x7e\xb7\xdc\x21\x69\x59\x71\x14\xaa\x6d\x84\x76\x00\xb0\x3c\xa5\x01\x04\x84\xeb\x03\xa2\x8e\x8a\x69\xd5\xe0\xdc\xa0\xd9\x78\x09\xfc\x1a\x76\x63\xc8\xb5\xa4\x5b\xfc\xba\x1f\x80\x76\x68\x39\x9e\xce\x3f\xc1\xb7\x63\x8d\x62\xbc\x1c\xbc\x5a\xbf\x1f\x1a\xa5\xfc\xfb\xd3\x39\xe1\x95\x73\x31\xa4\xa3\x23\x43\x45\xb7\x5a\xe7\xe7\x0f\x23\xdd\x6a\xfb\xd3\x02\xea\xf1\x63\xe3\x1e\xf7\x6b\x92\x97\x5d\xcb\xb3\xb5\x17\x72\xa7\xaf\x4e\x37\x1d\x2f\x83\xf3\xe5\xb6\x6f\x08\x2b\xdb\x43\x27\x7a\x26\x6f\xc4\x8b\x7c\x46\x8a\x20\x24\x6c\x36\x95\xda\xed\xa7\xb3\xda\x29\xfc\x20\x25\x1a\xca\xc1\x5f\x42\x84\x4e\xab\xcd\x56\x78\xe6\xd6\x66\x6c\x35\xea\xbb\xab\x67\xbc\xc4\x4f\x11\xcf\xbe\x68\x6a\xed\x38\xf2\x09\xf3\x99\x58\x1d\x22\x51\x0c\x41\xce\xb8\x1d\x72\x94\x04\x6a\x99\x05\x66\x03\x32\x8e\x60\x2a\xd1\xdd\x7b\xbc\x74\xbf\x9d\x7c\x72\xbb\xec\x9f\x9b\xe1\x56\x09\x77\x12\x76\x34\xe5\xed\x0b\x6d\x35\xff\xa0\x8c\xa7\x18\xe4\xb3\x2d\x51\xc2\x75\xb2\x8d\xf5\x7f\x51\x60\x9e\xc3\x3b\xf9\x3c\xa3\xb1\x8d\xc7\xe7\xd6\xa5\x5b\xbe\x52\xed\x9f\x0f\x35\x71\xa1\xf2\x30\xb8\xef\x85\x08\x7a\xa4\x78\x53\x0d\x3c\xb1\xcc\x3a\x60\xa1\x82\x7a\xab\x31\xfc\xed\x31\x4a\xe0\xa1\x94\x9b\x2a\x83\x27\xf7\x1b\x61\xca\xb1\xc0\x85\xe0\xc8\xc0\x74\xac\xb8\x7a\xc2\x71\xc7\xde\x2a\xc9\x32\x37\x8b\x2d\x4b\x4c\x9f\x67\x8b\x47\x33\x36\xc6\x8c\x76\xb1\xd3\x7a\x18\xfc\x32\x83\x08\xcf\xf7\x5d\x1c\x62\x2d\x20\x6c\x02\x63\x66\xa2\xdc\x95\xef\xbe\xbd\xcb\x34\xc5\xa6\x91\xf3\xc2\xb0\x85\x98\xaa\xd7\x1d\x2b\x70\x10\x96\xc1\x37\x3c\xe8\xb9\x90\x67\x8b\xf2\x14\x2e\xc2\x66\xf6\x7b\x47\x64\xb8\x5b\xb3\xbb\x44\x97\xb6\x47\x0a\xe4\xd4\xe6\xf3\xff\x54\xc0\xf1\x5f\x2e\x23\x3a\x37\xf0\x4f\x80\xbd\x4f\x03\xdc\x9a\xb3\x11\xdf\xbf\x15\xd4\xd9\x2e\x2a\x73\xf6\x6f\x00\x00\x00\xff\xff\xd1\x90\x00\x53\xcc\x13\x00\x00")

func templatesTypes_serviceGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_serviceGohtml,
		"templates/types_service.gohtml",
	)
}

func templatesTypes_serviceGohtml() (*asset, error) {
	bytes, err := templatesTypes_serviceGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_service.gohtml", size: 5068, mode: os.FileMode(436), modTime: time.Unix(1541001707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/schemas_body.gohtml":  templatesSchemas_bodyGohtml,
	"templates/schemas_head.gohtml":  templatesSchemas_headGohtml,
	"templates/types_body.gohtml":    templatesTypes_bodyGohtml,
	"templates/types_head.gohtml":    templatesTypes_headGohtml,
	"templates/types_service.gohtml": templatesTypes_serviceGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"schemas_body.gohtml":  &bintree{templatesSchemas_bodyGohtml, map[string]*bintree{}},
		"schemas_head.gohtml":  &bintree{templatesSchemas_headGohtml, map[string]*bintree{}},
		"types_body.gohtml":    &bintree{templatesTypes_bodyGohtml, map[string]*bintree{}},
		"types_head.gohtml":    &bintree{templatesTypes_headGohtml, map[string]*bintree{}},
		"types_service.gohtml": &bintree{templatesTypes_serviceGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
