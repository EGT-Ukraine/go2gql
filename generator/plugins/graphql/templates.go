// Code generated by go-bindata.
// sources:
// generator/plugins/graphql/templates/schemas_body.gohtml
// generator/plugins/graphql/templates/schemas_head.gohtml
// generator/plugins/graphql/templates/types_body.gohtml
// generator/plugins/graphql/templates/types_head.gohtml
// generator/plugins/graphql/templates/types_service.gohtml
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSchemas_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x4d\x6f\x1a\x3d\x10\x3e\x2f\xbf\x62\xb4\x42\xef\x0b\x11\x59\xa4\x1e\x91\xb8\x14\xa5\x69\x0f\xcd\x47\x43\x4f\x55\x55\x99\x65\x76\x71\x63\x6c\xe2\xf5\x26\x8d\x46\xfe\xef\x95\x3f\xf6\x03\x28\x34\xb7\x72\x32\x33\xe3\x79\x9e\x99\x67\x3c\x4b\x74\x09\xd3\x8b\x52\x99\xd7\x1d\xce\xa0\xe4\x66\x53\xaf\xb2\x5c\x6d\xa7\x57\xd7\xcb\xcb\xaf\x8f\x9a\x71\x89\xd3\x52\xbd\x2b\x9f\xc4\xb4\x44\x89\x9a\x19\xa5\xa7\x3b\x51\x97\x5c\x56\xd3\x52\xb3\xdd\xe6\x49\x64\x0f\xf9\x06\xb7\xec\xbd\x5a\xbf\x2e\x94\x34\xf8\xcb\x5c\x4c\xe1\xd2\xda\x81\xcb\x0a\x44\xc3\x18\x70\xc3\xb6\x68\x6d\x38\x2f\x04\x47\x69\x2a\xa8\x8c\xae\x73\x03\x34\x48\x88\x40\x33\x59\x22\x0c\x2b\xd4\xcf\x3c\x47\x98\xcd\x61\x98\x3d\x84\x3f\x95\x4f\x98\x24\x44\x8d\x3b\x0b\xe9\x42\x22\x20\x2a\xd5\xd2\xc1\xb5\xee\xe0\xb8\xf6\x56\x77\x95\x08\x50\xae\x7d\x1a\x3b\x28\x6a\x99\xc3\x35\x9a\x3f\x93\x1b\xe5\xa2\x3a\xcf\x7b\x02\x7c\x03\x17\x44\x5c\x1a\xd4\x39\xee\x8c\xd2\xd5\xdd\x63\x69\x6d\xf6\xa9\xb3\x7c\x64\x72\x2d\x50\xbb\x1e\xf3\x02\x86\xd9\x52\xb3\x1c\xf5\x95\x64\x2b\x81\x9e\xc8\x04\x8c\x06\x22\xb5\x43\x69\x34\xcb\xb9\x2c\x43\x8e\x10\xe8\xee\x45\xc6\x63\x18\x11\x95\x4f\x22\xb8\x03\x93\x09\xa0\xd6\x4a\x8f\xdf\xde\x3b\x5e\x40\x2e\xaa\xec\x54\x0b\xe7\x73\x90\x5c\xb8\x74\x49\xa2\xd1\xd4\x5a\xc2\x11\x28\xd9\x09\x10\x79\xe0\x58\xef\x95\x3b\x17\xa3\x34\x62\x41\xde\xe8\x71\x00\x02\x39\x93\xff\x1b\x58\xa1\x07\x91\x5c\xa4\xe3\x41\x92\xec\xeb\xf2\xc6\x3a\x9e\x99\x3e\xce\x7f\x5f\xa3\x7e\xfd\xc0\x51\xac\x2b\x98\x03\x51\xf4\x2e\x94\x0c\x23\xa6\x34\xa4\x3e\x26\xed\x92\x0f\xad\x1d\x9d\xe9\x88\x13\xf9\xbc\x78\x7d\x89\x22\xb1\x1f\x1e\xfd\x34\xb9\x53\xfc\x3f\xd7\x86\x19\xae\xe4\x5f\x4a\x68\xc2\xfe\x45\x15\xfb\x14\x4f\x29\xa7\x56\x3f\x31\x37\x41\xb8\x5b\x7f\x3e\xd0\x2d\x04\x34\x63\x31\xef\x0f\xd9\x0d\xbe\x84\x2b\xfd\x71\x0f\x96\x85\x92\x05\x2f\xfd\x70\xba\x9b\x33\x48\x0f\x53\xa5\x13\xe7\x24\x72\x95\xca\x96\x48\x76\x5f\x2b\x83\xeb\x85\xda\x6e\xdd\x5c\xa6\x69\x24\x93\x24\xd1\x34\xeb\x71\xda\x8b\xb5\xb6\x49\xd8\x56\x99\x24\xa1\xf6\x59\x9f\x74\x30\x79\x66\x11\x5d\xa0\x6c\xe1\xa3\x9e\x0d\x68\xaf\x51\x85\x58\xfb\x2e\x9d\x08\x8c\xb9\x5c\x58\xf3\x00\x7a\xce\xc4\x95\xef\x5c\xb1\x76\x5f\x45\x2f\x34\xda\xbb\xd2\xdc\x1a\x0c\xb6\x00\xf4\xed\x20\xc1\xf7\x49\x07\x8b\xa2\x3a\x8f\xf5\xdf\x61\xf9\xd4\x84\xf6\xc4\xe9\xdd\x98\xb4\xee\xa5\xff\xd0\x44\xef\x6d\x5f\xbe\x2e\xe6\x0b\x56\x4a\x3c\xe3\x0c\xdc\x96\x1e\xed\xfa\xbd\x8e\xae\x3b\xa6\xd9\xb6\x1a\xc3\xc8\xef\xdf\x82\xe5\xe8\x16\x53\xb7\x0f\x9b\x5f\x5c\x63\xe1\xf9\x90\x75\x41\x92\x8b\xd6\xdf\x61\xda\x7e\xf5\x9d\xda\x47\xff\x8f\x9a\x93\x4a\x15\xfa\x79\xae\x2b\xb1\x27\x6d\x68\x03\xd6\x34\xa3\x5b\xb2\x46\x73\x59\x46\x77\xe4\xb4\xcf\xc0\x1b\xdd\x33\xed\x9b\x8f\xb7\xf5\x0d\xbe\xc4\x4f\xd9\xd1\x0a\xef\x1e\x92\xdf\x4a\x5e\x8c\xcc\x1f\x83\x1c\x41\x89\x38\x7c\x59\xf3\xe6\x83\xaf\x61\xd1\x58\xc3\xe5\xfd\x98\xf6\x7e\x4b\xcf\x8e\x07\xf6\x77\x00\x00\x00\xff\xff\x28\xf1\xcb\x5b\x69\x08\x00\x00")

func templatesSchemas_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_bodyGohtml,
		"templates/schemas_body.gohtml",
	)
}

func templatesSchemas_bodyGohtml() (*asset, error) {
	bytes, err := templatesSchemas_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_body.gohtml", size: 2153, mode: os.FileMode(420), modTime: time.Unix(1543324769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemas_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesSchemas_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_headGohtml,
		"templates/schemas_head.gohtml",
	)
}

func templatesSchemas_headGohtml() (*asset, error) {
	bytes, err := templatesSchemas_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1532510936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\x96\xfe\x8a\x39\x5d\x2f\x90\x02\xd5\x3e\xdc\xa3\x0f\x7e\xc8\xe5\x9a\xa2\xe8\x25\xe9\xdd\x65\xdb\x87\xd4\x48\x54\x99\x76\xb8\x92\x29\x85\xfa\x48\x0c\x41\xff\xfb\x82\x5f\x12\x25\x51\xb6\xd3\x4d\x8a\xee\x22\x7a\x08\x2c\x6a\x38\x33\xfc\xcd\x07\x39\xc3\x54\xd5\x5b\x98\x1e\xaf\x93\x7c\x9b\xa2\x19\xac\x71\x7e\x57\x7c\x9b\x84\xc9\x66\xfa\xee\xfd\xd5\xdb\x5f\x22\x1a\x60\x82\xa6\xeb\xe4\x1f\xeb\xfb\x78\xba\x46\x04\xd1\x20\x4f\xe8\x34\x8d\x8b\x35\x26\xd9\x74\x4d\x83\xf4\xee\x3e\x9e\xfc\x2b\x59\x6e\x4f\x13\x92\xa3\xc7\xfc\x78\x0a\x6f\xeb\xda\x9e\x4e\xe1\x1d\x29\x36\x99\x5d\x55\x34\x20\x6b\x04\x6f\x10\x29\x36\x30\x9b\xc3\xe4\x0c\xc7\x68\xc2\x3f\x72\x4a\xab\x0c\x28\x54\x15\xff\x3e\xf9\x1c\x50\x1c\x7c\x8b\xd1\x45\xb0\x41\x75\x0d\x73\xa8\xaa\xf5\x7d\xfc\x29\x5a\xd7\xf5\xe4\x02\x3d\xb0\x59\xae\x36\xc4\xde\x4f\x13\xb2\xc2\xeb\xca\xb6\x2c\x36\x69\x06\xf2\x71\x14\xcb\xf7\x4c\xc7\xff\xfe\x47\x70\x74\x7c\xdb\xb2\xaa\x0a\xf0\x4a\x28\x34\x39\x4d\x36\x1b\x44\x72\xa1\x89\x65\xfd\x1b\x65\x21\xc5\x69\x8e\x13\x32\x6b\x94\x92\x34\x75\x2d\x27\x23\xb2\x94\xf4\x9f\x83\xb8\x40\xd9\x0c\x7a\x2a\xf1\x61\xa1\xd7\x79\x90\x56\x36\x68\x4f\x83\x47\xc9\x88\x18\x20\x6a\xe5\x8c\x95\xd2\xc3\x62\xea\x73\x8a\x89\x54\x7c\x06\x47\xe3\x52\x2a\x3e\x47\xa8\xc3\xf5\x16\x53\xf9\xbb\x50\xdb\x52\xcb\x26\x4a\x74\xb3\xf4\x5b\xc7\xb9\x6d\xe4\x0e\x21\xe8\x10\xeb\xcc\x5a\x18\x2c\x4b\x0c\x57\x55\x3b\xc6\x46\x6a\xcf\x6e\x87\x6c\xe6\x13\x1f\x48\x5a\xe4\x90\x7c\xfb\x15\x85\xb9\x5d\x55\x20\xb1\x10\x03\xad\x77\x70\xb2\x4b\x3e\xd8\x75\x12\x41\xb8\xcf\x4d\xb4\xe9\xba\xb7\x68\xc3\x0a\x36\x65\x15\xe1\x3a\x4e\x2b\xa1\xef\x35\x8a\xf0\x0c\xa3\x78\xd9\xb5\xf8\x80\x2d\xa7\x61\x86\xaf\xc5\xbc\xda\xb3\xad\x55\x41\x42\xc0\x04\xe7\xae\x57\x71\x2f\x92\x2b\x5f\x31\x5a\xee\x05\x52\xb0\x10\xa0\x80\x1d\x5b\xb2\x24\x73\xbd\x6b\xa6\x33\x67\xa2\x1c\x65\x01\xf3\x8e\xab\x68\xea\xf1\x49\xd5\x27\x8a\xcb\x20\x47\xed\x92\x3b\xd3\x7d\xb8\xe2\xa9\xa0\xaa\xc2\x20\x8e\xa5\x82\x13\x36\x06\x6f\x6a\xae\x94\x66\xe5\xda\xd6\xfc\xa0\x6f\xdf\x0c\x28\xca\x92\xb8\x44\x34\xd3\x4c\xad\xc6\x8c\xc6\xfe\x9f\x9a\xc0\x19\x72\xcc\xaa\xaa\x99\x32\x39\x2b\x48\xc8\xfc\x52\xa8\xea\x86\xf9\x23\x53\x33\x7f\x14\x0b\x95\x09\xc8\x07\x0c\x98\xe4\x88\xae\x82\x10\x55\xb5\x07\xee\x0d\xb3\x56\x22\x96\xd0\xf0\xba\x2c\xf2\xb4\xc8\xdf\xf3\xe1\xba\xf6\x81\x22\x4a\x01\x51\x9a\x50\x66\x20\xbc\x02\x0c\xf3\x39\x10\x1c\x03\xb3\x17\x45\x79\x41\x09\x7b\xf5\xd9\x1f\xb6\x72\x2b\xa0\xeb\x8c\xad\x02\x4f\xdc\x4d\x90\x5e\x67\x39\xc5\x64\xbd\xd0\x45\xdb\xd6\x0d\xcc\x81\xd1\x09\x07\xa6\x28\x2b\xe2\x1c\xe6\x40\xd0\x83\xab\x74\x3a\x4b\xe8\x05\x7a\x18\xd5\xcc\xb3\xad\x16\xbc\xd6\x5b\x5a\x4c\x74\x7f\x91\x99\x4d\xd8\xec\x43\x76\x46\x93\xcd\x09\xd3\x52\x7a\x13\x5e\x71\x65\x34\x9f\x91\x6e\xce\x4d\xc0\x39\x35\x4e\xf4\x97\x76\xf1\xdd\x58\x17\x32\x70\x76\x42\x69\xb0\x55\xb2\x84\xb6\x4d\x3a\xc0\x84\x29\x79\xa8\xac\x89\x7b\xdd\x83\xcd\x62\x88\x33\xac\x26\xcd\x6c\x81\x8a\x36\x0f\xe6\xb0\x09\x22\xe4\xb6\xb6\xd5\x55\x61\x26\x8d\x11\x71\x31\xf1\x04\xbf\x55\x42\x01\xfb\x50\x06\x31\x53\x4d\xe0\x89\x09\x54\x7a\x6e\x94\x1c\x94\x17\x7e\xc1\xf9\xdd\x3b\xe6\x11\xd0\x24\x47\x49\x6e\x59\xa5\xcf\x9c\x85\xb1\xea\x06\x0a\x4f\xb9\x8a\x01\x38\x65\x10\x3b\x2c\x6e\xd4\x34\xbc\xe2\xd3\x34\x70\xc5\xa3\xfb\x57\x55\x71\x37\xcc\x84\x57\x7f\xa1\x41\xea\x22\x4a\x7d\x70\x56\x01\x8e\xd1\x12\xf2\x44\x05\x16\xdc\x8e\x47\xc7\x2d\x60\x2d\x16\x81\x6b\xe7\x78\x4a\x60\xa3\xd0\x5e\x98\xaf\x31\x4b\x28\xa5\xdd\x99\xc7\x3c\x22\xce\x90\xb6\x6b\x1c\xc8\xe7\x09\x60\xf5\x77\x18\xdb\x20\x77\x8f\xd9\x1a\xf5\x14\xd0\x87\x59\xcd\x0d\x13\x12\x06\x39\x38\xdc\x81\xbf\x3a\x0e\xec\xf2\x60\x70\xbe\x3a\x0b\xc7\xd3\xac\x3c\x62\xe4\x1f\x6c\xe3\x83\x2d\xd3\x9a\xb7\x01\xb5\x6b\xdc\x43\x38\xbc\x1c\x9e\x83\xec\xd3\xbe\xed\x49\x77\x75\x2f\x77\x75\x7f\xab\xa3\x07\x41\xc9\xaa\x9b\x52\x2f\x09\xba\x5c\xf5\xf2\xaa\xa4\xc6\x64\x89\x1e\xfd\xce\xb6\xcd\xe6\x0f\x76\x6d\xe6\x02\xf7\x92\x1c\xfe\xae\xe5\xdf\x7d\xd9\xf0\xc6\x87\x24\x7a\x4a\xf2\xfc\x27\xa3\x3f\x3a\xda\xcf\xb8\xf5\x47\xe8\x3d\x07\x44\x51\x7f\x0a\x7b\x9e\x16\x4c\xbb\x4d\x7e\x23\x0d\x6e\x92\xd3\x0f\x27\x13\x0d\x7b\xbe\x33\xbe\x12\x66\xed\x4e\x08\xed\xc5\xd2\xf1\x8c\x4a\x0c\xd5\xd7\x43\xc9\x08\xe1\xcb\xa2\xd7\x9e\xd4\x76\x9a\xfc\x24\xcb\xf0\x9a\x60\xb2\x66\x38\xa5\x68\xdc\xe2\x6d\x22\x10\x5e\xbf\x3f\x11\x0c\x58\x3b\xa5\x33\xa2\xea\x6e\xa4\x0e\x11\x5d\x1a\xb9\xb6\xb9\xa3\xae\x2a\x25\x43\x08\x7b\x8d\xc7\xd7\x78\xec\x42\xf8\x1a\x8f\x07\x22\xf5\x5c\xf1\xa8\x6a\x47\x59\x56\x8a\xad\x59\xfc\xb0\xd5\x89\x49\xc8\x12\x85\x57\xa7\xe2\x9c\x4e\x41\xc8\x55\x15\xa7\xb1\xa5\xf0\x46\x94\x99\x82\xf2\xfb\x9b\x0a\xc3\x7e\x42\xb7\x95\xa0\xfa\x4f\x3b\x9a\x08\x96\x65\x68\x1f\x88\xa1\x4a\xf6\x4b\x86\x8d\x82\x61\xed\xf7\xb4\x4e\xc1\xc9\x72\xc9\x29\x85\x9e\xae\xa1\xe0\x3f\xea\x6b\x23\x8e\xac\x63\x0d\x02\xfe\x71\x57\x93\x40\x50\xc8\x98\x99\x01\x5b\x91\x9b\xea\x4b\x96\x9f\x3e\x05\x34\xd8\x64\x1e\xb8\x5a\xf1\xe7\xcb\x1a\x5c\xcb\x2b\x16\xff\x93\x3d\xe0\x3c\xbc\x83\x8c\x86\x0c\x83\x74\xf2\xff\xa4\xa0\x21\x9a\xb8\xf9\x36\x45\x9e\x3a\x63\x87\x41\x86\xe0\xb8\xad\x08\x95\x1d\x64\x49\x38\xd3\xca\x30\xc6\x68\xbe\xab\x0c\xe3\x65\x7e\xaf\x5a\xe2\xf5\xfe\x71\x46\x43\x35\xc0\x4f\x7a\x0a\x1f\x84\x96\xa7\x41\x96\x6b\x55\x51\xc3\xb1\x01\x91\x11\x5c\x25\x75\xed\x1a\xb2\x0c\x38\x19\x0f\x46\xaf\x23\xbc\xdd\xb4\x86\x4c\x47\x59\xf4\x38\x74\x2a\x29\x09\xd3\x7e\x94\x9e\x7b\x71\x34\x7c\x86\xe5\x49\x26\x7d\x1e\xfa\xfa\x9a\xb2\x65\x6c\xff\xb9\x40\x0f\xae\x93\x71\x07\x82\x64\x05\x05\x89\x48\xf2\x40\x80\xb9\x92\x2c\x9f\x84\x0f\xf3\x56\x44\xbf\xe2\x18\x0b\xc7\xf3\x20\x7d\x8d\xc8\x1f\x17\x91\xa6\x4d\x49\x3d\x83\x30\x95\xcd\x37\xb8\x5e\x98\x3b\x75\x8a\x6e\x95\x50\x88\xd0\x96\xb7\x89\x44\x73\x5e\x58\x7b\x47\xa4\x75\x74\xcd\x60\x0e\x6c\x5f\x25\x4b\x97\xa2\xcc\x07\xb3\xb4\x76\x86\xe5\x44\x68\xeb\xcc\x00\xb8\x54\x6d\x98\xcb\x77\x66\x42\x8f\xf6\x43\x6d\x6a\xe0\xa8\x3d\x52\x07\xe8\xc0\x08\x7f\x19\x5c\x64\x88\xfe\x94\xc8\xbc\x5c\x6e\xe8\x9f\x4c\xce\x83\x34\xeb\xf4\x67\xcc\xa7\x13\x71\x38\x39\x0f\xd2\x3f\xc7\x9d\xc7\xd5\x5d\x41\x22\x97\x27\x18\xef\xa0\x09\xbd\x02\xa2\xc9\xfd\x07\x5c\xaf\xd8\x9a\x9f\xec\xba\xf1\x90\x0b\xef\x26\x48\xb9\xe6\x8f\x68\x2b\x28\x9b\x1b\x0e\xb1\x6e\x4b\x29\xd4\x38\xdc\xf7\x4a\xe0\x51\x61\x94\xa1\x9e\x36\x99\xd5\x5e\x73\x63\xb4\xcf\x99\x0e\xbc\x5c\xe9\x3a\x56\xf7\x7e\xc5\x7a\xbe\x0b\x16\x16\xce\x86\x4b\x96\x8f\x68\xab\x72\xce\xc2\xf0\x99\x43\x33\x76\x05\x33\xb8\x83\x31\xec\x05\x2c\x9a\xc5\x5d\x03\x36\x5c\x22\xc8\xeb\x96\x99\xbc\x28\x78\x06\x1d\x19\x57\x79\x91\x80\x8d\x37\x09\x37\x30\x07\x6c\xf3\xcc\xca\xbf\x32\xaa\x1d\xd7\x43\x96\x15\xf9\xa2\xe8\x2c\x83\xf8\x9a\xbb\xf2\xc2\x17\xbf\x85\xdb\x2d\x38\x53\x1f\x18\xdf\xc8\x2f\x9b\xe6\x62\x47\xfd\xf1\xc6\x77\x14\x0d\x7a\x02\xa6\x89\xe0\x44\x6d\xe3\xdd\xd8\xbd\xde\x5d\xcb\xaf\x46\x8b\xf9\xbf\xfe\x6d\xc9\x7c\x03\x50\x8c\xf8\x5d\x33\x5b\xa1\x0f\xd8\xd3\x5b\xfa\x9d\xf3\x5f\x14\x3d\x45\xd9\xce\xc1\xaf\x07\x4c\xa7\x70\x1f\x42\x53\x0e\xdb\x25\xe6\xa9\x4d\x89\xfc\xe2\xe0\x08\x93\xef\x84\xa7\x2c\x9f\xa6\x70\x07\x20\x11\x0f\xd7\x51\xb4\x98\x97\xa5\x8c\x1e\x43\x89\x3d\xbc\xd5\xe5\xd9\x27\xd9\x5f\x69\x37\x29\xe7\x27\xa8\xb5\xd5\x51\x75\xbc\xe2\x6e\xff\x49\x61\x58\x74\x1f\x78\x72\x17\xee\x6c\x3e\xad\x4b\x0d\x39\x89\x3d\x38\x9f\x8f\x6d\x3f\x9c\xf4\x77\x1f\xd4\x99\xab\x0c\xce\xe5\x3b\xb2\x90\xf9\xf8\x6d\x3a\x7b\xd7\xb6\xf6\x25\xa3\x61\x93\xb4\x24\x01\x5f\x80\x3c\x1b\x1d\x08\xa2\x72\xfb\x9d\x30\x4a\xa2\x51\x20\x0d\xbb\xec\x1f\x0f\x4a\x99\xf3\x87\x60\xd6\xda\xff\xd1\xfc\x16\x00\x00\xff\xff\x03\xe0\x9b\xe2\xb2\x25\x00\x00")

func templatesTypes_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_bodyGohtml,
		"templates/types_body.gohtml",
	)
}

func templatesTypes_bodyGohtml() (*asset, error) {
	bytes, err := templatesTypes_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_body.gohtml", size: 9650, mode: os.FileMode(420), modTime: time.Unix(1543391736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesTypes_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_headGohtml,
		"templates/types_head.gohtml",
	)
}

func templatesTypes_headGohtml() (*asset, error) {
	bytes, err := templatesTypes_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1532510936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_serviceGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x15\xba\x42\x2e\x14\x19\xd8\xa3\x07\x3f\x64\x46\x92\x05\xe8\xd2\x2c\xf1\xd0\xc7\x82\x91\x4e\x32\x61\x99\x94\x4f\x74\x9a\x80\xd0\xff\x3e\x90\xa2\x1c\xd9\xd1\x2f\xaf\xdd\x50\xbe\xc5\x24\x8f\x77\xdf\x7d\xf7\xdd\x29\x5a\x9f\xc3\xf4\x63\x2a\xd5\x4b\x8e\x33\x48\xb9\x5a\xed\x1e\xc3\x48\x6e\xa6\x97\xd7\xcb\xf3\xbf\xd7\xc4\xb8\xc0\x69\x2a\x7f\x4d\xb7\xd9\x34\x45\x81\xc4\x94\xa4\x69\x9e\xed\x52\x2e\x8a\x69\x4a\x2c\x5f\x6d\xb3\xf0\x01\xe9\x89\x47\xb8\x90\x42\xe1\xb3\xfa\x38\x85\xf3\xb2\x3c\x4b\x76\x22\x82\x6b\x54\x5a\xd7\xfb\xe1\x2d\xdb\x60\x59\xba\xbf\xb4\x0e\xaf\x38\x66\xf1\xf2\x25\xc7\xb2\xfc\x13\xd5\x4a\xc6\x85\x1f\x81\xd6\xa9\x34\xbf\xc1\xfe\xda\x82\x65\xd9\x8d\x50\x48\x09\x8b\xb0\x2c\x03\xe0\x2b\xf8\xa8\x35\x37\x3f\x45\x98\x2b\x49\xc5\xdd\x3a\x2d\xcb\xf0\xe6\xf5\x97\x3f\x98\x88\x33\x24\xd0\x1a\x78\x02\xef\xc3\x25\xb1\x08\xe9\x52\xb0\xc7\x0c\x63\x28\x4b\x08\x94\xd9\x94\x39\x0a\x45\x2c\xe2\x22\xad\x4c\x54\xe7\x40\x6b\x14\x71\x59\x4e\x8c\x37\xdb\xac\xda\xb2\xde\x16\xa0\xcf\x00\xc0\xd9\xad\x5d\x74\xde\xdb\xb8\xc1\x2d\x42\xb5\x23\xf1\xd6\x80\xde\x9f\xa8\xec\x10\x13\x29\xc2\xfb\x8d\x35\x01\xb3\x79\xaf\xd1\x7a\x79\x5a\xbb\x1b\x0e\x54\x6f\x06\x1f\x8e\x9f\xd2\x6f\xae\x99\x65\xce\xcf\x5a\x0c\x04\xad\xa7\x97\x96\x18\x5a\x47\x2c\xcb\x6a\x27\xc3\x6b\x93\xf7\xbf\x3e\x7d\xde\xa9\x7c\xa7\x6c\xae\xde\x87\xbf\xcb\xf8\xc5\x11\xa0\x2c\xdb\x6d\xb9\x5c\x38\x23\x17\x94\xee\x36\x28\x54\x7b\x80\xf5\xba\xa0\xb4\x98\xbd\x01\x71\x21\x45\xc2\xd3\xda\x42\x7b\x9c\x8d\x57\x1d\xc4\x8c\x52\x83\xef\x69\x0e\x34\x11\x67\x94\xb6\xc3\x5d\x9b\xaa\xfc\xd2\x87\xa0\x99\x5b\x6d\x20\x75\xa0\xd4\xf0\x1b\x45\xdc\xeb\x5b\x37\xce\x7d\x37\xef\xb1\x90\xd9\x13\xce\xc0\x54\xa8\x9f\x37\xc1\x75\x5b\x77\x8c\xd8\xa6\x98\x80\xff\x15\x78\x5d\x77\xba\x0c\x80\x90\x08\x90\x48\xd2\x04\xba\x41\x8f\xd4\xb3\x81\x39\x0f\x5d\xa4\x9d\x07\xbf\xc2\xdc\x1c\xee\xdc\x6f\xaf\xdd\xa1\x64\x3d\x31\x82\x9c\x11\x0a\xf5\x90\x33\xb1\x50\xcf\x6d\x65\x6e\xb7\x06\xdc\x33\x8b\x27\xce\x96\x89\xa8\xc3\xce\x15\xc9\x8d\xb3\xe5\xef\x83\x9e\xfc\x56\x5f\x7c\x37\x07\xc1\xb3\x1e\xbc\xdc\x3a\xf4\x79\xee\xfe\xae\xed\xf9\x93\xde\xfb\xfd\x90\x14\x39\x13\x26\x00\x45\xe1\x83\x62\x64\x1f\xf1\x0d\xa1\x8f\x94\x39\x3c\x16\x85\x9a\x2b\xe4\x05\x6d\xd1\x2f\x56\x3c\x8b\x3f\x27\xfe\x81\xeb\x93\x7e\x4f\x8b\x57\xe4\x3b\x30\x75\xbb\x5f\xb8\x5a\x59\x47\xf7\x98\x06\xf6\x72\xbf\xf9\x18\x13\x24\x7b\x2e\xbc\xe2\x82\x17\xab\x01\xe0\xf6\xc6\x61\xde\x74\xad\xf7\x4e\x64\xf3\x33\xf6\x74\xe5\x91\xad\xb5\xc9\x20\x09\x0c\xe1\x6c\x95\x8d\x65\x8d\x5d\x36\xdc\x07\x54\x4b\x96\xfa\x9e\xad\x4f\x2f\x00\x45\x3b\x9c\x84\x9f\x64\x5a\xb5\x1d\x5f\xeb\x4c\x3a\x84\x2f\xcd\x11\xdf\xbc\x33\x90\x2c\x18\xa4\x56\xd9\x83\xaf\x6d\xa2\xbd\xf5\xca\x13\xd3\xcb\xe7\x63\x62\x3d\x6c\x1e\xf7\xb8\xdd\x61\xa1\x6a\x7a\x8e\x52\x70\xc2\x6d\x60\xd4\xab\xa2\xdd\x41\x43\x3b\x36\xe7\xe5\x46\xd2\x0b\xef\x58\xb2\xcd\xb8\xc4\x13\x10\x52\x75\x5d\x35\xac\xbd\x24\xeb\x50\x50\x49\xa5\x2f\x78\x36\x71\xf3\xc4\x98\xf4\x9f\x9c\x7d\x37\x68\x08\x9e\xd9\x17\xbf\x33\xa1\xd0\x1c\x5d\x0e\x40\x5a\x64\x1c\x85\xaa\xa6\x12\x33\x92\x19\x9c\x22\x0f\x3c\xc2\xed\x1b\xa0\x06\x3b\x5b\x56\xe0\xd8\xa4\x99\x7c\x09\xfc\xe6\xd7\x83\xe1\x95\xa4\x5b\xfc\x76\x9c\x80\x6a\x8c\x1c\xa6\xf3\xff\x10\xdb\x50\xd7\xee\x2e\x07\xd7\x3a\x3f\xb4\x0d\xb7\xee\xfd\x7e\x4e\x38\x3d\xaf\xe6\xbb\x23\x75\xef\x98\xf0\xea\x55\x05\x3f\x7e\x32\xac\x57\x35\x2c\xcc\x20\xef\x3e\xd6\x1d\x71\xb3\x26\xf9\xaa\x9e\x3f\x4c\xed\xf9\x06\x8c\xa0\xd2\x4d\x8b\x4b\xeb\xc4\xbf\xef\x0c\xc2\x48\x78\xdb\x89\x86\xc9\x1b\xf1\x24\xd7\x48\x13\xf0\x09\x8b\x5d\xa6\x0e\x87\x9b\x51\xb3\x0d\xfc\x20\x25\x6a\xe3\xe0\x4f\x21\x42\xa7\xd5\x66\x25\x3c\x63\x6b\x33\x30\x1a\xf5\xdd\xd5\xd3\x5d\xe2\xa7\x88\x67\x53\x34\xb5\xb6\x18\x39\xc2\x7c\x21\x96\xfb\x48\x14\x80\x97\x30\x6e\x26\x4e\x25\x81\x2a\x64\x81\x99\x84\x74\x7b\xd0\x47\x74\xfb\x1e\x5f\xd9\xaf\x59\x47\x6e\xcb\xfe\xb1\x0c\x37\x4a\x78\x40\xd8\x4e\xca\x9b\x17\xaa\x6a\xfe\x41\x8c\xa7\x00\xe4\xda\x94\x28\xe1\x36\xdc\xe7\xfa\xdf\x28\x30\x4f\xe0\x9d\x5c\x8f\x68\x6c\xdd\xf9\xb9\xb5\x74\x4b\x36\xaa\x9e\xc0\x89\x0b\x95\xf8\xde\x7d\x23\x45\xd0\x00\xc5\x99\x2a\xe0\x91\xc5\x26\x00\xe3\x2a\xa8\x97\x1c\xfd\x5f\x96\x93\x10\x1e\x56\x72\x97\xc5\xf0\x68\x3f\xd8\xfa\x02\xf3\x6c\x0a\x06\x06\xa6\xfe\xa2\xa9\x06\x47\x93\xeb\xb0\x52\xcd\xc1\x4f\x24\xb0\x45\xd1\x90\x9b\x3b\xf6\x92\x49\x16\xdb\x09\x6e\xb1\xc2\x68\x3d\x5a\x72\x8a\xae\xe1\xa7\xb3\xf7\x9d\xd6\xf9\xe0\xa7\x19\x5f\x78\x72\x1c\x62\x1b\x6a\x1e\x61\xe1\x95\xe5\x48\x2f\x0f\x45\xbf\x69\xef\x22\x8a\xb0\x28\xe4\xb8\x34\xec\x5d\xac\x38\xf0\x6a\x05\xde\xa4\xa5\xf5\x0d\xe7\xf4\x58\x97\x47\x4b\x79\x9f\x5f\x84\xc5\xe8\xf7\x06\xc4\xbb\x5e\xa3\x7b\x4b\x4d\xdb\x81\x02\x39\xb5\x65\xfd\x37\x15\x30\xfc\xbd\xd3\xa1\x8e\x2d\xff\xc7\x39\xfa\xa9\x05\xdb\xf2\xac\x23\xf6\xd7\x82\x3a\x3b\xf4\xaa\x3c\xfb\x27\x00\x00\xff\xff\x6c\x65\x05\xf9\xef\x15\x00\x00")

func templatesTypes_serviceGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_serviceGohtml,
		"templates/types_service.gohtml",
	)
}

func templatesTypes_serviceGohtml() (*asset, error) {
	bytes, err := templatesTypes_serviceGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_service.gohtml", size: 5615, mode: os.FileMode(420), modTime: time.Unix(1543324769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/schemas_body.gohtml": templatesSchemas_bodyGohtml,
	"templates/schemas_head.gohtml": templatesSchemas_headGohtml,
	"templates/types_body.gohtml": templatesTypes_bodyGohtml,
	"templates/types_head.gohtml": templatesTypes_headGohtml,
	"templates/types_service.gohtml": templatesTypes_serviceGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"schemas_body.gohtml": &bintree{templatesSchemas_bodyGohtml, map[string]*bintree{}},
		"schemas_head.gohtml": &bintree{templatesSchemas_headGohtml, map[string]*bintree{}},
		"types_body.gohtml": &bintree{templatesTypes_bodyGohtml, map[string]*bintree{}},
		"types_head.gohtml": &bintree{templatesTypes_headGohtml, map[string]*bintree{}},
		"types_service.gohtml": &bintree{templatesTypes_serviceGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

