// Code generated by go-bindata.
// sources:
// generator/plugins/graphql/templates/schemas_body.gohtml
// generator/plugins/graphql/templates/schemas_head.gohtml
// generator/plugins/graphql/templates/types_body.gohtml
// generator/plugins/graphql/templates/types_head.gohtml
// generator/plugins/graphql/templates/types_service.gohtml
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSchemas_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcd\x6e\xdb\x30\x0c\x3e\x3b\x4f\x41\x18\xc1\x96\x0c\xae\x1f\x20\x40\x4e\x41\xd7\xed\xb0\xfe\xac\xbd\x0d\xc3\xe0\x2a\xb4\xab\x4d\x91\x32\x59\x69\x51\x10\x7a\xf7\x41\x7f\xb6\x92\x2c\x59\x6f\xcb\x49\x26\x29\x7e\x1f\xf9\x51\x8c\x79\xdd\x22\x10\x4d\xeb\x7b\xf6\x84\x9b\xe6\xba\xd9\xa0\xb5\xe1\xbc\x12\x1c\xa5\xe9\xa1\x37\x7a\xc7\x0c\xd0\xa4\x20\x02\xdd\xc8\x0e\x61\xda\xa3\x7e\xe6\x0c\x61\xb1\x84\x69\x7d\x1f\x3e\x7a\xb8\xb0\x76\x52\x14\x44\xc9\x5d\x87\x74\x21\x11\x10\x75\xea\xc1\xc1\x0d\xee\xe0\xb8\xf2\x56\x77\x95\x08\x50\xae\x7d\x1a\x3b\x69\x77\x92\xc1\x15\x9a\xbf\x93\x9b\x31\xd1\x9f\xe7\x5d\x01\x7f\x82\x0f\x44\x5c\x1a\xd4\x0c\xb7\x46\xe9\xfe\xf6\x57\x67\x6d\xfd\x79\xb4\x7c\x6a\xe4\x5a\xa0\x26\xba\x00\xde\xc2\xb4\x7e\xd0\x0d\x43\x7d\x29\x9b\x47\x81\x9e\x48\x05\x46\x03\x91\xda\xa2\x34\xba\x61\x5c\x76\x21\x47\x08\x74\xf7\x22\xe3\x39\xcc\x88\xba\xdf\x22\xb8\x03\x93\x0a\x50\x6b\xa5\xe7\x6f\xef\x1d\x6f\x81\x89\xbe\x3e\xd5\xc2\xe5\x12\x24\x17\x2e\x5d\x51\x68\x34\x3b\x2d\xe1\x08\x94\x6c\x05\x44\x1e\x38\xd6\x7b\xe9\xce\xed\xac\x8c\x58\xc0\x92\x1e\x07\x20\xc0\x1a\xf9\xde\xc0\x23\x7a\x10\xc9\x45\x39\x9f\x14\xc5\xbe\x2e\x6f\xac\xe3\xb9\xd1\xc7\xf9\xef\x76\xa8\x5f\x3f\x72\x14\xeb\x1e\x96\x40\x14\xbd\x2b\x25\xc3\x88\x29\x0d\xa5\x8f\x29\xc7\xe4\x53\x6b\x67\x67\x3a\xe2\x44\x3e\x2f\x5e\x2e\x51\x24\xf6\xc3\xa3\x9f\x26\x77\x8a\xff\x97\x9d\x69\x0c\x57\xf2\x1f\x25\xa4\xb0\xff\x51\xc5\x3e\xc5\x53\xca\xa9\xc7\x9f\xc8\x4c\x10\xee\xc6\x9f\x0f\x74\x0b\x01\x69\x2c\x96\xf9\x90\x5d\xe3\x4b\xb8\x92\x8f\x7b\xb0\xac\x94\x6c\x79\xe7\x87\xd3\xdd\x5c\x40\x79\x98\xaa\xac\x9c\x93\xc8\x55\x2a\x07\x22\xf5\xdd\x4e\x19\x5c\xaf\xd4\x66\xe3\xe6\xb2\x2c\x23\x99\xa2\x88\xa6\x45\xc6\x69\x2f\xd6\xda\x94\x70\xa8\xb2\x28\x42\xed\x8b\x9c\x74\x30\x79\x66\x11\x5d\xa0\x1c\xe0\xa3\x9e\x09\x34\x6b\x54\x2b\xd6\xbe\x4b\x27\x02\x63\x2e\x17\x96\x1e\x40\xe6\x2c\x5c\xf9\xce\x15\x6b\xf7\x55\x64\xa1\xd1\x3e\x96\xe6\xd6\x60\xb0\x05\xa0\x6f\x07\x09\xbe\x57\x23\x2c\x8a\xfe\x3c\xd6\xbb\xc3\xf2\x29\x85\x66\xe2\x64\x37\xaa\xc1\xed\x68\x0c\x5c\x6f\x72\xf9\xc6\x98\xaf\xd8\x2b\xf1\x8c\x0b\x70\x5b\x7a\xb6\xcd\x7b\x1d\x5d\xb7\x8d\x6e\x36\xfd\x1c\x66\x7e\xff\xb6\x0d\x43\xb7\x98\xc6\x7d\x98\x7e\x71\x8d\x85\xe7\x43\xd6\x05\x49\x2e\x06\xff\x88\x69\xf3\xea\x47\xb5\x8f\xbe\x8f\x9a\x53\x4a\x15\xfa\x79\xae\x2b\xb1\x27\x43\x68\x02\x4b\xcd\x18\x97\xac\xd1\x5c\x76\xd1\x1d\x39\xed\x33\xf0\x46\xf7\x4c\x73\xf3\xf1\xb6\xbe\xc6\x97\xf8\x57\x76\xb4\xc2\xc7\x87\xe4\xb7\x92\x17\xa3\xf6\xc7\x20\x47\x50\x22\x0e\x5f\x9d\xde\x7c\xf0\x25\x16\xc9\x1a\x2e\xef\xc7\x0c\xf7\x07\x7a\x76\x3e\xb1\x7f\x02\x00\x00\xff\xff\x00\x50\xa4\xbf\x0b\x08\x00\x00")

func templatesSchemas_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_bodyGohtml,
		"templates/schemas_body.gohtml",
	)
}

func templatesSchemas_bodyGohtml() (*asset, error) {
	bytes, err := templatesSchemas_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_body.gohtml", size: 2059, mode: os.FileMode(420), modTime: time.Unix(1542636462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemas_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesSchemas_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_headGohtml,
		"templates/schemas_head.gohtml",
	)
}

func templatesSchemas_headGohtml() (*asset, error) {
	bytes, err := templatesSchemas_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_head.gohtml", size: 191, mode: os.FileMode(436), modTime: time.Unix(1539090323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x9c\x46\x10\x7f\x86\x4f\x31\xa5\xa9\x05\x11\x3d\xf7\xf9\xaa\x7b\xb0\xdc\x38\x8a\x52\xdb\x69\x1b\x25\x0f\xce\xc9\x26\xdc\x72\xde\xc2\x2d\x64\xe1\xb0\x4f\x88\xef\x5e\xed\x3f\x58\x60\xb9\xc3\xa9\x1d\xa5\x95\x79\xb0\x8e\x65\x76\x66\xf6\x37\x7f\x76\x67\xd6\xc7\xc7\xf0\x8a\x6c\x37\xb9\x5d\x55\x34\x20\x6b\x04\x2f\x10\xd9\x6e\x60\xbe\x80\xd9\x19\x4e\xd0\x8c\x7f\x84\x9f\xeb\xda\xb6\xca\x80\x42\x55\xf1\xef\xb3\x0f\x01\xc5\xc1\xe7\x04\x5d\x04\x1b\x54\xd7\xb0\x80\xaa\x5a\x7f\x49\xde\xc5\xeb\xba\x9e\x5d\xa0\x3b\x36\xcb\xd5\x86\xd8\xfb\x69\x4a\x22\xbc\xae\x6c\xcb\x62\x93\xe6\x20\x1f\x47\xb1\x7c\x4d\x83\xec\xf6\x8f\xdf\x05\x47\xc7\xb7\x2d\xab\xaa\x00\x47\x42\xa1\xd9\x69\xba\xd9\x20\x52\x08\x4d\x2c\xeb\x37\x94\x87\x14\x67\x05\x4e\xc9\xbc\x51\x4a\xd2\xd4\xb5\x9c\x8c\xc8\x4a\xd2\x7f\x08\x92\x2d\xca\xe7\xd0\x53\x89\x0f\x0b\xbd\xce\x83\xac\xb2\x41\x7b\x1a\x3c\x4a\x46\xc4\x00\x51\x2b\x67\xac\x94\x1e\x16\x53\x9f\x53\xcc\xa4\xe2\x73\x38\x1a\x97\x52\xf1\x39\x42\x1d\xae\xb7\x98\xca\xdf\x85\xda\x96\x5a\x36\x51\xa2\x9b\xa5\xdf\x38\xce\x4d\x23\x77\x08\x41\x87\x58\x67\xd6\xc2\x60\x59\x62\xb8\xaa\xda\x31\x36\x52\x7b\x76\x3b\x64\xdb\xc7\xc7\xf0\x86\x64\xdb\x02\xd2\xcf\x7f\xa3\xb0\xb0\xab\x0a\x24\x16\x62\xa0\xf5\x0e\x4e\x76\xc9\x07\xbb\x4e\x22\x08\x0f\xb9\x89\x36\x5d\xf7\x16\x6d\x58\xc1\xa6\xac\x22\x5c\xc7\x69\x25\xf4\xbd\x46\x11\x9e\x61\x94\xac\xba\x16\x1f\xb0\xe5\x34\xcc\xf0\xb5\x98\x57\x7b\xb6\x15\x6d\x49\x08\x98\xe0\xc2\xf5\x2a\xee\x45\x72\xe5\x11\xa3\xe5\x5e\x20\x05\x0b\x01\x0a\xd8\xb1\x25\x4b\x32\xd7\xbb\x62\x3a\x73\x26\xca\x51\x96\xb0\xe8\xb8\x8a\xa6\x1e\x9f\x54\xbd\xa3\xb8\x0c\x0a\xd4\x2e\xb9\x33\xdd\x87\xf7\xbb\x8c\x3b\x51\x18\x24\x89\x54\x70\xc6\xc6\xe0\x45\xcd\x95\xd2\xac\x5c\xdb\x9a\x1f\xf4\xed\x9b\x03\x45\x79\x9a\x94\x88\xe6\x9a\xa9\xd5\x98\xd1\xd8\x7f\xaa\x09\x9c\x21\xc7\xac\xaa\x9a\x29\xb3\xb3\x2d\x09\x99\x5f\x0a\x55\xdd\xb0\xb8\x67\x6a\x16\xf7\x62\xa1\xa7\x29\x29\xd0\x7d\xe1\x03\x06\x4c\x0a\x44\xa3\x20\x44\x55\xed\x81\x7b\xcd\xac\x95\x8a\x25\x34\xbc\x2e\xb7\x45\xb6\x2d\x5e\xf3\xe1\xba\xf6\x81\x22\x4a\x01\x51\x9a\x52\x66\x20\x1c\x01\x86\xc5\x02\x08\x4e\x80\xd9\x8b\xa2\x62\x4b\x09\x7b\xf5\xd9\x1f\xb6\x72\x2b\xa0\xeb\x9c\xad\x02\xcf\xdc\x4d\x90\x5d\xe5\x05\xc5\x64\xbd\xd4\x45\xdb\xd6\x35\x2c\x80\xd1\x09\x07\xa6\x28\xdf\x26\x05\x2c\x80\xa0\x3b\x57\xe9\x74\x96\xd2\x0b\x74\x37\xaa\x99\x67\x5b\x2d\x78\xad\xb7\xb4\x98\xe8\xfe\x22\x33\x9b\xb0\xd9\x9b\xfc\x8c\xa6\x9b\x13\xa6\xa5\xf4\x26\x1c\x71\x65\x34\x9f\x91\x6e\xce\x4d\xc0\x39\x35\x4e\xf4\x43\xbb\xf8\x6e\xac\x0b\x19\x38\x3f\xa1\x34\xd8\x29\x59\x42\xdb\x26\x1d\x60\xc2\x94\x9c\x2a\x6b\xe6\x5e\xf5\x60\xb3\x18\xe2\x0c\xab\x59\x33\x5b\xa0\xa2\xcd\x83\x05\x6c\x82\x18\xb9\xad\x6d\x75\x55\x98\x49\x13\x44\x5c\x4c\x3c\xc1\x2f\x4a\x29\x60\x1f\xca\x20\x61\xaa\x09\x3c\x31\x81\x4a\xcf\x8d\x92\x83\xf2\xc2\x8f\xb8\xb8\x7d\xc5\x3c\x02\x9a\xe4\x28\xc9\x2d\xab\xf4\x99\xb3\x30\x56\xdd\x40\xe1\x29\x57\x31\x00\xa7\x0c\x12\x87\xc5\x8d\x9a\x86\x23\x3e\x4d\x03\x57\x3c\xba\x7f\x55\x15\x77\xc3\x5c\x78\xf5\x47\x1a\x64\x2e\xa2\xd4\x07\x27\x0a\x70\x82\x56\x50\xa4\x2a\xb0\xe0\x66\x3c\x3a\x6e\x00\x6b\xb1\x08\x5c\x3b\xc7\x53\x02\x1b\x85\x0e\xc2\x7c\x85\x59\x42\x29\xed\xce\x3c\xe6\x11\x49\x8e\xb4\x5d\x63\x22\x9f\x07\x80\xd5\xdf\x61\x6c\x83\xdc\x03\x66\x6b\xd4\x53\x40\x4f\xb3\x9a\x1b\xa6\x24\x0c\x0a\x70\xb8\x03\x7f\x72\x1c\xd8\xe7\xc1\xe0\x7c\x72\x96\x8e\xa7\x59\x79\xc4\xc8\xdf\xd8\xc6\x93\x2d\xd3\x9a\xb7\x01\xb5\x6b\xdc\x29\x1c\x9e\x0e\xcf\x41\xf6\x69\xdf\x0e\xa4\xbb\xba\x97\xbb\xba\xbf\xd5\xd1\x83\xa0\x34\xea\xa6\xd4\x4b\x82\x2e\xa3\x5e\x5e\x95\xd4\x98\xac\xd0\xbd\xdf\xd9\xb6\xd9\xfc\xc1\xae\xcd\x5c\xe0\x8b\x24\x87\x5f\xb4\xfc\x7b\x28\x1b\x5e\xfb\x90\xc6\x0f\x49\x9e\xbf\x32\xfa\xa3\xa3\xc3\x8c\x5b\x7f\x84\xde\x33\x21\x8a\xfa\x53\xd8\xf3\xb0\x60\xda\x6f\xf2\x6b\x69\x70\x93\x9c\x7e\x38\x99\x68\xd8\xf3\x95\xf1\x95\x32\x6b\x77\x42\xe8\x20\x96\x8e\x67\x54\x62\xa8\xbe\x1e\x4a\x46\x08\x9f\x16\xbd\xf6\xa4\xb6\xd7\xe4\x27\x79\x8e\xd7\x04\x93\x35\xc3\x29\x43\xe3\x16\x6f\x13\x81\xf0\xfa\xc3\x89\x60\xc0\xda\x29\x9d\x11\x55\xf7\x23\x35\x45\x74\x69\xe4\xda\xe6\x8e\xba\xaa\x94\x0c\x21\xec\x39\x1e\x9f\xe3\xb1\x0b\xe1\x73\x3c\x4e\x44\xea\xb1\xe2\x51\xd5\x8e\xb2\xac\x14\x5b\xb3\xf8\x61\xab\x13\x93\x90\x25\x0a\xaf\x4e\xc5\x79\x7c\x0c\x42\xae\xaa\x38\x8d\x2d\x85\x17\xa2\xcc\x14\x94\x5f\xdf\x54\x18\xf6\x13\xba\xad\x04\xd5\x7f\xda\xd3\x44\xb0\x2c\x43\xfb\x40\x0c\x55\xb2\x5f\x32\x6c\x14\x0c\x6b\xbf\x87\x75\x0a\x4e\x56\x2b\x4e\x29\xf4\x74\x0d\x05\xff\x51\x5f\x1b\x71\x64\x1d\x6b\x10\xf0\x8f\xfb\x9a\x04\x82\x42\xc6\xcc\x1c\xd8\x8a\xdc\x4c\x5f\xb2\xfc\xf4\x2e\xa0\xc1\x26\xf7\xc0\xd5\x8a\x3f\x5f\xd6\xe0\x5a\x5e\xb1\xf8\x9f\xfc\x0e\x17\xe1\x2d\xe4\x34\x64\x18\x64\xb3\xbf\xd2\x2d\x0d\xd1\xcc\x2d\x76\x19\xf2\xd4\x19\x3b\x0c\x72\x04\x2f\xdb\x8a\x50\xd9\x41\x96\x84\x73\xad\x0c\x63\x8c\x16\xfb\xca\x30\x5e\xe6\xf7\xaa\x25\x5e\xef\xbf\xcc\x69\xa8\x06\xf8\x49\x4f\xe1\x83\xd0\xea\x34\xc8\x0b\xad\x2a\x6a\x38\x36\x20\x32\x82\xf7\x69\x5d\xbb\x86\x2c\x03\x4e\xce\x83\xd1\xeb\x08\x6f\x37\xad\x21\xd3\x51\x16\x3d\x0e\x9d\x4a\x4a\xc2\x74\x18\xa5\xc7\x5e\x1c\x0d\x1f\x61\x79\x92\x49\x9f\x87\xbe\xbe\xa6\x6c\x19\xdb\x7f\x2e\xd0\x9d\xeb\xe4\xdc\x81\x20\x8d\x60\x4b\x62\x92\xde\x11\x60\xae\x24\xcb\x27\xe1\xc3\xbc\x15\xd1\xaf\x38\xc6\xc2\xf1\x3c\xc8\x9e\x23\xf2\xdb\x45\xa4\x69\x53\x52\xcf\x20\x4c\x65\xf3\x0d\xae\x96\xe6\x4e\x9d\xa2\x8b\x52\x0a\x31\xda\xf1\x36\x91\x68\xce\x0b\x6b\xef\x89\xb4\x8e\xae\x39\x2c\x80\xed\xab\x64\xe5\x52\x94\xfb\x60\x96\xd6\xce\xb0\x9c\x18\xed\x9c\x39\x00\x97\xaa\x0d\x73\xf9\xce\x5c\xe8\xd1\x7e\xa8\x4d\x0d\x1c\xb5\x47\xea\x00\x4d\x8c\xf0\xa7\xc1\x45\x86\xe8\x77\x89\xcc\xd3\xe5\x86\xfe\xc9\xe4\x3c\xc8\xf2\x4e\x7f\xc6\x7c\x3a\x11\x87\x93\xf3\x20\xfb\x7f\xdc\x79\xbc\xbf\xdd\x92\xd8\xe5\x09\xc6\x9b\x34\xa1\x57\x40\x34\xb9\x7f\xc2\xf5\x8a\xad\xf9\xc9\xbe\x1b\x0f\xb9\xf0\x6e\x82\x94\x6b\x7e\x8b\x76\x82\xb2\xb9\xe1\x10\xeb\xb6\x94\x42\x8d\xc3\x7d\xad\x04\x1e\x15\x46\x19\xea\x69\x93\x59\xed\x35\x37\x46\x87\x9c\x69\xe2\xe5\x4a\xd7\xb1\xba\xf7\x2b\xd6\xe3\x5d\xb0\xb0\x70\x36\x5c\xb2\xbc\x45\x3b\x95\x73\x96\x86\xcf\x1c\x9a\xb1\x2b\x98\xc1\x1d\x8c\x61\x2f\x60\xd1\x2c\xee\x1a\xb0\xe1\x12\x41\x5e\xb7\xcc\xe5\x45\xc1\x23\xe8\xc8\xb8\xca\x8b\x04\x6c\xbc\x49\xb8\x86\x05\x60\x9b\x67\x56\xfe\x95\x51\xed\xb9\x1e\xb2\xac\xd8\x17\x45\x67\x19\x24\x57\xdc\x95\x97\xbe\xf8\x2d\xdc\x6e\xc9\x99\xfa\xc0\xf8\xc6\x7e\xd9\x34\x17\x3b\xea\x8f\x37\xbe\xe3\x78\xd0\x13\x30\x4d\x04\x27\x6e\x1b\xef\xc6\xee\xf5\xfe\x5a\x3e\x1a\x2d\xe6\x7f\xfc\x69\xc5\x7c\x03\x50\x82\xf8\x5d\x33\x5b\xa1\x0f\xd8\xd3\x5b\xfa\x9d\xf3\x5f\x1c\x3f\x44\xd9\xce\xc1\xaf\x07\x4c\xa7\x70\x1f\x42\x53\x0e\xdb\x25\xe6\xa9\x4d\x89\xfc\xe4\xe0\x08\x93\xef\x85\xa7\x2c\x1f\xa6\x70\x07\x20\x11\x0f\x57\x71\xbc\x5c\x94\xa5\x8c\x1e\x43\x89\x3d\xbc\xd5\xe5\xd9\x27\x3d\x5c\x69\x37\x29\xe7\x3b\xa8\xb5\xd5\x51\x75\xbc\xe2\x6e\xff\x49\x61\x58\x74\x4f\x3c\xb9\x0b\x77\x36\x9f\xd6\xa5\x86\x9c\xc4\x1e\x9c\xcf\xc7\xb6\x1f\x4e\xfa\xaf\x0f\xea\xcc\x55\x06\xe7\xf2\x3d\x59\xc8\x7c\xfc\x36\x9d\xbd\x6b\x5b\xfb\x92\xd3\xb0\x49\x5a\x92\x80\x2f\x40\x9e\x8d\x26\x82\xa8\xdc\x7e\x2f\x8c\x92\x68\x14\x48\xc3\x2e\xfb\xdf\x83\x52\xe6\xfc\x21\x98\xb5\xf6\x7f\x34\xff\x04\x00\x00\xff\xff\xe6\xd0\x19\x2b\x5a\x25\x00\x00")

func templatesTypes_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_bodyGohtml,
		"templates/types_body.gohtml",
	)
}

func templatesTypes_bodyGohtml() (*asset, error) {
	bytes, err := templatesTypes_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_body.gohtml", size: 9562, mode: os.FileMode(420), modTime: time.Unix(1542636825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesTypes_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_headGohtml,
		"templates/types_head.gohtml",
	)
}

func templatesTypes_headGohtml() (*asset, error) {
	bytes, err := templatesTypes_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_head.gohtml", size: 191, mode: os.FileMode(436), modTime: time.Unix(1539090323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_serviceGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdb\x6e\xdb\x38\x10\x7d\xcf\x57\x4c\x85\x6c\x21\x2f\x54\x7d\x80\x81\x3c\x64\x8d\xa4\x1b\xa0\x9b\x66\x93\x00\x7d\x2c\x18\x69\x24\x13\x91\x49\x65\x44\xa7\x0d\x08\xfe\xfb\x82\x17\x39\xb2\xa3\x9b\xb7\xdd\x45\xf9\x16\x93\x1c\x9e\x39\x33\x73\x66\x94\x62\x2b\x32\xf8\x88\x4a\xeb\xf4\x0e\xe9\x99\x67\x98\x5e\xb3\x0d\x1a\x13\xfe\xd2\x3a\xbd\xe4\x58\xe5\xf7\x2f\x35\x1a\xf3\x17\xaa\xb5\xcc\x9b\x38\x03\xad\x4b\x69\x7f\x83\xdd\xb5\x15\xab\xaa\x2b\xa1\x90\x0a\x96\xa1\x31\x09\xf0\x35\xfc\xae\x35\xb7\x3f\x65\x58\x2b\x49\xcd\xcd\x63\x69\x4c\x7a\xf5\xfa\xcb\x9f\x4c\xe4\x15\x12\x68\x0d\xbc\x80\xd3\xf4\x9e\x58\x86\x74\x21\xd8\x43\x85\x39\x18\x03\x89\xb2\x9b\xb2\x46\xa1\x88\x65\x5c\x94\xde\x84\x3f\x07\x5a\xa3\xc8\x8d\x59\x58\x34\x4f\x95\xdf\x72\x68\x1b\xd0\x27\x00\x10\xec\xb6\x10\x03\x7a\xf8\x60\x8c\xdb\xb5\x8b\x50\x6d\x49\xbc\x35\xa0\x77\x27\xbc\x1d\x62\xa2\x44\x38\xdd\x38\x13\xb0\x3c\x1b\x35\xda\xae\x48\xeb\x70\x23\x90\x1a\x2d\xe1\xfd\xe1\x53\xfa\xcd\x35\xbb\xec\xf9\x65\x8f\x81\xa4\xf7\xb4\x8d\xc4\x12\xb4\xce\x58\x55\xb5\x20\xd3\x8f\xc4\xea\xf5\xdf\x9f\x3e\x6f\x55\xbd\x55\x2e\x56\xa7\xe9\x1f\x32\x7f\x59\x49\xa1\xf0\xbb\x32\xa6\xdf\x56\x88\x45\x30\x72\x4e\xe5\x76\x83\x42\xf5\x3b\xd8\xae\x73\x2a\x9b\xe5\x1b\x12\x57\x52\x14\xbc\x6c\x2d\xf4\xfb\xd9\x79\x35\x50\xcc\xa8\xb4\xfc\x1e\x07\xa0\xcb\x38\xa3\xb2\x9f\xee\xd6\x94\xc7\xa5\xf7\x49\xb3\xb7\xfa\x48\x1a\x60\xa9\x83\x1b\x45\x3e\x8a\x6d\x98\xe7\xb1\x9b\xb7\xd8\xc8\xea\x19\x97\x60\x2b\x34\xae\xbb\xe4\x86\xad\x1b\x46\x6c\xd3\x2c\x20\xfe\x0a\xbc\xad\x3b\x6d\x12\x20\x24\x02\x24\x92\xb4\x80\x61\xd2\x33\xf5\xdd\xd2\x5c\xa7\xc1\xd3\xc1\x83\x5f\xe1\xcc\x1e\x1e\xdc\xef\xaf\xdd\xa9\x60\xd5\x8c\x50\xa8\xbb\x9a\x09\x8b\xa2\xa7\xc4\xed\xd6\x25\xc9\x4d\x80\x17\xef\x80\x2e\x46\xed\x36\xc1\xa2\xa2\xf4\x4e\x31\x72\x2f\xc4\x36\x2b\x0e\xe4\x2d\x3d\xac\xac\x96\x70\x8a\x92\x3e\x38\xab\x35\xaf\xf2\xcf\x45\xfc\x8a\xbb\xc5\x13\x2f\x16\xd3\x90\xc2\xd9\x01\x5f\xc3\xee\x17\xae\xd6\x0e\xef\xce\xd7\xc4\x5d\x1e\x37\x9f\x63\x81\xe4\xce\xa5\x97\x5c\xf0\x66\x1d\x8f\x9f\xdf\x19\x87\xb3\x2e\xb4\xd1\x3b\x36\x59\xe6\x9f\xf6\x88\x5c\xde\x2e\xc6\xab\xde\x2e\x5e\xf8\x8c\x7d\x77\x06\x82\x57\x23\x19\xdb\x5d\xce\xdd\x3b\x54\xf7\xac\x8c\x23\x97\xeb\x51\x02\x8a\xb6\xb8\x48\x3f\xc9\xd2\x4b\x78\xac\x75\x25\x03\xc3\x17\xf6\x48\x6c\xdf\x99\x08\x96\x5d\xe3\x99\x6b\x46\xf8\x75\x0d\x69\x34\xf7\x79\x61\xfb\xe2\xd9\x1c\x5f\xf7\x85\xf8\x16\x9f\xb6\xd8\xa8\x36\x4b\x67\xa9\x21\xe1\x53\x62\x95\xc0\xa7\xdd\x5e\x73\x38\x34\x17\xd5\x56\x1e\x9b\xe8\x50\xfe\xb4\xfe\x60\x51\x08\xa9\x86\xae\xda\xac\xbd\x20\x07\x28\xf1\xb2\x13\x0b\x5e\x2d\x42\x6f\x9e\x13\xfe\xa3\xa3\x1f\x9a\xb6\xe0\x95\x7b\xf1\x07\x03\x0a\xdd\x31\x60\x8f\xa4\x55\xc5\x51\x28\xdf\xe1\xed\x78\x63\x79\xca\x22\x88\x08\x9f\xde\x10\x35\xd9\x25\xaa\x06\xe7\x06\xcd\xc6\x4b\xe0\xb7\xb8\x1d\xb2\x2e\x25\x5d\xe3\xb7\xc3\x00\xf8\x91\x6c\x3a\x9d\xff\x07\xdf\xa6\x3a\xe0\x70\x39\x84\x36\xf4\xbe\x6f\x50\x0c\xef\x8f\xe7\x44\x90\x75\x3f\x2b\x1d\x88\xfc\xc0\xb4\xd4\x2e\xef\xfc\xfc\x29\xab\x5d\xbe\xf1\x2e\xa1\x1e\x3e\x36\xec\x71\xb7\x26\xf9\xba\xed\xe5\xb6\xf6\x62\x4b\x46\xe2\x75\xd3\xf1\xd2\x3b\x3d\xef\x3a\x83\xb0\x12\xde\x77\xa2\x63\xf2\x4a\x3c\xcb\x47\xa4\x05\xc4\x84\xcd\xb6\x52\xfb\x83\xc2\xac\x39\x01\x7e\x92\x12\xf5\xe5\xe0\x2f\x21\x42\xc7\xd5\xa6\x17\x9e\xb9\xb5\x99\x58\x8d\xfa\xe1\xea\x19\x2e\xf1\x63\xc4\xb3\x2b\x9a\x5a\x3b\x8e\x42\xc2\x7c\x21\x56\xc7\x48\x94\x40\x54\x30\x6e\xa7\x37\x25\x81\x3c\xb3\xc0\x6c\x40\x86\x11\x8c\x25\xba\x7b\x8f\xaf\xdd\x97\x61\x48\x6e\x97\xfd\x73\x33\xdc\x2a\xe1\x5e\xc2\x0e\xa6\xbc\x7d\xc1\x57\xf3\x4f\xca\x78\x4a\x40\x3e\xda\x12\x25\x7c\x4a\x77\xb1\xfe\x37\x0a\xcc\x0b\x78\x27\x1f\x67\x34\xb6\xe1\xf8\x5c\xbb\x74\x2b\x36\xaa\x9d\x8c\x89\x0b\x55\xc4\xd1\x6d\x27\x44\xd0\x21\x25\x98\x6a\xe0\x81\xe5\xd6\x01\x0b\x15\xd4\x4b\x8d\xf1\x6f\xf7\x8b\x14\xee\xd6\x72\x5b\xe5\xf0\xe0\x3e\x7e\xc6\x1c\x8b\x5c\x08\x26\x06\xa6\xf1\xa2\xf1\x83\xa3\x8d\x75\xea\x55\x73\xf2\x73\x03\x5c\x51\x74\xe4\xe6\x86\xbd\x54\x92\xe5\x6e\x82\x5b\xad\x31\x7b\x9c\x2d\x39\xcd\xd0\xf0\x33\xd8\xfb\x8e\xeb\x7c\xf0\xcb\x8c\x2f\xbc\x38\x74\xb1\x8f\xb5\x88\xb0\x89\x8c\x99\x89\x72\x5f\xf4\xbb\xf6\xce\xb3\x0c\x9b\x46\xce\x0b\xc3\x0e\xa2\xcf\x81\x57\x2b\xf0\x26\x2c\xbd\x6f\x04\xd0\x73\x21\xcf\x96\xf2\x31\x5c\x84\xcd\xec\xf7\x26\xc4\xbb\x5d\xb3\x7b\x4b\x9b\xb6\x13\x05\x72\x6c\xcb\xfa\x6f\x2a\x60\xfa\x7b\x67\x40\x1d\x7b\xfe\x27\x72\xf0\x53\x0f\xb7\xe6\x64\xc0\xf7\xd7\x82\x3a\xd9\x47\x65\x4e\xfe\x09\x00\x00\xff\xff\xa4\xdc\xbe\x7f\xe0\x14\x00\x00")

func templatesTypes_serviceGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_serviceGohtml,
		"templates/types_service.gohtml",
	)
}

func templatesTypes_serviceGohtml() (*asset, error) {
	bytes, err := templatesTypes_serviceGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_service.gohtml", size: 5344, mode: os.FileMode(420), modTime: time.Unix(1542637119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/schemas_body.gohtml":  templatesSchemas_bodyGohtml,
	"templates/schemas_head.gohtml":  templatesSchemas_headGohtml,
	"templates/types_body.gohtml":    templatesTypes_bodyGohtml,
	"templates/types_head.gohtml":    templatesTypes_headGohtml,
	"templates/types_service.gohtml": templatesTypes_serviceGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"schemas_body.gohtml":  &bintree{templatesSchemas_bodyGohtml, map[string]*bintree{}},
		"schemas_head.gohtml":  &bintree{templatesSchemas_headGohtml, map[string]*bintree{}},
		"types_body.gohtml":    &bintree{templatesTypes_bodyGohtml, map[string]*bintree{}},
		"types_head.gohtml":    &bintree{templatesTypes_headGohtml, map[string]*bintree{}},
		"types_service.gohtml": &bintree{templatesTypes_serviceGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
