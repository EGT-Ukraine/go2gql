// Code generated by go-bindata.
// sources:
// templates/schemas_body.gohtml
// templates/schemas_head.gohtml
// templates/types_body.gohtml
// templates/types_head.gohtml
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSchemas_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x3a\x10\x5d\xcb\x5f\x31\x10\x8c\x7b\xed\x42\xd1\x07\x18\xf0\xca\x48\xd3\x2e\x9a\x47\x93\x5d\x51\x14\x0a\x3d\x72\xd8\xd2\x64\x4a\x51\x09\x82\x01\xff\xbd\xe0\x4b\xa2\xad\xd8\x88\x56\xd4\x3c\xcf\x9c\x43\x8e\x79\x7b\x46\x20\x9a\xd7\xf7\xec\x09\xf7\xcd\x75\xb3\x47\x6b\xc3\x79\x23\x38\x4a\xd3\x41\x67\x74\xcf\x0c\xd0\xac\x20\x02\xdd\xc8\x1d\xc2\xbc\x43\xfd\xc2\x19\xc2\x6a\x0d\xf3\xfa\x3e\xfc\x74\x70\x61\xed\xac\x28\x88\x92\xbb\x0e\xe5\x42\x21\x20\xda\xa9\x07\xd7\x6e\x70\x07\xc7\x95\xb7\xba\x54\x22\x40\xb9\xf5\x65\xec\xac\xed\x25\x83\x2b\x34\xef\x83\x5b\x30\xd1\x9d\xc7\x5d\x01\x7f\x82\x4f\x44\x5c\x1a\xd4\x0c\x9f\x8d\xd2\xdd\xed\x9f\x9d\xb5\xf5\xd7\xd1\xf2\xa5\x91\x5b\x81\x9a\xe8\x02\x78\x0b\xf3\xfa\x41\x37\x0c\xf5\xa5\x6c\x1e\x05\x7a\x20\x15\x18\x0d\x44\xc6\xdb\x43\x7a\x88\x71\x29\x11\xec\x12\x16\x44\xbb\xbf\x22\xb8\x03\x88\x0a\x50\x6b\xa5\x97\x1f\xa7\x8d\xb7\xc0\x44\x57\x9f\x62\x6f\xbd\x06\xc9\x85\x2b\x57\x14\x1a\x4d\xaf\x25\x4c\x9a\x92\xad\x80\xc8\x37\x8e\xa3\x5e\xba\x73\xbb\x28\x63\x2f\x60\x49\x8a\xa3\x26\xc0\x1a\xf9\xbf\x81\x47\xf4\x4d\x24\x17\xe5\x72\x56\x14\x87\x92\x7c\x70\x8e\x97\x46\x4f\xeb\x7f\xe6\x28\xb6\x1d\xac\x81\x28\x3a\x36\x4a\x86\x8b\xa5\xf4\x58\x6f\x6e\xed\xe2\x0c\x09\x4e\xd2\xf3\x52\xe5\xaa\x44\x2c\xbf\x7c\xd7\x77\xf1\x9c\x1a\x4f\x3d\xfe\x46\x66\xc2\x74\x37\xfe\x7c\x34\x5c\x08\x48\xdc\xad\x73\x25\xae\xf1\x35\xa4\xe4\x77\x22\x58\x36\x4a\xb6\x7c\xe7\x15\x74\x99\x2b\x28\x8f\x4b\x95\x95\x73\x12\xb9\x09\xe5\x00\xa4\xbe\xeb\x95\xc1\xed\x46\xed\xf7\x4e\xbc\xb2\x8c\x60\x8a\x22\x9a\x56\x19\xa6\x83\x58\x6b\x53\xc1\x61\xca\xa2\x08\xb3\xaf\x72\xd0\xc1\xe4\x91\xc5\xee\x02\xe5\xd0\x3e\x8a\x97\x9a\x66\x44\xb5\x62\xeb\x59\x3a\x11\x18\x6b\xb9\xb0\x74\x4b\xbc\x13\xce\x7c\x8e\x13\x17\x1f\x09\xf1\xa3\x65\xf9\x07\xfa\xfd\x38\x0a\xfe\x59\x8d\x7d\x51\x74\x98\x21\x29\x26\x75\xff\x3b\x9e\x9f\x52\x68\xa6\x4e\x96\x51\x0d\x6e\xb7\xae\x06\x5c\x37\xb9\x7e\x63\xcc\x77\xec\x94\x78\xc1\x15\xb8\x35\xb6\x78\xce\xc9\x8e\xae\xdb\x46\x37\xfb\x6e\x09\x0b\xbf\xa0\xda\x86\xa1\x7b\xbe\xe3\xd6\x48\x5f\x7c\xec\xe1\xb1\x90\x75\x41\x92\x8b\xc1\x3f\xf6\xb4\xf9\xf4\xa3\xdc\x93\xff\x09\x39\xa5\x54\x81\xcf\x73\xac\x44\x4e\x86\xd0\xd4\x2c\x91\x31\xae\x22\xa3\xb9\xdc\x45\x77\xc4\x74\x88\xc0\x1b\xdd\xfb\xcc\xcd\xd3\x9d\x76\x8d\xaf\x71\xd7\x4f\x16\xdd\xf8\x92\xee\x7a\xd4\x6f\x5e\x8c\xda\x1f\x83\x1c\x41\x89\x78\xfb\xea\x6f\xbd\x69\x0c\x57\x32\xf8\x12\x8a\x64\x0d\xc9\x87\x31\x43\xfe\x00\xcf\x2e\x67\xf6\x5f\x00\x00\x00\xff\xff\x08\x3e\x34\x19\x2c\x07\x00\x00")

func templatesSchemas_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_bodyGohtml,
		"templates/schemas_body.gohtml",
	)
}

func templatesSchemas_bodyGohtml() (*asset, error) {
	bytes, err := templatesSchemas_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_body.gohtml", size: 1836, mode: os.FileMode(420), modTime: time.Unix(1533035309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemas_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesSchemas_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_headGohtml,
		"templates/schemas_head.gohtml",
	)
}

func templatesSchemas_headGohtml() (*asset, error) {
	bytes, err := templatesSchemas_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1532510936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x73\xdb\x36\x12\x7f\xa6\xfe\x8a\x2d\x2f\xcd\x90\x1d\x56\xbe\x67\x75\xf4\xe0\xf1\xc5\xb9\x4c\x9b\x8f\x8b\x3d\xed\x83\xeb\x71\x11\x0a\x92\x70\xa2\x40\x1a\xa4\x64\x7b\x38\xfc\xdf\x6f\xf0\x45\x02\x24\x48\x51\xae\x7c\x97\xeb\x84\x0f\xa9\x05\x2e\xb0\x8b\xc5\xee\x0f\xfb\xc1\x9e\x9d\xc1\x1b\xba\xdb\xe6\x93\xb2\x64\x88\xae\x30\xbc\xc2\x74\xb7\x85\xd9\x1c\xa6\x97\x24\xc1\x53\xf1\x12\x7e\xac\xaa\x89\xb7\x47\x0c\xca\x52\xbc\x9f\xfe\x8a\x18\x41\x5f\x12\xfc\x01\x6d\x71\x55\xc1\x1c\xca\x72\x75\x9f\x7c\xda\xac\xaa\x6a\xfa\x01\x3f\xf0\x59\x81\x31\xc4\x7f\x5f\xa4\x74\x49\x56\xe5\xc4\xf3\xf8\xa4\x19\xa8\xc7\xd7\x4b\xbe\x65\x28\x5b\xff\xeb\x17\xb9\xa2\x1f\x4d\x3c\xaf\x2c\x81\x2c\xa5\x40\xd3\x8b\x74\xbb\xc5\xb4\x90\x92\x78\xde\x3f\x70\x1e\x33\x92\x15\x24\xa5\xb3\x5a\x28\x45\x53\x55\x6a\x32\xa6\x0b\x45\xff\x2b\x4a\x76\x38\x9f\x41\x4b\x24\x31\x2c\xe5\x7a\x8f\xb2\x72\x02\xc6\x53\xeb\x63\xcf\x89\xb8\x42\xf4\xce\xf9\x52\x5a\x0e\x8f\x8b\x2f\x28\xa6\x4a\xf0\x19\xbc\xee\xe7\x52\x8a\x39\x52\x1c\x21\xb7\x9c\x2a\x7e\x4b\xb1\x3d\xbd\x6d\xaa\x59\xd7\x5b\xff\xc3\xf7\xff\xa8\xf9\x76\x55\x60\x11\x9b\x8b\x35\x6a\xf0\x3c\x39\x5c\x96\xcd\x18\x1f\xa9\xc2\x49\x33\x34\x99\x9c\x9d\xc1\x3b\x9a\xed\x0a\x48\xbf\xfc\x1b\xc7\xc5\xa4\x2c\x41\xe9\x42\x0e\x34\xd6\x21\xc8\x3e\x8a\x41\xdb\x48\x24\xe1\x21\x33\x31\xa6\x9b\xd6\x62\x0c\x6b\xb5\xe9\x53\x91\xa6\xe3\x37\x1c\xda\x56\xa3\x09\x2f\x09\x4e\x16\xf6\x89\x77\x96\x15\x34\xfc\xe0\x2b\x39\xaf\x0a\x27\xde\x72\x47\x63\x20\x94\x14\x41\x58\x0a\x2b\x52\x3b\x5f\x72\x5a\x61\x05\x8a\xb1\x64\xa0\x15\xdb\xb7\x65\x45\x16\x84\x37\x5c\x66\xb1\x88\x36\x94\x5b\x98\x5b\xa6\x62\x88\x27\x26\x95\x9f\x18\xd9\xa3\x02\x37\x5b\xb6\xa6\x47\x70\xfd\x94\x09\x23\x8a\x51\x92\x28\x01\xa7\x7c\x0c\x5e\x55\x42\x28\xe3\x94\xab\x89\x61\x07\xed\xf3\xcd\x81\xe1\x3c\x4d\xf6\x98\xe5\xc6\x51\xeb\x31\xe7\x61\x7f\xd6\x13\xc4\x82\x42\x67\x65\x59\x4f\x99\x5e\xee\x68\xcc\xed\x52\x8a\x1a\x28\x3f\x9e\x5e\x33\x14\x63\xf6\x86\x72\xf5\x2c\xa0\xaa\xa0\xe0\xb6\x52\x88\x51\xa9\x03\x49\x11\x81\x10\xbd\xaa\xe2\xe2\x91\xef\xaf\x78\x94\x6f\x2f\x52\x5a\xe0\xc7\x22\x02\x02\x84\x16\x98\x2d\x51\x8c\xcb\x2a\x84\xe0\x8e\x1f\x73\x2a\xf7\x5e\x0b\xf1\x71\x57\x64\xbb\xe2\xad\x18\xae\xaa\x08\x18\x66\x0c\x30\x63\x29\xe3\x27\xeb\x96\x49\x9e\x66\x9e\x21\xca\xb7\x5d\xb0\xe9\x05\xc3\xa8\xc0\x17\x6b\x92\x2c\xae\x32\x44\x2f\x59\xba\x55\x52\x04\x71\xf1\x18\x89\x63\xe9\xd9\xb6\x1f\x4e\x3c\x6f\x81\x97\x98\x01\x5f\x70\x7a\x49\x28\xc9\xd7\x41\x33\xca\xd5\x26\xad\xcc\x23\x4b\xc8\xb8\x78\xb3\x39\x30\x1c\xa7\x7b\xcc\x82\xf0\x27\x39\xf4\xdd\x1c\x28\x49\x40\x22\x87\x58\xe8\x0a\x17\xd7\x68\x15\xf8\x62\x2f\x7e\x04\x7e\xc1\x76\xd8\x0f\xed\xf1\xbb\x2d\xce\x73\xb4\xc2\x7e\x24\x96\x69\xbf\xcd\x0b\x14\x6f\xfc\x08\xf2\x82\x11\xba\x0a\xca\x72\x81\xbf\xec\x56\x52\xcd\x57\xfc\x5d\x10\x86\x5c\x52\xaf\x52\xe2\xb1\xd3\xc8\xc2\x97\x99\xbe\xe1\x83\x41\xb3\x7e\xc5\x95\x62\x58\x2b\x59\x02\x81\x79\xc3\x8b\xe1\x62\xc7\x28\xff\x19\xf1\x7f\xb8\x39\x7b\x88\xad\x72\xae\x2e\x32\x0d\xb6\x28\xbb\x91\xfb\xb8\x35\xcd\x62\xe2\xdd\xc1\x1c\x38\x9d\x44\x25\x86\xf3\x5d\x52\xc0\x1c\x28\x7e\x08\xb4\xbd\x5c\xa6\xec\x03\x7e\xe8\xb5\x1a\x21\x17\x74\x20\xa0\x39\x71\x13\x04\x94\x49\x49\x47\x7c\x97\x73\x5b\x39\xe7\x52\x2a\x88\x20\x4b\x21\x8c\x01\x04\x0a\xbb\x84\x5f\x89\x95\x6a\x64\x30\x14\x6d\x03\xb8\xe4\x41\xf2\x73\xc6\xd0\x93\xe6\x25\xa5\xad\x31\x9e\x08\xe3\x1d\xcb\x6b\x1a\xdc\xb4\xd4\xe6\x71\x8d\x73\x5d\x4d\xeb\xd9\x52\x2b\xc6\x3c\x98\xc3\x16\x6d\x70\xd0\xf8\x9d\x29\x0a\x77\xb7\x04\xd3\x80\x50\x79\xc8\xde\x32\x65\x40\x22\xd8\xa3\x44\x98\xb8\xd0\x27\xa1\xca\x90\x6c\xc5\x69\x68\xf9\x8d\x14\x6b\x61\x28\x50\xdf\x78\xfb\x08\x94\x93\xd8\xa0\x27\xae\x4f\x3d\x0f\xfc\x3d\x4a\x7c\x8e\x81\x6a\x16\x59\x42\xc7\x76\x3d\xdb\xa8\xca\x52\xd8\x69\x2e\xed\xff\x37\x86\xb2\x00\x33\x16\x81\xbf\x44\x84\xc3\x42\x91\x6a\x88\x04\x62\x00\x27\x08\xf6\x7e\xa8\x96\xd4\x0c\x0f\x2a\xef\x86\x70\xec\xdf\x37\x17\x74\x92\x63\xe3\x62\x1f\x39\xff\x08\x1d\xb4\x83\x80\x89\x83\xef\x81\x43\xa8\xc5\x1b\x77\x08\x41\x9c\xd2\x18\x15\xe0\x0b\x33\xfc\xdd\xf7\x61\xc8\x0e\xc1\xff\xdd\xbf\xf5\xc3\x46\x60\xf7\x99\x9d\xfc\xc8\x14\xb7\x31\xd6\xbe\x9f\x38\x0f\x6b\xcc\xd4\x97\xd3\x53\x07\x1b\x9a\x5f\x07\xc0\xa8\x6a\x21\x8b\xfd\xb7\x8e\xf6\x28\x4e\x97\x36\xe0\x7d\xa4\xf8\xe3\xb2\x85\x7a\x8a\x9a\xd0\x05\x7e\x8c\xac\x48\x89\xcf\xef\x04\x4a\xfc\x6c\xef\x15\x39\xfc\xdd\x40\xc7\x43\x58\x75\x17\x41\xba\x39\x06\xda\x7e\xe2\xf4\xaf\x5f\x1f\x5e\xb8\x31\x34\x68\x3d\x23\xbc\xa2\x3d\x85\x3f\xc7\x39\xc9\xf0\x91\xdf\xa9\x03\x77\xf1\x69\xfb\x89\x8b\x86\x3f\xcf\xf4\x9c\x94\x9f\xb6\xe5\x39\x07\x75\xe9\x87\x4e\x21\xba\xe2\x9b\xae\xe4\x54\xe1\xcb\x6a\xaf\x09\x37\x06\x8f\xfc\x3c\xcf\xc9\x8a\x12\xba\xe2\x7a\xca\x70\xff\x89\x37\x40\x20\xad\xfe\x30\x10\x74\x96\xf6\xf7\x7e\x8f\xa8\xc3\x9a\x1a\xc3\x7a\xef\x5c\xb5\xc1\x8e\xaa\x2c\x35\x0f\xc9\xec\x9b\x3f\x7e\xf3\x47\x5b\x85\xdf\xfc\x71\xa4\xa6\x4e\xe5\x8f\x3a\x5d\x57\x99\xbc\xbc\x9a\xe5\x1f\x13\x1d\x0b\x49\x5e\x32\x2d\xb2\x92\xfc\xb3\x33\x90\x7c\x75\x92\xef\xac\xe2\xbc\x92\x99\xbd\xa4\x7c\x7e\x1d\xa7\x5b\xc2\xb1\xab\x37\xba\xe4\x37\x50\xb7\xf1\x3c\x47\xc5\x46\x0e\x95\xaa\x44\xd5\xad\xcd\x74\x33\xb3\xe3\x8a\x33\xe7\x8b\x85\xa0\x94\x72\x06\x8e\x1a\xcb\xeb\xb6\x34\x32\x16\xed\xab\xc9\x88\x97\x43\x75\x19\x49\xa1\x7c\x66\x26\x4b\x00\x99\xb9\x65\xf5\xea\x13\x62\x68\x9b\x87\x10\x18\xa9\x59\xa4\xaa\x17\x06\xae\x78\xe2\x9f\xfc\x81\x14\xf1\x1a\x72\x16\x73\x1d\x64\xd3\xab\x74\xc7\x62\x3c\x0d\x8a\xa7\x0c\x87\x3a\x78\x8e\x51\x8e\xe1\x87\x26\x5f\xd3\xe7\xa0\x12\xb6\x99\xce\x8b\xc8\x52\x2c\x34\x6f\xa5\x4b\xdd\x24\xdc\x4e\x7a\x3c\x91\x8d\xff\x90\xb3\x58\x0f\x88\x48\x4f\xeb\x07\xe3\xc5\x05\xca\x0b\x23\xcb\xa9\x57\xac\x95\xc8\x09\xae\x53\x51\x2f\xea\xa0\x0c\xf8\xb9\x70\xc6\xd0\x62\xde\x5c\x5a\xdd\x45\x7b\x97\x68\xad\x60\x65\x46\x4a\x4d\x87\xb5\x74\xea\xcd\xb1\xf8\x04\xdb\x53\x8b\xb4\xd7\x30\xf7\x57\xa7\x2d\x7d\xf7\xcf\x07\xfc\x10\xf8\xb9\x30\x20\x48\x97\xb0\xa3\x1b\x9a\x3e\x50\xe0\xa6\xa4\xb2\x26\x69\xc3\xa2\x50\xd0\xce\x38\xfa\xdc\xf1\x3d\xca\xbe\x79\xe4\x7f\xcf\x23\x5d\x97\x92\x7e\x3a\x6e\xaa\x4a\x63\x70\x73\xeb\xae\xa3\x69\xba\x65\xca\x60\x83\x9f\x44\x11\x47\xf6\x43\xe4\x69\x0f\x78\x9a\x25\x6b\x0e\x73\xe0\xf7\x2a\x5d\x04\x0c\xe7\x11\xb8\xb9\x35\x33\x3c\x7f\x83\x9f\xfc\x19\x80\xe0\x6a\x0c\x0b\xfe\xfe\x4c\xca\xd1\xbc\xa8\xc2\x0e\x24\x35\x77\xa4\xa9\xa0\x91\x1e\xfe\x32\x7a\x51\x2e\xfa\x55\x6a\xe6\xe5\xb0\xa1\x1d\x99\xbc\x47\x59\x6e\x95\x65\xdc\xd1\x89\x0c\x4e\xde\xa3\xec\xaf\xd1\x66\xba\x5e\xef\xe8\x26\x90\x55\xff\x51\x13\x5a\x09\x44\x8d\xfd\x23\x3a\x5a\x13\xc3\x4e\x86\x9a\x4c\x6a\xe3\x36\x40\xaa\x3d\xff\x8c\x9f\x24\x65\xdd\x54\x92\xfb\xf6\xb4\x40\xb5\xc1\x3d\x97\x83\xf0\x0a\x27\x0f\xfd\x34\x60\x56\x85\x75\x93\xee\x90\x31\x8d\xec\x67\xd9\x86\x65\xb7\xb4\xbc\xaf\xa0\xa7\xc5\x71\xc0\xd1\xd7\xfa\x19\x3f\x69\xb0\xba\x75\xbc\x16\x3a\xed\xeb\x7a\x0d\xb6\xbd\x4e\xd9\xf7\xea\x69\x7c\x75\x3b\x5f\xa3\x5b\x5f\xff\x83\xde\x97\x42\x44\x67\xf7\xeb\x44\xed\x2f\xc9\x42\x34\xc0\xac\x50\xad\xdd\x02\x73\x5c\xf6\x82\x8c\xaa\x1e\x58\xa7\x87\xa3\xba\x5d\x33\xd5\xa7\x39\x81\x2d\xf1\x55\x55\x1f\x87\x38\x1b\x39\x77\x30\x07\x32\x11\x57\xa7\x78\xcb\xa9\x06\xba\x73\x9e\xb7\x89\x64\x55\x61\x8f\x92\x1b\x81\x55\xb7\x91\xfc\x5b\xe2\xca\xad\x58\x34\x02\xbe\xee\x26\xda\xd7\xd5\x63\x4b\xfc\xfe\x4e\xc5\x66\xd3\x29\xfa\xb8\x26\x82\xbf\x69\x3a\x25\xce\xbe\xc3\x70\xb1\x66\xd9\x5b\xad\xf9\xdb\xf7\x0b\xee\xc3\x80\x13\x2c\xbe\xdf\xe0\x3b\x8c\x80\x84\x66\x0f\xc6\x0a\xf0\x37\x9b\x63\x84\xb5\x22\xfb\x96\x62\xac\xca\x4c\x57\x35\xfb\x6e\x3d\xcc\x3d\xb5\xae\x81\xbc\xb8\x72\xe4\x91\x0f\xaa\x67\xbf\x3f\x4e\x60\x4b\x41\xd2\x1f\x6e\x36\x9b\xdb\xf9\x7e\xaf\xbc\xc7\x51\x43\xe9\x7e\x29\x21\xae\x97\xf4\x70\x29\xa5\xbe\x53\xbe\x82\x62\x8a\xce\x45\xfa\x4b\x2a\xcd\x87\x3f\xdd\xaa\xca\xc8\xd4\x4c\x9a\xb3\x3b\x1d\x53\x12\x0a\x92\x49\x27\x01\xeb\x8b\x2f\x04\xe9\x9f\xce\xc4\x04\x38\xb7\x13\xaf\x01\x14\x72\xe7\x57\xae\xe4\xaa\x9a\x18\x6f\x72\x16\xd7\xa0\xa5\x08\xc4\x06\x54\xf0\x3b\x52\x89\xda\xec\x07\xd5\xa8\x88\x7a\x15\xe9\x08\xa3\xfe\xff\x54\xa9\x30\xbf\xab\xcc\xca\xfc\x36\xed\xec\x0c\xae\x30\xdb\x93\x18\x9b\x5e\x98\xcb\xa1\xc6\x0d\x35\x8d\x11\xcb\xbd\xc5\x45\x59\x6a\x4a\x55\x1e\x50\x64\xef\x71\xb1\x4e\x17\x79\x10\x1b\x69\xa1\x26\xbc\x40\x49\xf2\x4e\x6f\x93\x07\x54\x64\xcd\x73\x76\xb1\xf3\x18\x67\x45\x0d\x77\xef\x9a\x91\x7f\x22\xba\x48\x30\x83\xde\x18\x31\xea\x09\x12\x75\x8c\x18\x76\x3d\x16\x8c\xe8\x4d\xcb\xa6\xe4\x6e\x20\xae\x9d\x1f\x34\xce\x6e\xf4\x69\xb7\x62\x96\x28\xcf\xf4\x2c\x24\xbf\x6a\x94\x74\xee\xcf\x1a\x8d\xc2\x8b\x09\x47\xf6\x14\x9d\x81\xda\x36\xab\x68\x14\x64\x49\xb0\xb4\x6b\x31\xf5\x3e\x15\xe9\x39\x5b\xed\xf8\x1d\x91\x9b\x95\xb0\x73\xb6\x72\x00\x9b\x74\x2b\x3d\x81\x0b\xd8\xae\x7f\x98\x75\x2a\xc4\x56\x42\x0d\x43\x7c\xa4\x2e\x10\x5b\xb9\x15\xa1\xe7\x38\xb3\x1c\x3e\xcb\xc8\x6b\xf4\x82\x9d\x9a\xa3\x67\x6e\xdc\x7e\x75\x84\x0b\xdf\x81\xe5\xc4\x46\xe0\x3f\xd0\x88\xe2\x0f\xcf\x48\x84\x87\xab\x08\x7f\x90\x98\x07\x63\x71\xf1\x68\xd4\x4f\xfb\xf3\x89\x3a\x4e\x3e\x9c\x54\x64\x4d\x22\xe4\x77\xdc\x74\xda\x36\x2d\xd0\xd7\x7d\xfd\xed\x8d\x3b\xe1\x18\xda\x08\x7f\x6a\xae\xe2\x12\x4e\x33\x4c\xb9\x4f\x12\xba\xb2\x72\x33\x1e\x3f\x71\x79\x65\xe6\xc3\x39\xb4\xb9\x9a\xf9\x8c\xd7\x9f\x32\xf4\xe7\x0d\x3c\x6d\x08\xa7\xbf\xa4\x2b\xf5\xb9\x68\x59\x26\xa9\x12\x42\x66\x0b\x7c\xb5\xb0\x61\xdb\x54\x72\x54\xee\xa0\x0e\xa3\x65\x57\x3c\x8b\x58\x77\x0b\x87\xb6\x7b\x7d\xc6\xf7\x3b\x9c\xd7\xf9\x6f\x6f\x5b\xcb\xf2\x22\x86\xef\x3b\x21\x64\xcf\x7a\x7e\xc6\xbd\x44\x56\x04\xcb\xf2\x47\xf1\x6d\x73\x5a\xf4\x91\xab\x60\x95\x4b\xa1\x2e\xa2\x80\x92\x24\xd4\x8d\xaf\x43\x82\xc1\x11\x4d\xd8\xd6\x86\x9a\x4b\x0a\x33\x36\x6a\xd2\x38\x71\x5a\x25\x7b\xb5\xed\x8b\x84\x60\x5a\x48\xe0\xe5\x77\x0c\x57\x54\xec\x83\xcf\xf0\xbd\xf9\xf1\x9a\xeb\xfb\x30\x01\xf5\xf7\x5c\xf3\xae\x2f\x19\x6d\xb5\xea\xd4\x6d\xec\xfe\xff\x8c\x94\x2d\x4c\xab\x8d\x50\xe1\xcb\x6b\xd7\xad\xa9\x5c\xac\xb1\x4d\x75\x25\xcf\x1c\x30\xe0\x37\x10\x2a\x25\x1a\xba\x74\x3c\x4f\x02\xe3\x0c\xb2\xc8\x51\xfe\x6c\xac\x97\xac\x35\x92\x72\x2b\x0d\x88\x70\x72\xe1\xd0\x42\x70\xe7\x5d\x5f\x63\x15\xe5\xd8\xe1\xa2\x30\x96\x7c\x47\xf7\xe9\x06\xb3\x10\x02\x95\x93\xb7\x63\x2d\x3b\xde\x3a\x99\x83\xba\xce\xf3\x45\x7d\xf3\x80\xc5\x4a\xff\x1a\x6b\xb1\x56\x4b\xc3\x65\x5e\xa1\x01\x72\x4e\xa8\x7d\xe6\x37\x16\x88\xeb\xa3\xb7\x62\x4e\xd6\x22\x22\x54\x66\x22\xec\x68\xac\xad\x70\x9f\xb5\x8e\xbe\xd7\x78\x38\x07\x69\xe1\xcf\xb0\x1d\xa6\xbf\xca\x61\xf8\x7e\x6a\x7c\x9f\xeb\xc6\x05\xaf\x51\xe2\x77\xe9\xc6\xbc\xa8\x86\xdb\x00\x65\xb9\xdc\x16\xaa\x64\x96\x31\x42\x8b\x65\xe0\x7f\x36\x34\x08\xc6\xae\x14\x02\xe6\xf0\x05\x2d\xb8\x54\x9c\xbf\x68\x1a\x04\xdf\x5f\x87\x53\xb8\x5a\xa7\xbb\x64\x01\x5f\x44\xe0\x34\x24\xad\xa8\x9f\xdd\x1b\xb7\xa0\x69\x72\x86\xbf\x7c\x42\x4f\x49\x8a\x16\xe2\xe2\xbc\x58\xe3\x78\x33\xd2\x67\x24\x58\xe7\x7d\xf7\x5a\x2f\x16\xba\xbf\x12\x71\x3d\xcf\xb9\x99\xa0\xf5\xb9\xd0\xe9\x2e\x27\xf9\xcd\xa5\xb5\x47\x97\xea\x7c\x86\x73\x5f\xb4\xac\xc6\x8a\x6b\xc3\x97\xb9\xe6\x79\x1c\xe3\x3c\x1f\xf8\x50\xab\xef\xe1\xfe\x65\xad\x04\x9d\xf3\x71\xf2\x51\xc2\x1f\x23\xfa\xe0\xb7\x3d\xc7\xc8\xc7\x70\x7e\x14\x5f\x1b\xe0\x4c\xf3\xb6\xfa\x75\x63\x0c\xc0\xa8\x9c\x8d\xe1\x7e\xe4\xe5\xdf\xbe\xfa\xfb\xa0\x59\xa7\x35\xea\xbf\xad\x2f\x9c\x26\xed\x02\x5f\x63\xe5\x03\xff\xf3\xd2\x7f\x02\x00\x00\xff\xff\x47\x96\xfe\xd2\xb0\x38\x00\x00")

func templatesTypes_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_bodyGohtml,
		"templates/types_body.gohtml",
	)
}

func templatesTypes_bodyGohtml() (*asset, error) {
	bytes, err := templatesTypes_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_body.gohtml", size: 14512, mode: os.FileMode(420), modTime: time.Unix(1533563303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xc1\x4a\xc4\x30\x14\x85\xe1\xb5\x79\x8a\xc3\xd0\x85\x2e\x26\x01\x97\x82\x0b\x61\x06\xe9\xc6\xba\x88\x0f\x70\xdb\x5e\xd3\xd0\x36\xad\x49\x44\xe4\x72\xdf\x5d\xd0\x82\xbb\x9f\xef\x1c\xe7\xe0\xa7\x58\xf0\x1e\x17\xc6\x17\x15\x04\x4e\x9c\xa9\xf2\x88\xfe\x1b\x21\xd6\xe9\xb3\xb7\xc3\xb6\xba\xeb\xb3\x3f\xbf\xcd\x99\x62\x62\x17\xb6\xfb\xf0\xb1\x58\x5c\x3a\xbc\x74\x1e\xd7\x4b\xeb\xd1\x7a\xb3\xd3\x30\x53\x60\x88\x34\xf6\x68\x55\x63\xe2\xba\x6f\xb9\xe2\xd6\x88\x64\x4a\x81\xd1\x1c\xf2\xf0\x88\xc6\xfe\x75\xc1\x59\xd5\xdc\x88\x1c\x9b\x7d\x5a\x22\x15\x55\x9c\xfe\xe9\x95\xea\xa4\x7a\x32\x22\x9c\xc6\xdf\xff\x9d\xf9\x09\x00\x00\xff\xff\xc2\xe3\x00\xe2\xbf\x00\x00\x00")

func templatesTypes_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_headGohtml,
		"templates/types_head.gohtml",
	)
}

func templatesTypes_headGohtml() (*asset, error) {
	bytes, err := templatesTypes_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1532510936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/schemas_body.gohtml": templatesSchemas_bodyGohtml,
	"templates/schemas_head.gohtml": templatesSchemas_headGohtml,
	"templates/types_body.gohtml": templatesTypes_bodyGohtml,
	"templates/types_head.gohtml": templatesTypes_headGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"schemas_body.gohtml": &bintree{templatesSchemas_bodyGohtml, map[string]*bintree{}},
		"schemas_head.gohtml": &bintree{templatesSchemas_headGohtml, map[string]*bintree{}},
		"types_body.gohtml": &bintree{templatesTypes_bodyGohtml, map[string]*bintree{}},
		"types_head.gohtml": &bintree{templatesTypes_headGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

