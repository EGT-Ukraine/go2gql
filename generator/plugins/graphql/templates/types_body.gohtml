{{- /*gotype: github.com/EGT-Ukraine/go2gql/generator/plugins/graphql.BodyContext*/ -}}
// Enums
{{range $enum := .File.Enums -}}
	var {{$enum.VariableName}} = {{gqlPkg}}.NewEnum({{gqlPkg}}.EnumConfig{
		Name:        "{{$enum.GraphQLName}}",
		{{ if $enum.Comment -}}
			Description: {{$enum.Comment}},
		{{ end -}}
		Values: {{gqlPkg}}.EnumValueConfigMap{
            {{range $value := $enum.Values -}}
				"{{$value.Name}}": &{{gqlPkg}}.EnumValueConfig{
					Value: {{$value.Value}},
					{{ if ne $value.Comment `""` -}}
						Description: {{$value.Comment}},
					{{ end -}}
				},
			{{end -}}
		},
	})
{{end -}}


// Input object
{{ range $object := .File.InputObjects -}}
	var {{$object.VariableName}} = {{gqlPkg}}.NewInputObject({{gqlPkg}}.InputObjectConfig{
        Name: "{{$object.GraphQLName}}",
        Fields: {{gqlPkg}}.InputObjectConfigFieldMap{},
    })
	func init(){
		{{range $field := $object.Fields -}}
			{{$object.VariableName}}.AddFieldConfig("{{$field.Name}}", &{{gqlPkg}}.InputObjectFieldConfig{Type: {{call $field.Type $}}, Description: {{$field.QuotedComment}}})
		{{end -}}
	}
{{ end -}}

// Input objects resolvers
{{ range $resolver := .File.InputObjectResolvers -}}
func {{$resolver.FunctionName}}(ctx {{ctxPkg}}.Context, i interface{}) (_ {{goType $resolver.OutputGoType}}, rerr error){
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new({{goTypeForNew $resolver.OutputGoType}})
	{{ range $field := $resolver.Fields -}}
		{{ if $field.IsFromArgs -}}
			if args["{{$field.GraphQLInputFieldName}}"] != nil {
		{{ end -}}
			{{ if isArray $field.GoType -}}
				in := args["{{$field.GraphQLInputFieldName}}"].([]interface{})
				result.{{$field.OutputFieldName}} = make({{goType $field.GoType}}, len(in))
				for i, val := range in {
					{{ if $field.ResolverWithError }}
						{
							v, err := {{call $field.ValueResolver "val" $}}
							if err != nil {
								return nil, {{errorsPkg}}.Wrap(err, "failed to resolve `{{$resolver.FunctionName}}` input object field")
							}
							result.{{$field.OutputFieldName}}[i] = v
						}
					{{ else -}}
						result.{{$field.OutputFieldName}}[i] = {{call $field.ValueResolver "val" $}}
					{{ end -}}
				}
			{{ else -}}
				{{ if $field.ResolverWithError -}}
					{
						v, err := {{call $field.ValueResolver (concat "args[\"" $field.GraphQLInputFieldName "\"]") $}}
						if err != nil {
							return nil, {{errorsPkg}}.Wrap(err, "failed to resolve `{{$resolver.FunctionName}}` input object field")
						}
						result.{{$field.OutputFieldName}} = v
					}
				{{ else -}}
					result.{{$field.OutputFieldName}} = {{call $field.ValueResolver (concat "args[\"" $field.GraphQLInputFieldName "\"]") $}}
				{{ end -}}
			{{ end -}}
		{{ if $field.IsFromArgs -}}
			}
		{{ end -}}
	{{ end -}}
	{{range $oneof := $resolver.OneOfFields -}}
		{{range $index, $field := $oneof.Fields -}}
			{{if eq $index 0 -}}
			if {{$field.GraphQLInputFieldName}}_, ok := args["{{$field.GraphQLInputFieldName}}"]; ok && {{$field.GraphQLInputFieldName}}_ != nil {
                {{ if $field.ResolverWithError -}}
                    v, err := {{call $field.ValueResolver (concat $field.GraphQLInputFieldName "_") $}}
                    if err != nil {
                        return nil, {{errorsPkg}}.Wrap(err, "failed to resolve oneOf object field {{$field.GraphQLInputFieldName}}")
                    }
                {{ else -}}
                    v := {{call $field.ValueResolver (concat $field.GraphQLInputFieldName "_") $}}
                {{end -}}
                {{ if $field.AssigningWrapper -}}
                    result.{{$oneof.OutputFieldName}} = {{call $field.AssigningWrapper "v" $}}
                {{ else -}}
                    result.{{$oneof.OutputFieldName}} = v
                {{ end -}}
			}{{else -}} else if {{$field.GraphQLInputFieldName}}_, ok := args["{{$field.GraphQLInputFieldName}}"]; ok && {{$field.GraphQLInputFieldName}}_ != nil {
                {{ if $field.ResolverWithError -}}
                    v, err := {{call $field.ValueResolver (concat $field.GraphQLInputFieldName "_") $}}
                    if err != nil {
                        return nil, {{errorsPkg}}.Wrap(err, "failed to resolve oneOf object field {{$field.GraphQLInputFieldName}}")
                    }
                {{ else -}}
                    v := {{call $field.ValueResolver (concat $field.GraphQLInputFieldName "_") $}}
                {{end -}}
                {{ if $field.AssigningWrapper -}}
                    result.{{$oneof.OutputFieldName}} = {{call $field.AssigningWrapper "v" $}}
                {{ else -}}
                    result.{{$oneof.OutputFieldName}} = v
                {{ end -}}
			}{{end -}}

		{{end}}
	{{end}}

	return result, nil
}
{{ end -}}
// Output objects
{{ range $object := $.File.OutputObjects -}}
	var {{$object.VariableName}} = {{gqlPkg}}.NewObject({{gqlPkg}}.ObjectConfig{
		Name: "{{$object.GraphQLName}}",
		Fields: {{gqlPkg}}.Fields{},
	})
	func init(){
		{{ range $field := $object.Fields -}}
			{{$object.VariableName}}.AddFieldConfig("{{$field.Name}}", &{{gqlPkg}}.Field{
				Name: "{{$field.Name}}",
				Description: {{$field.QuotedComment}},
				Type: {{call $field.Type $}},
				Resolve: func(p {{gqlPkg}}.ResolveParams) (interface{}, error) {
        	    	switch src := p.Source.(type){
						case *{{goType $object.GoType}}:
							if src == nil {
								return nil, nil
							}
							s := *src
							{{if $field.NeedCast -}}
								return {{$field.CastTo}}({{call $field.Value "s" $}}), nil
							{{else -}}
								return {{call $field.Value "s" $}}, nil
							{{ end -}}
						case {{goType $object.GoType}}:
							{{if $field.NeedCast -}}
								return {{$field.CastTo}}({{call $field.Value "src" $}}), nil
							{{else -}}
								return {{call $field.Value "src" $}}, nil
							{{end -}}
					}
					return nil, {{errorsPkg}}.New("source of unknown type")
				},
			})
		{{ end -}}
		{{ range $field := $object.MapFields -}}
			{{$object.VariableName}}.AddFieldConfig("{{$field.Name}}", &{{gqlPkg}}.Field{
				Name: "{{$field.Name}}",
				Type: {{call $field.Type $}},
				Resolve: func(p {{gqlPkg}}.ResolveParams) (interface{}, error) {
        	    	switch src := p.Source.(type){
						case *{{goType $object.GoType}}:
							if src == nil {
								return nil, nil
							}
                            s := *src
							var res []map[string]interface{}
							for key, value := range {{call $field.Value "s" $}} {
								res = append(res, map[string]interface{}{
									"key":   key,
									"value": value,
								})
							}
							return res, nil
						case {{goType $object.GoType}}:
							var res []map[string]interface{}
							for key, value := range {{call $field.Value "src" $}} {
								res = append(res, map[string]interface{}{
									"key":   key,
									"value": value,
								})
							}
							return res, nil
					}
					return nil, {{errorsPkg}}.New("source of unknown type")
				},
			})
		{{ end -}}
	}
{{ end -}}
// Maps input objects
{{ range $object := .File.MapInputObjects -}}
	var {{$object.VariableName}} = {{gqlPkg}}.NewInputObject({{gqlPkg}}.InputObjectConfig{
        Name: "{{$object.GraphQLName}}",
        Fields: {{gqlPkg}}.InputObjectConfigFieldMapThunk(func() {{gqlPkg}}.InputObjectConfigFieldMap {
            return {{gqlPkg}}.InputObjectConfigFieldMap{
				"key": &{{gqlPkg}}.InputObjectFieldConfig{Type: {{call $object.KeyObjectType $}}},
    	        "value": &{{gqlPkg}}.InputObjectFieldConfig{Type: {{call $object.ValueObjectType $}}},
            }
        }),
    })
{{ end -}}
// Maps input objects resolvers
{{ range $resolver := .File.MapInputObjectResolvers -}}
	func {{$resolver.FunctionName}}(ctx {{ctxPkg}}.Context, i interface{}) (_ map[{{goType $resolver.KeyGoType}}]{{goType $resolver.ValueGoType}}, rerr error){
		if i == nil {
			return nil, nil
		}
		in := i.([]interface{})
		result := make(map[{{goType $resolver.KeyGoType}}]{{goType $resolver.ValueGoType}})
		for i, ival := range in {
			_ = i
			val := ival.(map[string]interface{})
			k, v := val["key"], val["value"]
			_, _ = k,v
			{{if $resolver.KeyResolverWithError -}}
				kk, err := {{call $resolver.KeyResolver "k" $}}
				if err != nil {
					return nil, {{errorsPkg}}.Wrapf(err, "failed to resolve #%d map element key", i)
				}
			{{else -}}
				kk := {{call $resolver.KeyResolver "k" $}}
			{{end -}}
			{{if $resolver.ValueResolverWithError -}}
				vv, err := {{call $resolver.ValueResolver "v" $}}
				if err != nil {
					return nil, {{errorsPkg}}.Wrapf(err, "failed to resolve #%d map element value", i)
				}
			{{else -}}
				vv := {{call $resolver.ValueResolver "v" $}}
			{{end -}}
			result[kk]=vv
		}
		return result, nil
	}
{{ end -}}

// Maps output objects
{{ range $object := .File.MapOutputObjects -}}
	var {{$object.VariableName}} = {{gqlPkg}}.NewObject({{gqlPkg}}.ObjectConfig{
		Name: "{{$object.GraphQLName}}",
       	Fields: {{gqlPkg}}.Fields{
		},
	})
	func init(){
		{{$object.VariableName}}.AddFieldConfig("key", &{{gqlPkg}}.Field{
			Name: "key",
			Type: {{call $object.KeyObjectType $}},
			Resolve: func(p {{gqlPkg}}.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"], nil
			},
		})
		{{$object.VariableName}}.AddFieldConfig("value", &{{gqlPkg}}.Field{
			Name: "value",
			Type: {{call $object.ValueObjectType $}},
			Resolve: func(p {{gqlPkg}}.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"], nil
			},
		})
	}
{{end -}}
