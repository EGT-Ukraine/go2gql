{{- /*gotype: github.com/EGT-Ukraine/go2gql/generator/plugins/graphql.SchemaBodyContext*/ -}}
type {{$.SchemaName}}SchemaClients struct {
	{{ range $service := $.Services -}}
		{{$service.Name}}Client {{goType $service.ClientGoType}}
	{{ end -}}
}

{{ range $service := $.Services -}}
func (c {{$.SchemaName}}SchemaClients) Get{{$service.Name}}Client() {{goType $service.ClientGoType}} {
	return c.{{$service.Name}}Client
}
{{ end -}}

func Get{{$.SchemaName}}Schema(cls {{$.SchemaName}}SchemaClients, ih *{{interceptorsPkg}}.InterceptorHandler{{- if $.TracerEnabled -}}, tr {{opentracingPkg}}.Tracer{{- end -}}) ({{gqlPkg}}.Schema, error) {
	{{ range $service := $.Services -}}
		if cls.{{$service.Name}}Client == nil {
			return {{gqlPkg}}.Schema{}, {{errorsPkg}}.Errorf("Service client {{$service.Name}} can't be nil nil")
		}
	{{ end -}}
	{{ range $service := $.Services -}}
		var {{$service.Name}}QueryFields = {{serviceConstructor "Query" $service $}}(cls.{{$service.Name}}Client, ih{{- if $.TracerEnabled -}}, tr{{- end -}})
		var _ = {{$service.Name}}QueryFields
		var {{$service.Name}}MutationFields = {{serviceConstructor "Mutation" $service $}}(cls.{{$service.Name}}Client, ih{{- if $.TracerEnabled -}}, tr{{- end -}})
		var _ = {{$service.Name}}MutationFields
	{{ end -}}
	{{ range $object := $.Objects -}}
		var {{$object.Name}} = {{gqlPkg}}.NewObject({{gqlPkg}}.ObjectConfig{
			Name: "{{$object.Name}}",
			{{ if ne $object.QuotedComment "" -}}
				Description: {{$object.QuotedComment}},
			{{ end -}}
			Fields: {{gqlPkg}}.Fields{
				{{ if len $object.Fields -}}
					{{ range $fld := $object.Fields -}}
						{{ if $fld.Service -}}
							"{{$fld.Name}}": {{$fld.Service.Name}}{{$object.TypeName}}Fields["{{$fld.Name}}"],
						{{ else -}}
							"{{$fld.Name}}": &{{gqlPkg}}.Field{
								Name: "{{$fld.Name}}",
								Type: {{$fld.Object.Name}},
								Description: {{$fld.QuotedComment}},
								Resolve: func(p {{gqlPkg}}.ResolveParams) (interface{}, error) {
									return struct{}{}, nil
								},
							},
						{{ end -}}
					{{ end -}}
				{{ else -}}
					"noFields": &{{gqlPkg}}.Field{
						Name: "noFields",
						Type: {{gqlPkg}}.String,
					},
				{{ end -}}
			},
		})
	{{ end -}}
	return {{gqlPkg}}.NewSchema({{gqlPkg}}.SchemaConfig{
		Query: {{$.QueryObject}},
		{{ if $.MutationObject -}}
			Mutation: {{$.MutationObject}},
		{{ end -}}
	})
}