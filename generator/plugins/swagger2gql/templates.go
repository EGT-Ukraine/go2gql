// Code generated by go-bindata.
// sources:
// templates/method_caller.gohtml
// templates/method_caller_null.gohtml
// templates/value_resolver_array.gohtml
// templates/value_resolver_datetime.gohtml
// templates/value_resolver_ptr_datetime.gohtml
// DO NOT EDIT!

package swagger2gql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMethod_callerGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x0a\x83\x30\x14\x44\xf7\x9e\x62\x0a\x5d\x18\x10\x0f\x50\xf0\x0a\xa5\x8b\xd2\x6d\x09\xfa\xa5\x82\x46\x1d\x75\x21\xf2\xef\x5e\x7e\x0c\xb4\xcb\x79\xc9\xcc\xfb\xed\x16\xea\x9c\x32\xe3\x38\xae\x25\x65\x7e\xee\x93\xa8\x3a\xe4\xef\x44\x96\xe9\x44\x05\x28\x24\x84\x1c\xe9\x70\x64\x00\x40\x59\x0a\x23\xb8\x55\xf1\x77\xdd\x77\x12\xd6\x97\xa7\x6a\x69\x79\x90\xf5\x33\x36\x77\x3f\x88\xaa\x49\x5c\x6c\x75\x6d\xec\x5c\x2a\x84\xae\x4f\x4b\xe7\x1a\x89\xca\xde\xfe\xd0\xba\x31\xc4\xa8\xd9\x0f\x98\xb8\x7c\xf8\xbd\x1f\x7d\x53\xd8\x4a\xa6\x79\xba\x3f\xca\xdd\x37\x00\x00\xff\xff\xf9\x88\xec\xd0\xd6\x00\x00\x00")

func templatesMethod_callerGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMethod_callerGohtml,
		"templates/method_caller.gohtml",
	)
}

func templatesMethod_callerGohtml() (*asset, error) {
	bytes, err := templatesMethod_callerGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/method_caller.gohtml", size: 214, mode: os.FileMode(420), modTime: time.Unix(1532347776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMethod_caller_nullGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xb1\x0a\xc2\x30\x18\xc4\xf1\xbd\x4f\x71\x83\x43\x02\xd2\x47\x71\x12\xf7\x10\xaf\x58\xb0\xa9\x3d\xd2\x41\x3e\xee\xdd\xa5\xc5\xf1\xe0\xfe\xbf\x69\x6f\x35\x89\x1b\x22\x2e\xa3\xb8\xdd\xbf\x1f\xda\x19\x69\x6e\x9d\x9a\x4a\x65\xf8\x0a\x4a\xab\x32\x62\x00\x00\xb1\xef\x6a\x67\x50\xdf\x33\x5b\x7f\x14\xd9\xe3\xb1\x17\xf6\xd7\xfa\xbc\x95\x85\xf6\xa1\xe6\xc1\xe9\x0f\x9f\xa7\xfc\x0b\x00\x00\xff\xff\x95\x5c\xfe\x51\x6f\x00\x00\x00")

func templatesMethod_caller_nullGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMethod_caller_nullGohtml,
		"templates/method_caller_null.gohtml",
	)
}

func templatesMethod_caller_nullGohtml() (*asset, error) {
	bytes, err := templatesMethod_caller_nullGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/method_caller_null.gohtml", size: 111, mode: os.FileMode(420), modTime: time.Unix(1532347676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesValue_resolver_arrayGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x6a\xf3\x30\x0c\xc7\xcf\xf6\x53\xa8\xa1\xf0\x39\x7c\x59\x1e\x60\xd0\xd3\xd8\x75\x8c\x31\xda\x43\x29\x43\x64\x4a\x66\xe2\xda\x45\x76\xb6\x15\xe3\x77\x1f\x76\x9a\xd1\xcb\x06\xcb\x2d\xb2\xf5\xd3\x4f\x7f\xf7\x93\xed\x40\x21\x0f\xa0\x6d\x20\xee\xb1\xa3\x98\x6a\x50\x31\x76\x68\x0c\xac\x5b\x26\x3f\x99\xf0\x7c\x3e\x51\x4a\x0d\x10\xb3\xe3\x1a\xa2\x14\x64\xe8\x48\x36\xf8\x06\xdc\x08\xb7\x1b\x40\x1e\x5a\xb5\x3f\x5c\x53\xa4\xd0\x3d\xac\xdc\x98\xaf\x0b\xa6\x30\xb1\x05\xab\x4d\x03\x31\x16\x8e\x7f\x1c\x87\x94\xda\x07\xfa\x50\x15\xf2\x30\x65\x1e\x68\x0f\xd6\x05\x40\x66\x3c\x57\xb5\x14\x49\x0a\x26\x9f\x27\x1c\x71\xa4\x9f\xbc\x0c\x59\xb5\x18\xd5\xb5\x14\xbd\x63\xd0\x0d\x5c\x4a\xb9\x9b\xd1\x0e\xb4\x14\x7c\x36\x7a\x81\xcd\xf2\x2f\x85\x88\x11\x74\x0f\xeb\x36\x57\x9e\xc8\x3b\xf3\x4e\xbc\xd3\xe1\xed\x9e\x19\x6e\x52\x92\x42\x08\x32\x5b\x34\x25\x83\x0c\xfc\x36\xb9\xee\x80\xea\x42\xac\xb2\xa2\x73\xe1\x2e\x7c\xce\xcd\xba\x2f\x8d\xab\x4d\x8e\x20\x4a\xb8\xfa\x7e\xc9\x66\xc7\x78\x52\xc4\xdc\x40\xd5\xa1\xfd\x17\x80\xe7\x41\x73\x3e\x8b\x7e\xce\x49\x88\x32\x86\xc9\xef\xf5\xa1\x6c\xb6\x45\x33\xef\x45\xc6\xd3\xb2\xc3\xe5\xfc\xff\x5f\xfd\x33\xc6\xbe\xce\x94\xf2\x24\xc5\x98\xc9\x37\x59\x5b\x26\x15\xe3\xba\x45\x1e\x52\xaa\xbf\x02\x00\x00\xff\xff\xb9\x59\x43\x9b\x53\x02\x00\x00")

func templatesValue_resolver_arrayGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesValue_resolver_arrayGohtml,
		"templates/value_resolver_array.gohtml",
	)
}

func templatesValue_resolver_arrayGohtml() (*asset, error) {
	bytes, err := templatesValue_resolver_arrayGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/value_resolver_array.gohtml", size: 595, mode: os.FileMode(420), modTime: time.Unix(1532343822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesValue_resolver_datetimeGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4a\xc4\x30\x10\x86\xef\xfb\x14\x43\x0f\x92\x40\xe9\x41\xc5\x83\xd0\x9b\x67\xf1\xa0\xa7\xdd\x45\x86\x76\x5a\x82\xed\xb4\x4c\x66\x51\x98\xcd\xbb\x4b\x5a\xdd\xed\x65\x0b\x4d\xc8\x9f\xcc\x37\x5f\xd2\x9d\xb8\x71\x28\x3d\x04\x56\x92\x0e\x1b\xb2\xe4\xc1\x7d\x82\x59\x54\xe9\x46\x7d\xfb\xea\x53\xaa\x5e\x50\xe9\x3d\x8c\x54\x02\x89\xe4\x7f\x12\x0f\xb6\x03\x00\x08\x1d\xe4\xfa\xba\x06\x0e\xc3\x5f\x96\x3f\x21\x3d\x09\x2f\xcb\xb4\x8c\x08\xcf\x75\x3e\x5a\xb9\x11\xe7\x7d\x54\x09\xdc\x1f\xb7\x6d\x2f\xb8\x7d\x11\xa9\x99\xb8\x8d\xc5\xf1\x9f\x7b\x3e\xe7\x98\x91\xa7\x4d\x78\x6d\x96\xad\x6a\x30\x5b\xcc\xe2\xea\xfc\x4a\xdf\xee\x50\xf0\xa4\x80\xc3\x00\x2d\x2a\x69\x18\x09\x66\x14\x1c\x49\x49\x22\xcc\x18\x23\xb5\x87\xc2\xdf\x96\xd6\x2c\x6d\x96\x2b\x57\xea\x07\x87\x1f\xb7\x35\xac\x5c\x60\x7d\x7a\xf4\x25\x2c\xb3\xbb\x6a\x2e\x3b\x0f\xf7\xde\xaf\xfc\x95\x7d\xe3\x61\xdd\x9d\xfa\x32\x5f\x6a\x97\x9c\x19\x4a\x9f\x92\xff\x0d\x00\x00\xff\xff\x05\x8c\x9f\x60\x9c\x01\x00\x00")

func templatesValue_resolver_datetimeGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesValue_resolver_datetimeGohtml,
		"templates/value_resolver_datetime.gohtml",
	)
}

func templatesValue_resolver_datetimeGohtml() (*asset, error) {
	bytes, err := templatesValue_resolver_datetimeGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/value_resolver_datetime.gohtml", size: 412, mode: os.FileMode(420), modTime: time.Unix(1532343646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesValue_resolver_ptr_datetimeGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xf4\x30\x0c\x86\xf7\xfe\x0a\xab\xc3\xa7\xe4\x53\xd5\x01\x10\x03\x52\x37\x66\xc4\x00\xd3\xdd\x0d\x56\xeb\x56\x11\xad\x5b\x39\x3e\x81\xe4\xcb\x7f\x47\x69\x0f\xe8\x00\x19\x1c\xe9\x49\xec\xf7\x91\xfb\x33\xb7\x0e\x65\x80\xc0\x4a\xd2\x63\x4b\x96\x3c\xb8\xff\x66\x51\xa5\x9f\xf4\xf9\x6d\x48\xa9\x7e\x44\xa5\x97\x30\x51\x05\x24\x32\x8b\x07\x2b\x00\x00\x42\x0f\xb9\xb5\x69\x80\xc3\x78\x65\xf9\x08\xe9\x59\x38\xc3\x2a\x97\x95\xa7\xb5\x22\x3c\x34\xb9\xa7\x76\x13\x2e\x87\xa8\x12\x78\x38\xed\xa3\xbf\xe7\x1e\xca\x48\xed\xcc\x5d\x2c\x4f\x5f\x01\x97\x4b\xc6\x8c\x3c\xef\xe0\xef\xa9\x66\xab\x68\xdc\xf4\x9f\xe8\xdd\x1d\x4b\x9e\x15\x70\x1c\xa1\x43\x25\x0d\x13\xc1\x82\x82\x13\x29\x49\x84\x05\x63\xa4\xee\x58\xfa\x9d\xab\x66\x57\xb3\xfc\x75\x1b\xf3\xca\xe1\xc3\xed\xc5\x6a\x17\x58\xef\xef\x7c\x05\xeb\xed\x7e\xec\xd6\x97\xdb\x1b\xef\xb7\x81\x57\xb5\xbf\xd6\xea\xdd\x3f\xf5\xdb\xaa\x92\x33\x43\x19\x52\xf2\x45\x51\x14\x9f\x01\x00\x00\xff\xff\x20\xc2\x6f\x49\x9e\x01\x00\x00")

func templatesValue_resolver_ptr_datetimeGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesValue_resolver_ptr_datetimeGohtml,
		"templates/value_resolver_ptr_datetime.gohtml",
	)
}

func templatesValue_resolver_ptr_datetimeGohtml() (*asset, error) {
	bytes, err := templatesValue_resolver_ptr_datetimeGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/value_resolver_ptr_datetime.gohtml", size: 414, mode: os.FileMode(420), modTime: time.Unix(1532343652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/method_caller.gohtml": templatesMethod_callerGohtml,
	"templates/method_caller_null.gohtml": templatesMethod_caller_nullGohtml,
	"templates/value_resolver_array.gohtml": templatesValue_resolver_arrayGohtml,
	"templates/value_resolver_datetime.gohtml": templatesValue_resolver_datetimeGohtml,
	"templates/value_resolver_ptr_datetime.gohtml": templatesValue_resolver_ptr_datetimeGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"method_caller.gohtml": &bintree{templatesMethod_callerGohtml, map[string]*bintree{}},
		"method_caller_null.gohtml": &bintree{templatesMethod_caller_nullGohtml, map[string]*bintree{}},
		"value_resolver_array.gohtml": &bintree{templatesValue_resolver_arrayGohtml, map[string]*bintree{}},
		"value_resolver_datetime.gohtml": &bintree{templatesValue_resolver_datetimeGohtml, map[string]*bintree{}},
		"value_resolver_ptr_datetime.gohtml": &bintree{templatesValue_resolver_ptr_datetimeGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

